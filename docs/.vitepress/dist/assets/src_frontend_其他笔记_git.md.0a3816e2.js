import{o as e,c as i,d as a}from"./app.dc9dbd0c.js";const t='{"title":"git","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、配置ssh","slug":"一、配置ssh"},{"level":2,"title":"二、项目初始化","slug":"二、项目初始化"},{"level":2,"title":"三、分支操作","slug":"三、分支操作"},{"level":3,"title":"分支常用命令","slug":"分支常用命令"},{"level":3,"title":"分支命名规范","slug":"分支命名规范"},{"level":3,"title":"commit 提交消息类型","slug":"commit-提交消息类型"},{"level":3,"title":"清理本地分支","slug":"清理本地分支"},{"level":3,"title":"删除分支","slug":"删除分支"},{"level":3,"title":"rebase","slug":"rebase"},{"level":3,"title":"常见分支问题","slug":"常见分支问题"},{"level":2,"title":"四、暂存操作","slug":"四、暂存操作"},{"level":2,"title":"五、用户管理","slug":"五、用户管理"},{"level":2,"title":"六、版本管理","slug":"六、版本管理"},{"level":3,"title":"状态查看","slug":"状态查看"},{"level":3,"title":"日志查看","slug":"日志查看"},{"level":3,"title":"回退版本","slug":"回退版本"},{"level":3,"title":"切换远程仓库地址","slug":"切换远程仓库地址"},{"level":2,"title":"七、git常见问题","slug":"七、git常见问题"},{"level":3,"title":"描述出错怎么修改描述","slug":"描述出错怎么修改描述"},{"level":3,"title":"项目名字被修改，地址被更换","slug":"项目名字被修改，地址被更换"},{"level":3,"title":"放弃本地修改","slug":"放弃本地修改"},{"level":2,"title":"八、git统计代码量","slug":"八、git统计代码量"},{"level":2,"title":"九、git其他操作","slug":"九、git其他操作"},{"level":3,"title":"git rm","slug":"git-rm"},{"level":3,"title":"打造自己的git bash","slug":"打造自己的git-bash"},{"level":2,"title":"十、vscode操作git","slug":"十、vscode操作git"},{"level":3,"title":"vscode配置git环境","slug":"vscode配置git环境"},{"level":3,"title":"vscode文件后面的字母意思","slug":"vscode文件后面的字母意思"},{"level":3,"title":"vscode上传代码","slug":"vscode上传代码"},{"level":3,"title":"vscode切换分支","slug":"vscode切换分支"},{"level":2,"title":"十一、vscode插件","slug":"十一、vscode插件"},{"level":3,"title":"gitlens","slug":"gitlens"},{"level":3,"title":"git graph","slug":"git-graph"},{"level":2,"title":"十二、github搜索技巧","slug":"十二、github搜索技巧"},{"level":2,"title":"参考链接","slug":"参考链接"}],"relativePath":"src\\\\frontend\\\\其他笔记\\\\git.md","lastUpdated":1612089777631}',s={},l=a('<h1 id="git"><a class="header-anchor" href="#git" aria-hidden="true">#</a> git</h1><h2 id="一、配置ssh"><a class="header-anchor" href="#一、配置ssh" aria-hidden="true">#</a> 一、配置ssh</h2><ol><li>设置user name和email</li></ol><div class="language-sh"><pre><code>git config --global user.name &#39;heny&#39;\ngit config --global user.email &#39;heny@qq.com&#39;\n</code></pre></div><ol start="2"><li>生成SSH密钥过程</li></ol><p>（1）查看是否已经有了ssh密钥：cd ~/.ssh</p><p>路径：c:/用户/Administrator/.ssh 删除.ssh下面的所有文件</p><p>（2）生成密钥</p><div class="language-sh"><pre><code>ssh-keygen -t rsa -C &#39;heny@qq.com&#39;   // 回车之后记得根据提示按下yes\n</code></pre></div><p>注意：如果提示ssh-keygen不是内部命令或者其他的报错，则需要以下配置</p><p>找到git/usr/bin目录下的ssh-keygen.exe，之后配置到Path环境变量;</p><p><img src="https://notecdn.heny.vip/images/git-01.png" alt="image-20200412204637296"></p><ol start="3"><li>生成密钥之后就可以去官网绑定了</li></ol><h2 id="二、项目初始化"><a class="header-anchor" href="#二、项目初始化" aria-hidden="true">#</a> 二、项目初始化</h2><ol><li>在git官网新建一个git仓库之后；</li></ol><p>如果没有使用readme初始化，执行以下四步</p><div class="language-sh"><pre><code>git init  # 初始化\ngit add .   # 添加当前项目文件夹下的所有文件， 如果是./*则是当前文件夹下\ngit commit -m &#39;描述&#39;   # 给文件添加备注\ngit remote add origin 地址    # 添加远程仓库地址\ngit push -u origin master   # 把本地添加的文件上传到git;\n</code></pre></div><ol start="2"><li>如果使用了readme初始化；</li></ol><div class="language-sh"><pre><code>git clone 地址  # 克隆只需要操作一次\n</code></pre></div><ol start="3"><li>当修改了文件之后想要上传代码</li></ol><div class="language-sh"><pre><code>git add .\ngit commit -m &#39;添加描述&#39;\ngit pull   \ngit push\n</code></pre></div><p>如果git pull拉下来的代码有冲突则需要先解决冲突问题，解决之后需要再次git add 重复第一二次，如果没有则直接git push</p><p>注意：push失败的情况</p><p>（1）文件为空</p><p>（2）创建文件之后没有commit</p><h2 id="三、分支操作"><a class="header-anchor" href="#三、分支操作" aria-hidden="true">#</a> 三、分支操作</h2><h3 id="分支常用命令"><a class="header-anchor" href="#分支常用命令" aria-hidden="true">#</a> 分支常用命令</h3><ul><li><code>git branch</code> 查看本地分支</li><li><code>git branch -a</code> 查看所有分支</li><li><code>git branch -vv</code> 查看本地分支写远程分支的对比</li><li><code>git checkout &lt;branch&gt;</code> 切换到一个分支，本地没有的分支远程有的话也可以直接切换</li><li><code>git checkout -b dev</code> 创建一个新分支</li><li><code>git checkout -b dev origin/dev</code> 切换到一个新的分支，并追踪到远程分支上；</li><li><code>git push --set-upstream origin dev</code> 将本地新分支推到远程</li><li><code>git fetch</code> 拉取最新远程信息</li><li><code>git merge master</code> 合并master内容</li><li><code>git rebase dev2.0</code> 融合dev2.0分支最新的内容</li></ul><h3 id="分支命名规范"><a class="header-anchor" href="#分支命名规范" aria-hidden="true">#</a> 分支命名规范</h3><ul><li><code>master</code>：master分支为主分支，也是用于部署生产环境的分支，master分支一般由其他分支进行合并，任何时间都不能直接修改master分支；</li><li><code>develop</code>：develop-4.0.0；分支为开发分支，一般开发新功能时，feature分支都是基于develop分支创建的；</li><li><code>feature</code>：feature-user；开发新功能时，以develop为基础创建feature分支</li><li><code>release</code>：release-4.0.0；release为预上线分支，发布提测</li><li><code>hotfix</code>：hotfix-***；线上出现紧急问题时，需要及时修复，以master分支为基线，创建hotfix分支，修复完成后，需要合并到master分支和develop分支</li></ul><p><img src="https://notecdn.heny.vip/images/3412338-53aedee7d8081020.png" alt="img"></p><p>主分支master建议每次上线打上tag</p><div class="language-bash"><pre><code><span class="token function">git</span> tag -a v0.1 -m <span class="token string">&#39;部署包版本名&#39;</span>\n</code></pre></div><h3 id="commit-提交消息类型"><a class="header-anchor" href="#commit-提交消息类型" aria-hidden="true">#</a> commit 提交消息类型</h3><ul><li>build：主要目的是修改项目构建系统(例如 glup，webpack，rollup 的配置等)的提交</li><li>ci：主要目的是修改项目继续集成流程(例如 Travis，Jenkins，GitLab CI，Circle等)的提交</li><li>docs：文档更新</li><li>feat：新增功能</li><li>fix：bug 修复</li><li>perf：性能优化</li><li>refactor：重构代码(既没有新增功能，也没有修复 bug)</li><li>style：不影响程序逻辑的代码修改(修改空白字符，补全缺失的分号等)</li><li>test：新增测试用例或是更新现有测试</li><li>revert：回滚某个更早之前的提交</li><li>chore：不属于以上类型的其他类型</li></ul><h3 id="清理本地分支"><a class="header-anchor" href="#清理本地分支" aria-hidden="true">#</a> 清理本地分支</h3><div class="language-sh"><pre><code>git remote show origin\ngit remote prune origin\n</code></pre></div><h3 id="删除分支"><a class="header-anchor" href="#删除分支" aria-hidden="true">#</a> 删除分支</h3><blockquote><p>删除不能删除远程的分支</p></blockquote><p>（1）删除单个分支</p><div class="language-sh"><pre><code>git branch -D dev\n</code></pre></div><p>（2）批量删除：删除除去master分支：</p><div class="language-sh"><pre><code>git checkout master\ngit branch | grep -v &#39;master&#39; | xargs git branch -D\n</code></pre></div><h3 id="rebase"><a class="header-anchor" href="#rebase" aria-hidden="true">#</a> rebase</h3><blockquote><p>git rebase会将当前分支的提交复制到指定的分支之上；</p></blockquote><p><code>git rebase master</code> 将一个分支的修改融入到另一个分支；</p><p>rebase可以保留一个漂亮的、线性的git历史记录；</p><p><strong>同一分支的合并</strong></p><p>当拉代码遇到冲突时，需要pull，这时，<code>git log --oneline --graph</code> 会发现多出了一个分叉，这时输入<code>git rebase</code>即可合并当前的分叉，之后执行push提交代码；</p><p>也可以直接：<code>git pull --rebase</code>；不需要pull之后再rebase；</p><p><strong>不同分支之间的合并</strong></p><div class="language-bash"><pre><code><span class="token comment"># 当dev1分支修改后, 切换到dev2分支, 并rebase dev1分支</span>\n<span class="token function">git</span> checkout dev2\n<span class="token function">git</span> rebase dev1\n<span class="token function">git</span> checkout dev1\n</code></pre></div><p>如果在rebase时，出现冲突，比如：代码修改</p><p>rebase冲突之后：<code>git rebase --continue</code>；因为之前的rebase其实只完成了一半；</p><p>参考文献：<a href="https://www.jianshu.com/p/f7ed3dd0d2d8" target="_blank" rel="noopener noreferrer">Git rebase使用</a></p><p><strong>删除中间的版本</strong></p><div class="language-bash"><pre><code><span class="token function">git</span> rebase -i commit-id\n</code></pre></div><p>执行命令之后会弹出来一个vim编辑器，将要删除的版本的<code>pick</code>改为<code>drop</code>，之后保存，之后执行<code>git push -f -u</code>强制推送远程</p><h3 id="常见分支问题"><a class="header-anchor" href="#常见分支问题" aria-hidden="true">#</a> 常见分支问题</h3><ol><li>在非目的分支上做了修改，想切换回目的分支</li></ol><p>（1）无论有没有添加到暂存区都行（暂存区就是有commit代码）</p><div class="language-sh"><pre><code>git checkout -b new_branch # 建立临时分支, 这样改动会被带到新分支\ngit stash # 保存在栈区\ngit checkout 目标分支\ngit pull # 将代码拉下来, 避免解决冲突\ngit stash pop # 将栈区内容取出放到当前分支\n</code></pre></div><p>（2）已提交到本地仓库</p><div class="language-sh"><pre><code>git reset HEAD^ # 撤销最近一次提交\n</code></pre></div><ol start="2"><li><p>ignoring broken ref refs问题</p><ul><li>找到.git目录下refs/remotes/origin目录（子模块的这个目录是在主模块的.git目录下，因为子模块没有.git目录）</li><li>删除里面的HEAD文件或者所有文件</li><li>然后运行git fetch –all</li></ul></li><li><p>分支介绍</p><p>所有分支针对<code>master</code>做比较，下图中，左边为落后<code>master</code>分支数量，右边为超前<code>master</code>分支数量；</p><p><img src="https://notecdn.heny.vip/images/git-12.png" alt="image-20200426124513175"></p></li></ol><h2 id="四、暂存操作"><a class="header-anchor" href="#四、暂存操作" aria-hidden="true">#</a> 四、暂存操作</h2><ol><li><p>为什么需要暂时：</p><ul><li>（1）当我们写代码时，发现写错分支了，此时需要将代码保存到暂存区，切换到正确的分支再拉下来</li><li>（2）当我们修改了一些文件时，想查看修改的文件是否造成了其他问题，可以先保存在暂存区，测试完再拉下来</li></ul></li><li><p>基础使用</p></li></ol><div class="language-sh"><pre><code>git stash # 提交到暂存区\ngit stash pop # 拉下来\n</code></pre></div><ol start="3"><li>常用的git stash命令</li></ol><ul><li><code>git stash save &#39;message&#39;</code>：执行存储时，添加备注，方便查找，git stash不方便查找</li><li><code>git stash list</code> ：查看stash了哪些存储</li><li><code>git stash show</code> ：显示做了哪些改动，默认show第一个存储，</li><li><code>git stash show stash@{1}</code> ： 显示第一个修改文件</li><li><code>git stash apply</code> ： 应用某个存储，但不会把存储从存储列表中删除，默认使用第一个</li><li><code>git stash apply stash@{1}</code> ：应用第一个</li><li><code>git stash pop</code> ： 命令恢复之前的缓存工作目录，将缓存堆栈中的对应stash删除</li><li><code>git stash pop stash@{1}</code> ：应用指定的stash</li><li><code>git stash drop stash@{1}</code> ：丢弃第几个存储，从列表中删除这个存储</li><li><code>git stash clear</code> ： 删除所有缓存的stash；</li></ul><p>注意：新增的文件，直接执行<code>stash</code>是不会被存储的，如果有新增文件的时候，需要首先执行git add添加新文件到git库中，不需要提交和<code>commit</code>，然后再执行<code>git stash</code>即可；</p><h2 id="五、用户管理"><a class="header-anchor" href="#五、用户管理" aria-hidden="true">#</a> 五、用户管理</h2><p><code>git config --list</code> 查看git配置</p><h2 id="六、版本管理"><a class="header-anchor" href="#六、版本管理" aria-hidden="true">#</a> 六、版本管理</h2><h3 id="状态查看"><a class="header-anchor" href="#状态查看" aria-hidden="true">#</a> 状态查看</h3><p><code>git status</code> 查看文件add的状态，以及远程是否有更新</p><h3 id="日志查看"><a class="header-anchor" href="#日志查看" aria-hidden="true">#</a> 日志查看</h3><ul><li><p><code>git log</code> # 获取版本id</p></li><li><p><code>git reflog</code> # 查看所有的版本id，可以查看到回退之后的之前的版本</p></li></ul><p>reflog可以查看到所有的操作信息，比如push、reset、commit等等；</p><p>比如：1-10的版本回退到1-8的版本，git log只能看到最新的8，reflog还可以看到10；</p><h3 id="回退版本"><a class="header-anchor" href="#回退版本" aria-hidden="true">#</a> 回退版本</h3><ul><li>软重置：<code>git reset --soft HEAD~2</code> 或id；</li></ul><p>执行软重置不会移除提交之后加入的修改，但是会修改git的历史记录，当使用了reset可以使用status查看修改内容，意味着可以重新修改重新提交；</p><ul><li>硬重置：<code>git reset --hard id</code> 不保留提交引入的修改，看不到之前的修改内容；</li></ul><p>常用的回退版本命令：</p><div class="language-bash"><pre><code><span class="token function">git</span> reset --hard <span class="token function">id</span>   <span class="token comment"># 回退本地代码库</span>\n<span class="token function">git</span> push -f -u origin master  <span class="token comment"># 推送到远程服务器</span>\n<span class="token function">git</span> pull  <span class="token comment"># 重新拉取代码</span>\n</code></pre></div><p>回退上一个版本：<code>git reset --hard head^</code></p><h3 id="切换远程仓库地址"><a class="header-anchor" href="#切换远程仓库地址" aria-hidden="true">#</a> 切换远程仓库地址</h3><div class="language-bash"><pre><code><span class="token function">git</span> remote -v <span class="token comment"># 查看本地仓库远程地址</span>\n<span class="token function">git</span> remote <span class="token function">rm</span> origin <span class="token comment"># 删除本地远程地址</span>\n<span class="token function">git</span> remote <span class="token function">add</span> origin 地址 <span class="token comment"># 添加远程仓库地址</span>\n<span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/master master <span class="token comment"># 将本地分支追踪到远程master</span>\n</code></pre></div><h2 id="七、git常见问题"><a class="header-anchor" href="#七、git常见问题" aria-hidden="true">#</a> 七、git常见问题</h2><h3 id="描述出错怎么修改描述"><a class="header-anchor" href="#描述出错怎么修改描述" aria-hidden="true">#</a> 描述出错怎么修改描述</h3><p>（1）通过git log找到上一个提交的commit_id</p><p><img src="https://notecdn.heny.vip/images/git-02.png" alt="image"></p><p>（2）通过：git reset --soft commit_id，执行一遍，之后就可以重新git commit了；</p><h3 id="项目名字被修改，地址被更换"><a class="header-anchor" href="#项目名字被修改，地址被更换" aria-hidden="true">#</a> 项目名字被修改，地址被更换</h3><div class="language-shell"><pre><code><span class="token comment"># 第一种</span>\n<span class="token function">git</span> remote set-url origin url <span class="token comment"># 重新设置远程地址</span>\n\n<span class="token comment"># 第二种</span>\n<span class="token function">git</span> remote <span class="token function">rm</span> origin <span class="token comment"># 删除跟踪远程</span>\n<span class="token function">git</span> remote <span class="token function">add</span> origin url <span class="token comment"># 重新配置远程地址</span>\n</code></pre></div><h3 id="放弃本地修改"><a class="header-anchor" href="#放弃本地修改" aria-hidden="true">#</a> 放弃本地修改</h3><p>没有<code>git add .</code>的情况</p><ul><li>放弃单个文件修改：<code>git checkout -- readme.md</code></li><li>放弃所有修改：<code>git checkout .</code></li></ul><p>有<code>git add .</code>的情况</p><ul><li>放弃单个文件：<code>git reset HEAD readme.md</code></li><li>放弃所有：<code>git reset HEAD .</code></li></ul><h2 id="八、git统计代码量"><a class="header-anchor" href="#八、git统计代码量" aria-hidden="true">#</a> 八、git统计代码量</h2><p>修改since开始日期，和until到什么日期，如果不修改则是至今</p><p>如果单独查询某个用户，修改$name为用户邮箱</p><div class="language-sh"><pre><code>git log --format=&#39;%aN&#39; | sort -u | while read name; do echo -en &quot;$name\\t&quot;; git log --author=&quot;$name&quot; --pretty=tformat: --since =2020-03-30 --until=2020-04-02 --numstat | awk &#39;{ add += $1; subs += $2; loc += $1 - $2 } END { printf &quot;added lines: %s, removed lines: %s, total lines: %s\\n&quot;, add, subs, loc }&#39; -; done\n</code></pre></div><p>--since 限制显示输出的范围</p><ul><li><code>--since</code>, <code>--after</code> 仅显示指定时间之后的提交</li><li><code>--until</code>, <code>--before</code> 仅显示指定时间之前的提交</li><li><code>--author</code> 仅显示指定作者相关的提交</li></ul><p>例子：</p><ul><li><code>git log --until=1.minute.ago</code> // 一分钟之前的所有log</li><li><code>git log --since=1.day.ago</code> // 一天之内的log</li><li><code>git log --since=1.month.age --until=2.weeks.age</code> // 一个月之前到半月之前的log</li></ul><p>指定时间</p><div class="language-sh"><pre><code>git log --format=&#39;%aN&#39; | sort -u | while read name; do echo -en &quot;$name\\t&quot;; git log --author=&quot;$name&quot; --pretty=tformat: --since =&#39;2020-04-02 00:00:00&#39; --until=&#39;2020-04-02 23:59:59&#39; --numstat | awk &#39;{ add += $1; subs += $2;  loc += $1 - $2 } END { printf &quot;added lines: %s, removed lines: %s, total lines: %s\\n&quot;, add, subs, loc }&#39; -; done\n</code></pre></div><h2 id="九、git其他操作"><a class="header-anchor" href="#九、git其他操作" aria-hidden="true">#</a> 九、git其他操作</h2><p>在一行查看提交日志：<code>git log --oneline --decorate --graph</code></p><h3 id="git-rm"><a class="header-anchor" href="#git-rm" aria-hidden="true">#</a> git rm</h3><ul><li><p><code>git rm</code>：同时从工作区和索引中删除文件</p></li><li><p><code>git rm -r --cached</code>：从索引中删除文件，但是本地文件还在</p></li><li><p>常用的删除远程文件命令：</p><div class="language-bash"><pre><code><span class="token function">git</span> <span class="token function">rm</span> -r --cached target <span class="token comment"># 删除target文件</span>\n<span class="token function">git</span> commit -m <span class="token string">&#39;delete target&#39;</span>\n<span class="token function">git</span> push\n</code></pre></div></li></ul><h3 id="打造自己的git-bash"><a class="header-anchor" href="#打造自己的git-bash" aria-hidden="true">#</a> 打造自己的git bash</h3><p><a href="https://blog.csdn.net/Dancer__Sky/article/details/81632640" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/Dancer__Sky/article/details/81632640</a></p><h2 id="十、vscode操作git"><a class="header-anchor" href="#十、vscode操作git" aria-hidden="true">#</a> 十、vscode操作git</h2><h3 id="vscode配置git环境"><a class="header-anchor" href="#vscode配置git环境" aria-hidden="true">#</a> vscode配置git环境</h3><p>终端直接使用git方式，带有颜色</p><p>（1）将以下代码添加到vscode设置里面</p><p>路径：点击小齿轮--&gt;设置--&gt;点击以json文件编辑，并添加进去;</p><div class="language-json"><pre><code><span class="token property">&quot;terminal.integrated.shell.windows&quot;</span><span class="token operator">:</span> <span class="token string">&quot;C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe&quot;</span>\n</code></pre></div><p>（2）之后按ctrl+` 可以打开终端;</p><p>输入cmd可以转回原生的cmd终端</p><p>输入bash可以转回git终端;</p><h3 id="vscode文件后面的字母意思"><a class="header-anchor" href="#vscode文件后面的字母意思" aria-hidden="true">#</a> vscode文件后面的字母意思</h3><p>A: 你本地新增的文件（服务器上没有）.</p><p>C: 文件的一个新拷贝.</p><p>D: 你本地删除的文件（服务器上还在）.</p><p>M: 文件的内容或者mode被修改了.</p><p>R: 文件名被修改了。</p><p>T: 文件的类型被修改了。</p><p>U: 文件没有被合并(你需要完成合并才能进行提交)。</p><p>X: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)。</p><h3 id="vscode上传代码"><a class="header-anchor" href="#vscode上传代码" aria-hidden="true">#</a> vscode上传代码</h3><ol><li>点击分支</li></ol><p><img src="https://notecdn.heny.vip/images/git-03.png" alt="image"></p><ol start="2"><li>点击对勾，之后弹出提示框，提示输入commit</li></ol><p><img src="https://notecdn.heny.vip/images/git-04.png" alt="image"></p><ol start="3"><li>点击推送，或者推送到（会提示选择分支）；</li></ol><p><img src="https://notecdn.heny.vip/images/git-05.png" alt="image"></p><ol start="4"><li>之后去git里面查看是否已经提交了代码；</li></ol><p><img src="https://notecdn.heny.vip/images/git-06.png" alt="image"></p><h3 id="vscode切换分支"><a class="header-anchor" href="#vscode切换分支" aria-hidden="true">#</a> vscode切换分支</h3><p><img src="https://notecdn.heny.vip/images/git-07.png" alt="image"></p><h2 id="十一、vscode插件"><a class="header-anchor" href="#十一、vscode插件" aria-hidden="true">#</a> 十一、vscode插件</h2><h3 id="gitlens"><a class="header-anchor" href="#gitlens" aria-hidden="true">#</a> gitlens</h3><p>使用gitlens使开发更方便，代码管理更容易</p><ol><li>搜索：gitlens 并安装，之后在每一行代码后面可以清晰的看见</li></ol><p><img src="https://notecdn.heny.vip/images/git-08.png" alt="image"></p><ol start="2"><li>侧边栏工具使用</li></ol><p><img src="https://notecdn.heny.vip/images/git-09.png" alt="image"></p><p><img src="https://notecdn.heny.vip/images/git-10.png" alt="image"></p><ol start="3"><li>右上角实时对比分支修改内容</li></ol><p><img src="https://notecdn.heny.vip/images/git-11.png" alt="image"></p><h3 id="git-graph"><a class="header-anchor" href="#git-graph" aria-hidden="true">#</a> git graph</h3><p>方便查看git分支提交记录，可以直接基于一个log创建一个新的分支、</p><p>两种打开方式：</p><p><img src="https://notecdn.heny.vip/images/image-20200729003318782.png" alt="image-20200729003318782"><img src="https://notecdn.heny.vip/images/image-20200814102618851.png" alt="image-20200814102618851"></p><h2 id="十二、github搜索技巧"><a class="header-anchor" href="#十二、github搜索技巧" aria-hidden="true">#</a> 十二、github搜索技巧</h2><p><img src="https://notecdn.heny.vip/images/image-20200715162848585.png" alt="image"></p><h2 id="参考链接"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2><ul><li><a href="https://www.cnblogs.com/hezhiying/p/9292314.html" target="_blank" rel="noopener noreferrer">您必须知道的Git分支开发规范</a></li></ul>',164);s.render=function(a,t,s,o,n,d){return e(),i("div",null,[l])};export default s;export{t as __pageData};
