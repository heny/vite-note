import{o as n,c as s,d as a}from"./app.0b9a38dc.js";const t='{"title":"es6-07 proxy、Reflect","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、proxy","slug":"一、proxy"},{"level":3,"title":"代理","slug":"代理"},{"level":3,"title":"proxy支持的所有操作","slug":"proxy支持的所有操作"},{"level":3,"title":"Proxy实例的方法","slug":"proxy实例的方法"},{"level":2,"title":"二、Reflect","slug":"二、reflect"},{"level":3,"title":"概述","slug":"概述"},{"level":3,"title":"Reflect的静态方法","slug":"reflect的静态方法"},{"level":3,"title":"get(target,name,receiver)","slug":"get-target-name-receiver"},{"level":3,"title":"set(target,name,value,receiver)","slug":"set-target-name-value-receiver"},{"level":3,"title":"construct(target,args)","slug":"construct-target-args"},{"level":3,"title":"apply(func,thisArg,args)","slug":"apply-func-thisarg-args"},{"level":3,"title":"ownKeys(target)","slug":"ownkeys-target"}],"relativePath":"src\\\\frontend\\\\es6\\\\es6-07 proxy、Reflect.md","lastUpdated":1612089669904}',p={},e=a('<h1 id="es6-07-proxy、reflect"><a class="header-anchor" href="#es6-07-proxy、reflect" aria-hidden="true">#</a> es6-07 proxy、Reflect</h1><h2 id="一、proxy"><a class="header-anchor" href="#一、proxy" aria-hidden="true">#</a> 一、proxy</h2><h3 id="代理"><a class="header-anchor" href="#代理" aria-hidden="true">#</a> 代理</h3><blockquote><p>可以修改对象的原操作；</p></blockquote><p>proxy的两个参数，都是对象，第一个是要代理的对象，第二个是对象的所属操作</p><div class="language-js"><pre><code><span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>\n</code></pre></div><h4 id="代理对象"><a class="header-anchor" href="#代理对象" aria-hidden="true">#</a> 代理对象</h4><p><code>target</code>为代理的对象，<code>key</code>为获取的属性，<code>receiver</code>指向创建的这个proxy，如果输出<code>receiver</code>会进行取值操作，会造成死循环；</p><div class="language-js"><pre><code><span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span>key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 调用Reflect的get方法完成默认行为</span>\n        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="代理函数"><a class="header-anchor" href="#代理函数" aria-hidden="true">#</a> 代理函数</h4><div class="language-js"><pre><code><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;prototype&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;Hello, &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token function-variable function">apply</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> thisBinding<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// args为数组, 需要取0</span>\n    <span class="token keyword">return</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token function-variable function">construct</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> fproxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> \n  handler\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">fproxy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\n<span class="token keyword">new</span> <span class="token class-name">fproxy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">// {value: 2}</span>\nfproxy<span class="token punctuation">.</span>prototype <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span>\nfproxy<span class="token punctuation">.</span>foo <span class="token operator">===</span> <span class="token string">&quot;Hello, foo&quot;</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="proxy支持的所有操作"><a class="header-anchor" href="#proxy支持的所有操作" aria-hidden="true">#</a> proxy支持的所有操作</h3><ul><li><code>get(target,key,receiver)</code>：拦截对象属性的读取，比如：proxy.foo和proxy[&#39;foo&#39;]</li><li><code>set(target,key,receiver)</code>：拦截对象属性的设置，比如：proxy.foo=v或proxy[&#39;foo&#39;] = v，返回一个布尔值</li><li><code>has(target,key)</code>：拦截key in proxy的操作，返回一个布尔值</li><li><code>deleteProperty(target,key)</code>：拦截delete proxy[key]操作，返回一个布尔值</li><li><code>ownKeys(target)</code>：拦截Object.getOwnpropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环，返回一个数组，该方法返回目标对象所有自身的属性的属性名，而Object.keys()返回结果仅包括目标对象自身的可遍历属性</li><li><code>getOwnPropertyDescriptor(target,key)</code>：拦截Object.getOwnPropertyDescriptor(proxy,key)：返回属性的描述对象</li><li><code>defineProperty(target,key,desc)</code>：拦截Object.defineProperty(proxy,key,desc)、Object.defineProperties(proxy,desc)，返回一个布尔值</li><li><code>preventExtensions(target)</code>：拦截Object.preventExtensions(proxy)，返回一个布尔值</li><li><code>getPrototypeOf(target)</code>：拦截Object.getPrototypeOf(proxy)，返回一个对象</li><li><code>isExtensible(target)</code>：拦截Object.isExtensible(proxy)，返回一个布尔值</li><li><code>setPropotypeOf(target,proto)</code>：拦截Object.setPrototypeOf(proxy,proto)，返回一个布尔值，如果目标对象是函数，那么还有两种额外操作可以拦截</li><li><code>apply(target, object,args)</code>：拦截proxy实例作为函数调用的操作，比如：proxy(...args)、proxy.call(object,...args)、proxy.apply(...)</li><li><code>construct(target,args)</code>：拦截Proxy实例作为构造函数调用的操作，比如new proxy(...args)；</li></ul><h3 id="proxy实例的方法"><a class="header-anchor" href="#proxy实例的方法" aria-hidden="true">#</a> Proxy实例的方法</h3><ol><li><p><code>get()</code></p><p>get方法可以继承，不需要再递归代理了</p><div class="language-js"><pre><code><span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">,</span>receiver<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span>\nobj<span class="token punctuation">.</span>foo  <span class="token comment">// &#39;GET foo&#39;</span>\n</code></pre></div></li><li><p><code>set()</code>，拦截对象的设置，接受四个参数，依次为目标对象，属性名，属性值和proxy实例本身，最后一个参数可选</p><p>例子：不能设置大于200的age；</p><div class="language-js"><pre><code><span class="token keyword">let</span> validator <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>prop<span class="token punctuation">,</span>value<span class="token punctuation">,</span>receiver</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>prop <span class="token operator">===</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">&gt;</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RangeError</span><span class="token punctuation">(</span><span class="token string">&#39;The age seems invalid&#39;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> value\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> validator<span class="token punctuation">)</span>\n</code></pre></div></li><li><p><code>apply()</code></p><p>apply方法拦截函数的调用、<code>call</code>和<code>apply</code>的操作</p><p>apply接收三个参数，分别是目标对象，目标对象的上下文对象(this)和目标对象的参数数组</p><div class="language-js"><pre><code><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>例子1：</p><div class="language-js"><pre><code><span class="token keyword">var</span> twice <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">apply</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Reflect.apply执行了sum函数的结果并*2返回;</span>\n    <span class="token keyword">return</span> <span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> twice<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">proxy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">// 6</span>\n<span class="token function">proxy</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>   <span class="token comment">// 22</span>\n<span class="token function">proxy</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// 30</span>\n直接调用Reflect<span class="token punctuation">.</span>apply方法也会被拦截\n\n<span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p><code>has()</code></p><p>用来拦截hasProperty操作，判断对象是否具有某个属性时，典型的操作就是in运算符</p><p>例子：隐藏&#39;_&#39;开头的属性不被检测到</p><div class="language-js"><pre><code><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>\n    get<span class="token operator">:</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">,</span>receiver<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> key <span class="token keyword">in</span> target\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>foo<span class="token operator">:</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>_prop<span class="token operator">:</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>\n</code></pre></div></li><li><p><code>construct()</code></p><p>construct方法用于拦截new命令，接受三个参数，依次为目标对象，构造函数的参数对象，创造实例对象时，new命令作用的构造函数；</p><div class="language-js"><pre><code><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function">construct</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span>args<span class="token punctuation">,</span>newTarget</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">target</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>construct必须返回一个对象，否则会报错</p></li></ol><p>代理一个函数，支持点的调用方式</p><div class="language-js"><pre><code><span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> reciver<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>\n        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// property为获取的属性, msg为调用时传入的函数</span>\n            <span class="token function">_this</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> _this<span class="token punctuation">,</span> <span class="token punctuation">[</span>msg<span class="token punctuation">,</span> property<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> thisbing<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 这里处理逻辑</span>\n        <span class="token keyword">return</span> arg\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">&#39;111&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;111&#39;]</span>\nproxy<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&#39;111&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [111, &#39;success&#39;]</span>\n</code></pre></div><h2 id="二、reflect"><a class="header-anchor" href="#二、reflect" aria-hidden="true">#</a> 二、Reflect</h2><h3 id="概述"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>（1）Object上的明显属性语言内部的方法都放到了Reflect对象上，未来的新方法将只部署在Reflect对象上</p><p>（2）修改了某些Object方法的返回结果，让其变得合理，Object在无法定义属性时，会抛出一个错误，而Reflect只会返回false</p><div class="language-js"><pre><code><span class="token comment">// 老写法</span>\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// success</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// failure</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 新写法</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// success</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">// failure</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>（3）让Object操作都变成函数行为</p><div class="language-js"><pre><code><span class="token comment">// 老写法</span>\n<span class="token string">&#39;assign&#39;</span> <span class="token keyword">in</span> Object <span class="token comment">// true</span>\n<span class="token comment">// 新写法</span>\nReflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>Object<span class="token punctuation">,</span> <span class="token string">&#39;assign&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre></div><p>（4）Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法都能在Reflect对象上找到对应的方法，这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为,可以在Reflect上获取默认行为</p><div class="language-js"><pre><code><span class="token function">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> success <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;property &#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39; on &#39;</span> <span class="token operator">+</span> target <span class="token operator">+</span> <span class="token string">&#39; set to &#39;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> success<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>上面例子中，proxy方法拦截target对象的属性赋值行为，采用Reflect.set方法将值赋值给对象的属性，确保完成原有的行为，然后再部署额外的功能</p><h3 id="reflect的静态方法"><a class="header-anchor" href="#reflect的静态方法" aria-hidden="true">#</a> Reflect的静态方法</h3><ul><li><code>apply(target,thisArg,args)</code></li><li><code>construct(target,args)</code></li><li><code>get(target,name,receiver)</code></li><li><code>set(target,name,value,receiver)</code></li><li><code>defineProperty(target,name,desc)</code></li><li><code>deleteProperty(target,name)</code></li><li><code>has(target,name)</code></li><li><code>ownKeys(target)</code></li><li><code>isExtensible(target)</code></li><li><code>preventExtensions(target)</code></li><li><code>getOwnPropertyDescriptor(target,name)</code></li><li><code>getPrototypeOf(target)</code></li><li><code>setPrototypeOf(target,prototype)</code></li></ul><h3 id="get-target-name-receiver"><a class="header-anchor" href="#get-target-name-receiver" aria-hidden="true">#</a> get(target,name,receiver)</h3><p>查找target对象的name属性，如果没有该属性返回undefined</p><div class="language-js"><pre><code><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  bar<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token keyword">get</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\nReflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>\nReflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>\n</code></pre></div><p>如果name属性部署了读取函数(getter)，则读取函数this绑定到receiver</p><div class="language-js"><pre><code><span class="token keyword">var</span> myReceiver <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span> bar<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">}</span>\nReflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> myReceiver<span class="token punctuation">)</span>  <span class="token comment">// 8</span>\n</code></pre></div><h3 id="set-target-name-value-receiver"><a class="header-anchor" href="#set-target-name-value-receiver" aria-hidden="true">#</a> set(target,name,value,receiver)</h3><div class="language-js"><pre><code><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n    foo<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token keyword">set</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> value\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nReflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre></div><p>如果set传入receiver，则会触发Proxy.defineProperty拦截，如果不传入就不会拦截</p><div class="language-js"><pre><code><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;set&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> attribute</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;defineProperty&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// set</span>\n<span class="token comment">// defineProperty</span>\n</code></pre></div><h3 id="construct-target-args"><a class="header-anchor" href="#construct-target-args" aria-hidden="true">#</a> construct(target,args)</h3><p>Reflect.construct方法等同于new target(...args), 这提供了一种不使用new, 来调用构造函数的方法</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Greeting</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeting</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> instance <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>Greeting<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>如果第一个参数不是函数，则报错</p><h3 id="apply-func-thisarg-args"><a class="header-anchor" href="#apply-func-thisarg-args" aria-hidden="true">#</a> apply(func,thisArg,args)</h3><p>方法等同于<code>Function.prototype.apply.call(func,thisArg,args)</code>,用于绑定this对象后执行给定函数，</p><p>一般来说，如果要绑定一个函数的this对象，可以这样写<code>fn.apply(obj, args)</code>，但是如果函数定义了自己的apply方法，就只能写成<code>Function.prototype.apply.call(fn, obj, args)</code>，采用Reflect对象可以简 化这种操作。</p><div class="language-js"><pre><code><span class="token keyword">const</span> ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 旧写法</span>\n<span class="token keyword">const</span> youngest <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> ages<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> oldest <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> ages<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>youngest<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 新写法</span>\n<span class="token keyword">const</span> youngest <span class="token operator">=</span> <span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>min<span class="token punctuation">,</span> Math<span class="token punctuation">,</span> ages<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> oldest <span class="token operator">=</span> <span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">,</span> Math<span class="token punctuation">,</span> ages<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">,</span> youngest<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="ownkeys-target"><a class="header-anchor" href="#ownkeys-target" aria-hidden="true">#</a> ownKeys(target)</h3><p>方法用于返回对象的所有属性，等同于Object.getOwnPropertyNames与Object.getOwnPropertySymbols之和，可以返回Symbol</p><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;hhh&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span>\nReflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// [&#39;name&#39;,&#39;age&#39;]</span>\nReflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>Function<span class="token punctuation">)</span> <span class="token comment">// [&#39;length&#39;,&#39;name&#39;,&#39;prototype&#39;]</span>\nObject<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Function<span class="token punctuation">)</span> <span class="token comment">// []</span>\n</code></pre></div>',49);p.render=function(a,t,p,o,c,u){return n(),s("div",null,[e])};export default p;export{t as __pageData};
