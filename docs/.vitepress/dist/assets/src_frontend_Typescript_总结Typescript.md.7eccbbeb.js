import{o as n,c as s,d as a}from"./app.dc9dbd0c.js";const p='{"title":"总结typescript","description":"","frontmatter":{},"headers":[{"level":2,"title":"定义类型","slug":"定义类型"},{"level":2,"title":"类型断言","slug":"类型断言"},{"level":2,"title":"interface接口","slug":"interface接口"},{"level":2,"title":"函数类型","slug":"函数类型"},{"level":2,"title":"泛型","slug":"泛型"},{"level":2,"title":"类","slug":"类"},{"level":2,"title":"枚举","slug":"枚举"},{"level":2,"title":"高级类型","slug":"高级类型"},{"level":2,"title":"keyof  | in | typeof","slug":"keyof-in-typeof"}],"relativePath":"src\\\\frontend\\\\Typescript\\\\总结Typescript.md","lastUpdated":1612089669879}',t={},o=a('<h1 id="总结typescript"><a class="header-anchor" href="#总结typescript" aria-hidden="true">#</a> 总结typescript</h1><h2 id="定义类型"><a class="header-anchor" href="#定义类型" aria-hidden="true">#</a> 定义类型</h2><div class="language-ts"><pre><code><span class="token keyword">let</span> bool<span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token keyword">let</span> num<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">let</span> str<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;str&#39;</span>\n<span class="token keyword">let</span> u<span class="token operator">:</span><span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 即是值也是类型</span>\n\n<span class="token comment">// 数组类型</span>\n<span class="token keyword">let</span> arr1<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr2<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr3<span class="token operator">:</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr4<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;hny&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token comment">// 元组类型</span>\n<span class="token keyword">let</span> tulp<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token punctuation">,</span><span class="token builtin">boolean</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;fd&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span>\n\n<span class="token comment">//any类型</span>\n<span class="token keyword">let</span> arr<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n\n<span class="token comment">// void 空类型 函数无返回值写void</span>\n<span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// object类型</span>\n<span class="token keyword">const</span> getObj <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token operator">:</span>object<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// unknow类型 顶级类型</span>\n<span class="token keyword">let</span> value<span class="token operator">:</span><span class="token builtin">unknown</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="类型断言"><a class="header-anchor" href="#类型断言" aria-hidden="true">#</a> 类型断言</h2><div class="language-js"><pre><code><span class="token comment">// 第一种：&lt;string&gt;target.length</span>\n<span class="token comment">// 第二种：(target as string).length</span>\n<span class="token comment">// window：(window as any).foo = 1</span>\n</code></pre></div><h2 id="interface接口"><a class="header-anchor" href="#interface接口" aria-hidden="true">#</a> interface接口</h2><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Vegetable</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token keyword">readonly</span> <span class="token keyword">type</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>\n    <span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 接口继承 继承的接口需要包含所有属性;</span>\n<span class="token keyword">interface</span> <span class="token class-name">Tomato</span> <span class="token keyword">extends</span> <span class="token class-name">Vegetable</span> <span class="token punctuation">{</span>\n    radius<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="函数类型"><a class="header-anchor" href="#函数类型" aria-hidden="true">#</a> 函数类型</h2><div class="language-ts"><pre><code><span class="token keyword">let</span> <span class="token function-variable function">add</span><span class="token operator">:</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> arg2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> arg1 <span class="token operator">+</span> arg2\n<span class="token punctuation">}</span>\n<span class="token comment">// 类型别名</span>\n<span class="token keyword">type</span> <span class="token class-name">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> city <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> age<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arg1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 函数重载</span>\n<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="泛型"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><div class="language-ts"><pre><code><span class="token keyword">const</span> getArray <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">getArr<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>arg1<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> times<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\tarray<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 泛型约束</span>\n<span class="token keyword">interface</span> <span class="token class-name">ValueL</span> <span class="token punctuation">{</span>\n    a<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>\n    b<span class="token operator">:</span> <span class="token string">&#39;b&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> getArr <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>object<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 泛型默认值</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createArr</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div><h2 id="类"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h2><div class="language-ts"><pre><code><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>\n    <span class="token keyword">public</span> <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> age2<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">18</span>\n    <span class="token keyword">private</span> _info<span class="token operator">:</span> <span class="token builtin">string</span>\n    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token keyword">public</span> city<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age\n        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Parent<span class="token punctuation">.</span>age\n    <span class="token punctuation">}</span>\n    <span class="token keyword">get</span> <span class="token function">infoStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// get有返回值, set不能有;</span>\n    <span class="token keyword">set</span> <span class="token function">infoStr</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_info <span class="token operator">=</span> val<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 抽象类 abstract</span>\n<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>\n    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>\n    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 需要实现抽象方法;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 泛型使用类类型</span>\n<span class="token keyword">const</span> create <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="枚举"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h2><div class="language-ts"><pre><code><span class="token keyword">enum</span> Result <span class="token punctuation">{</span>\n    Faild <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    success <span class="token operator">=</span> <span class="token string">&#39;success&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Status</span> <span class="token punctuation">{</span>\n    <span class="token keyword">type</span><span class="token operator">:</span> Result<span class="token punctuation">.</span>success\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> status<span class="token operator">:</span> Status <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token keyword">type</span><span class="token operator">:</span> Result<span class="token punctuation">.</span>success\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="高级类型"><a class="header-anchor" href="#高级类型" aria-hidden="true">#</a> 高级类型</h2><div class="language-ts"><pre><code><span class="token comment">// 交叉类型</span>\n<span class="token keyword">const</span> mergeFunc <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg1<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> arg2<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 类型保护</span>\n<span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> value <span class="token keyword">is</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 索引访问类型</span>\n<span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> Info<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token comment">// 返回string;</span>\n\n<span class="token comment">// 条件类型</span>\n<span class="token keyword">type</span> <span class="token class-name">Type1<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token builtin">string</span> <span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="keyof-in-typeof"><a class="header-anchor" href="#keyof-in-typeof" aria-hidden="true">#</a> keyof | in | typeof</h2><div class="language-ts"><pre><code><span class="token comment">// keyof 将接口的属性名组合成联合类型</span>\n<span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    size<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> info<span class="token operator">:</span> <span class="token keyword">keyof</span> Info<span class="token punctuation">;</span> <span class="token comment">// (&#39;name&#39; | &#39;age&#39; | &#39;size&#39;) 类型</span>\n<span class="token keyword">let</span> info<span class="token operator">:</span> Info<span class="token punctuation">[</span><span class="token keyword">keyof</span> Info<span class="token punctuation">]</span> <span class="token comment">// (string | number) 联合类型;会去除undefined类型</span>\n\n<span class="token comment">// in 循环类型T;</span>\n<span class="token keyword">type</span> <span class="token class-name">ReadInfo<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// typeof  访问一组值的类型</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;hhh&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">Obj</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span> <span class="token comment">// {name: string, age: number}</span>\n\n</code></pre></div><p>常用的映射类型：<code>Readonly</code>、<code>Partial</code>、<code>Pick</code>、<code>Record</code>、<code>ReturnType</code></p>',20);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
