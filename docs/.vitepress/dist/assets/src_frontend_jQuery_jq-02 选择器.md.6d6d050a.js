import{o as n,c as a,d as s}from"./app.b11e2761.js";const t='{"title":"jq-02 选择器","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、选择器","slug":"一、选择器"},{"level":3,"title":"css选择器","slug":"css选择器"},{"level":3,"title":"基本筛选选择器","slug":"基本筛选选择器"},{"level":3,"title":"内容选择器","slug":"内容选择器"},{"level":3,"title":"隐藏看见","slug":"隐藏看见"},{"level":3,"title":"属性选择器","slug":"属性选择器"},{"level":3,"title":"子元素选择器","slug":"子元素选择器"},{"level":3,"title":"表单选择器","slug":"表单选择器"},{"level":3,"title":"表单对象属性","slug":"表单对象属性"},{"level":2,"title":"二、迭代","slug":"二、迭代"},{"level":3,"title":"$.each","slug":"each"},{"level":3,"title":"$.map","slug":"map"},{"level":2,"title":"三、extend","slug":"三、extend"},{"level":3,"title":"扩展","slug":"扩展"},{"level":3,"title":"深拷贝","slug":"深拷贝"},{"level":3,"title":"浅拷贝(原生方法)","slug":"浅拷贝-原生方法"},{"level":2,"title":"四、方法","slug":"四、方法"},{"level":2,"title":"高频面试题","slug":"高频面试题"}],"relativePath":"src\\\\frontend\\\\jQuery\\\\jq-02 选择器.md","lastUpdated":1612089669942}',o={},p=s('<h1 id="jq-02-选择器"><a class="header-anchor" href="#jq-02-选择器" aria-hidden="true">#</a> jq-02 选择器</h1><h2 id="一、选择器"><a class="header-anchor" href="#一、选择器" aria-hidden="true">#</a> 一、选择器</h2><p>选择器的实现比较复杂，消耗性能比较大，建议相同的选择器进行变量保存操作，避免重复使用选择器；</p><h3 id="css选择器"><a class="header-anchor" href="#css选择器" aria-hidden="true">#</a> css选择器</h3><p>可以使用所有的样式选择器；</p><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>#id</code></td><td>获取id名</td></tr><tr><td><code>.class</code></td><td>获取class类名</td></tr><tr><td><code>div</code></td><td>获取标签名</td></tr><tr><td><code>div,p,li</code></td><td>群组选择器</td></tr><tr><td><code>div.red</code></td><td>获取class为red的div标签</td></tr><tr><td><code>div&gt;span</code></td><td>获取div下的直接子元素span；</td></tr><tr><td><code>div span</code></td><td>div下的所有子元素span标签；</td></tr><tr><td><code>div~span</code></td><td>选择下面所有的；</td></tr></tbody></table><h3 id="基本筛选选择器"><a class="header-anchor" href="#基本筛选选择器" aria-hidden="true">#</a> 基本筛选选择器</h3><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>:first</code></td><td>第一个</td></tr><tr><td><code>:last</code></td><td>最后一个</td></tr><tr><td><code>:eq(index)</code></td><td>指定第一个，下标从0开始；</td></tr><tr><td><code>:not()</code></td><td>除了小括号的标签；</td></tr><tr><td><code>:odd</code></td><td>下标为奇数的标签，下标是从0开始的，所以选择的是偶数标签；</td></tr><tr><td><code>:even</code></td><td>下标为偶数的标签</td></tr><tr><td><code>:gt(1)</code></td><td>下标大于1的元素</td></tr><tr><td><code>:lt(1)</code></td><td>下标小于1的元素；</td></tr><tr><td><code>:header</code></td><td>所有h标签；</td></tr><tr><td><code>:root</code></td><td>选中html标签；</td></tr><tr><td><code>:animated</code></td><td>匹配所有正在执行动画效果的元素；</td></tr></tbody></table><p><code>$(&quot;div:not(:animated)&quot;).animate({&quot;width&quot;:&quot;+=200&quot;})</code> //给没有在动画的div，加长</p><h3 id="内容选择器"><a class="header-anchor" href="#内容选择器" aria-hidden="true">#</a> 内容选择器</h3><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>:contains(我)</code></td><td>选择内容有我的标签</td></tr><tr><td><code>:empty</code></td><td>选择内容为空的标签，有空格或标签都不为空；</td></tr><tr><td><code>:parent</code></td><td>选择有内容的标签；</td></tr><tr><td><code>:has(span)</code></td><td>选择有span标签的标签；</td></tr></tbody></table><h3 id="隐藏看见"><a class="header-anchor" href="#隐藏看见" aria-hidden="true">#</a> 隐藏看见</h3><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>:hidden</code></td><td>获取看不见的标签(在页面中不显示的标签) type=&quot;hidden&quot; 和display:none；</td></tr><tr><td><code>:visible</code></td><td>获取可以看见的标签，页面中显示的</td></tr></tbody></table><h3 id="属性选择器"><a class="header-anchor" href="#属性选择器" aria-hidden="true">#</a> 属性选择器</h3><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>div[class]</code></td><td>有class属性的</td></tr><tr><td><code>div[class=box]</code></td><td>div的class属性值为box的；</td></tr><tr><td><code>div[class^=box]</code></td><td>以box开头的</td></tr><tr><td><code>div[class$=box]</code></td><td>以box结尾的</td></tr><tr><td><code>div[class*=box]</code></td><td>包含box的；</td></tr><tr><td><code>div[class][title]</code></td><td>有class属性并且有title属性的；</td></tr></tbody></table><h3 id="子元素选择器"><a class="header-anchor" href="#子元素选择器" aria-hidden="true">#</a> 子元素选择器</h3><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>ul li:first-child</code></td><td>选择所有父元素中第一个li first的区别：第一个父元素下所有li中的第一个li</td></tr><tr><td><code>ul li:last-child</code></td><td>选择所有ul下的最后一个li；</td></tr><tr><td><code>:nth-child()</code></td><td>选择指定的第几个标签，从1开始</td></tr><tr><td><code>:first-of-type</code></td><td>选择第一次出现的；</td></tr><tr><td><code>:last-of-type</code></td><td>最后一次出现的；</td></tr><tr><td><code>:nth-of-type()</code></td><td>指定的第几个标签；</td></tr></tbody></table><p><code>child</code>：是从第一个孩子开始找；</p><p><code>of-type</code>：是从第一次出现的孩子找的；</p><h3 id="表单选择器"><a class="header-anchor" href="#表单选择器" aria-hidden="true">#</a> 表单选择器</h3><p><code>:input</code> 选中所有表单标签，包括select、textarea；</p><p>选中具体某个input标签可以冒号type类型，select直接使用标签选择器；</p><p>例：</p><p><code>:text</code> 选中单文本框；</p><p><code>.attr(&quot;checked&quot;,true)</code>；设置复选框被选中状态</p><h3 id="表单对象属性"><a class="header-anchor" href="#表单对象属性" aria-hidden="true">#</a> 表单对象属性</h3><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>:enabled</code></td><td>选中所有可用的；</td></tr><tr><td><code>:disabled</code></td><td>选中所有禁用的；</td></tr><tr><td><code>:checked</code></td><td>选中的；</td></tr><tr><td><code>:selected</code></td><td>下拉框被选中的；</td></tr></tbody></table><h2 id="二、迭代"><a class="header-anchor" href="#二、迭代" aria-hidden="true">#</a> 二、迭代</h2><h3 id="each"><a class="header-anchor" href="#each" aria-hidden="true">#</a> $.each</h3><div class="language-js"><pre><code>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// or</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 这里的item是每个元素, 使用jquery需要再次$(item)</span>\n    <span class="token comment">// 也可以$(this), this指向当前这个item</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="map"><a class="header-anchor" href="#map" aria-hidden="true">#</a> $.map</h3><div class="language-js"><pre><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\n$<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>当map操作数组返回null和undefined时，不会保存在新的数组中；</p><p>$.map不能直接<code>$(b).map(function(){})</code>;</p><div class="language-js"><pre><code><span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> aa <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">null</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> a\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//[1,2,3]，4满足条件，返回空；</span>\n</code></pre></div><p>这里的aa是dom元素的，如果$(ary).map调用的话直接将类型转换jquery元素了；低版本浏览器会发生不兼容；标准调用方法是<code>$.map(ary,function(){})</code>;</p><h2 id="三、extend"><a class="header-anchor" href="#三、extend" aria-hidden="true">#</a> 三、extend</h2><h3 id="扩展"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h3><p><code>$.extend(obj,obj1,obj2)</code>；将obj1和obj2扩展到obj中，一般obj是一个空对象{}；</p><div class="language-js"><pre><code><span class="token keyword">var</span> obj3 <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span>\n</code></pre></div><h3 id="深拷贝"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h3><blockquote><p>复制地址和数据</p></blockquote><p>原理：根据地址找到内容，并复制内容在堆中重新存储，返回新的地址；新的值修改的地址不影响旧的值；</p><div class="language-js"><pre><code><span class="token keyword">var</span> obj2 <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj3<span class="token punctuation">)</span>\n</code></pre></div><p>默认是false(浅拷贝)；true深拷贝；如果不用true相当于声明了两个变量(加载慢)；如果用true就是拷贝；</p><div class="language-js"><pre><code><span class="token keyword">var</span> obj4 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj6 <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj4<span class="token punctuation">)</span><span class="token punctuation">;</span>\nobj6<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;ls&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//ls</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//zs</span>\n</code></pre></div><h3 id="浅拷贝-原生方法"><a class="header-anchor" href="#浅拷贝-原生方法" aria-hidden="true">#</a> 浅拷贝(原生方法)</h3><blockquote><p>只复制地址，不复制数据；修改新变量的值，旧变量的值也一起修改了；</p></blockquote><div class="language-js"><pre><code><span class="token keyword">var</span> obj4<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj5<span class="token operator">=</span>obj4<span class="token punctuation">;</span>\nobj5<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj5<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//ls</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj4<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//ls</span>\n</code></pre></div><p>原理：复制了obj4的地址，数据没有复制，所以修改了内容，obj4的地址也是那个内容，所以obj4就是obj5的内容；</p><h2 id="四、方法"><a class="header-anchor" href="#四、方法" aria-hidden="true">#</a> 四、方法</h2><p>所有事件的调用：<code>$(&quot;button&quot;).click(function(){})</code>;</p><p>直接去掉on；直接括号函数，</p><p>.index()；元素的下标；</p><p>jquery选项卡</p><div class="language-js"><pre><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.box div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">&quot;active&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">&quot;on&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//链式调用，可以一直写点，</span>\n<span class="token comment">//隐式循环，不用循环，隐式调用循环；</span>\n</code></pre></div><h2 id="高频面试题"><a class="header-anchor" href="#高频面试题" aria-hidden="true">#</a> 高频面试题</h2><p>● $(document).ready() 方法和 window.onload 有什么区别？</p><p>● jQuery 的属性拷贝 (extend) 的实现原理是什么，如何实现深拷贝？</p>',59);o.render=function(s,t,o,e,c,d){return n(),a("div",null,[p])};export default o;export{t as __pageData};
