import{o as e,c as n,d as a}from"./app.dc9dbd0c.js";const s='{"title":"js-09 DOM","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、DOM","slug":"一、dom"},{"level":2,"title":"二、获取子节点：","slug":"二、获取子节点："},{"level":2,"title":"三、节点类型：","slug":"三、节点类型："},{"level":2,"title":"四、元素的父元素；","slug":"四、元素的父元素；"},{"level":2,"title":"五、其他节点(了解)；","slug":"五、其他节点-了解-；"},{"level":2,"title":"六、在IE8及以下中兼容问题；","slug":"六、在ie8及以下中兼容问题；"},{"level":2,"title":"七、属性操作(常用)；","slug":"七、属性操作-常用-；"},{"level":2,"title":"八、类名操作","slug":"八、类名操作"},{"level":2,"title":"九、创建添加","slug":"九、创建添加"},{"level":2,"title":"十、删除替换克隆","slug":"十、删除替换克隆"},{"level":2,"title":"十一、insertAdjacentHTML","slug":"十一、insertadjacenthtml"},{"level":2,"title":"十二、元素的其他获取方式；","slug":"十二、元素的其他获取方式；"},{"level":2,"title":"十三、表格的获取方式；","slug":"十三、表格的获取方式；"},{"level":2,"title":"十四、表单的获取方式","slug":"十四、表单的获取方式"},{"level":3,"title":"表单获取属性：","slug":"表单获取属性："},{"level":3,"title":"表单事件：","slug":"表单事件："},{"level":3,"title":"表单方法：","slug":"表单方法："},{"level":3,"title":"焦点事件","slug":"焦点事件"},{"level":2,"title":"高频面试题","slug":"高频面试题"}],"relativePath":"src/frontend/Javascript/js-09 DOM.md","lastUpdated":1612089669827}',o={},p=a('<h1 id="js-09-dom"><a class="header-anchor" href="#js-09-dom" aria-hidden="true">#</a> js-09 DOM</h1><h2 id="一、dom"><a class="header-anchor" href="#一、dom" aria-hidden="true">#</a> 一、DOM</h2><p><code>DOM (document object model)</code> 文档对象模型，是W3C组织推荐的处理可扩展标记语言的标准编程接口；<code>node</code>（节点）；</p><p>元素节点（标签） 文本节点（换行或者文字） 注释节点（注释）</p><h2 id="二、获取子节点："><a class="header-anchor" href="#二、获取子节点：" aria-hidden="true">#</a> 二、获取子节点：</h2><ol><li><code>父元素.children</code>；(常用)（非标准属性）获取只有元素节点；类数组</li><li><code>父元素.childNodes</code>；（标准属性）所有子节点，包括文本、空格、标签、注释；</li></ol><p>类数组：有长度，可以通过下标获取元素，但是不能使用数组的方法；</p><h2 id="三、节点类型："><a class="header-anchor" href="#三、节点类型：" aria-hidden="true">#</a> 三、节点类型：</h2><p><code>nodeType</code> <code>nodeName</code> <code>nodeValue</code>；</p><ol><li><p><code>nodeType</code>：返回1-12的数字，分别表示不同的节点；</p><p>1：标签节点；2：属性节点；3：文本节点； 8：注释节点； 9：文档节点；</p></li><li><p><code>nodeName</code>：返回节点的名字；</p><p>文本：#text；注释：#comment；标签：大写的标签名；</p></li><li><p><code>nodeValue</code>：认为只有文本才有内容，元素的节点为空null；获取的标签的文本节点使用innerHTML修改会将标签也替换掉，这个可以只修改文本内容；</p><p><code>li.firstChild.nodeValue</code>；才能获取到li里面的文本内容；</p><p><code>nodeValue = &quot;新内容&quot;</code>； 可以设置新内容；</p></li></ol><h2 id="四、元素的父元素；"><a class="header-anchor" href="#四、元素的父元素；" aria-hidden="true">#</a> 四、元素的父元素；</h2><ol><li><code>parentNode</code>；直接父元素，<code>parentNode.parentNode</code>；父元素的父元素；（常用）</li><li><code>offsetParent</code>；返回离元素最近的有定位的父级，如果没有定位的父级，则返回body；</li></ol><h2 id="五、其他节点-了解-；"><a class="header-anchor" href="#五、其他节点-了解-；" aria-hidden="true">#</a> 五、其他节点(了解)；</h2><p>父元素的子节点；</p><ol><li><code>firstChild</code>；父元素的第一个子节点；</li><li><code>firstElementChild</code>；父元素的第一个子元素节点；</li><li><code>lastChild</code>；父元素的最后一个子节点；</li><li><code>lastElementChild</code>；父元素的最后一个子元素节点； 以上不常用，推荐做法：</li></ol><p>第一个：<code>li[0]</code>，</p><p>最后一个：<code>li[li.length-1]</code>;</p><p>兄弟元素节点；</p><ol start="5"><li><code>previousSibling</code>；上一个兄弟子节点；（包括文本注释）</li><li><code>previousElementSibling</code>；上一个兄弟元素节点；</li><li><code>nextSibling</code>；下一个兄弟子节点；</li><li><code>nextElementSibling</code>；下一个兄弟元素节点；</li></ol><p>拓展：带Element的 标准浏览器支持的，返回元素节点，不带的是ie8及以下支持的，可能返回文本节点；</p><h2 id="六、在ie8及以下中兼容问题；"><a class="header-anchor" href="#六、在ie8及以下中兼容问题；" aria-hidden="true">#</a> 六、在IE8及以下中兼容问题；</h2><ol><li><p><code>children</code>：还可以获取到注释；</p></li><li><p><code>childNodes</code>：不能获取到换行；</p></li><li><p><code>firstChild</code>：不能获取到换行；</p></li><li><p><code>firstElementChild</code>：带Element的不能识别，返回值undefined；</p><pre><code> 解决兼容办法：\n</code></pre></li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> first <span class="token operator">=</span> ul<span class="token punctuation">.</span>firstElementchild <span class="token operator">?</span> ul<span class="token punctuation">.</span>firstChild <span class="token operator">:</span> firstElementChild<span class="token punctuation">;</span>\n</code></pre></div><h2 id="七、属性操作-常用-；"><a class="header-anchor" href="#七、属性操作-常用-；" aria-hidden="true">#</a> 七、属性操作(常用)；</h2><ol><li><p>获取：<code>getAttribute(属性名)</code>；属性名用在ie里面需要写className；</p></li><li><p>设置：<code>setAttribute(属性名,属性值)</code>；直接是修改hdml标签里面的；</p></li><li><p>删除：<code>removeAttribute(属性名)</code>；直接删除属性；括号里面需要加引号；</p></li><li><p>检查：<code>hasAttribute(属性名)</code>，检查是否有指定属性名</p></li></ol><p>特点：可以操作元素原生的属性，也可以操作自定义属性，并且在html上可见没有兼容性问题；</p><p>以下不能操作自定义属性</p><p>点的形式：</p><p>box.title = &quot;abc&quot;;</p><h2 id="八、类名操作"><a class="header-anchor" href="#八、类名操作" aria-hidden="true">#</a> 八、类名操作</h2><ol><li><code>元素.classList</code>；兼容ie11+；</li><li>可用属性：length 返回类名的长度；</li><li>方法：</li></ol><p>（1）<code>add(class1,class2...)</code> 添加一个或多个类名，如果存在则不会添加</p><p>（2）<code>contains(class)</code> 返回布尔值，判断元素是否有该类名；</p><p>（3）<code>item(index)</code> 返回元素索引值对应的类名；</p><p>（4）<code>remove(class1,class2...)</code> 移除类名；</p><p>（5）<code>toggle(class,[true|false])</code>； 切换类名，第二个参数可选，强制移除false或添加true；</p><h2 id="九、创建添加"><a class="header-anchor" href="#九、创建添加" aria-hidden="true">#</a> 九、创建添加</h2><ol><li><p>创建元素节点：<code>document.createElement(&quot;新标签&quot;)</code>；创建的想要放进去，需要使用添加</p></li><li><p>创建文本节点：<code>document.createTextNode(&quot;文本内容&quot;)</code>；不常用,使用innerHTML；</p><p>获取节点内容：元素.textContent</p><p>设置节点内容：元素.textContent = &#39;&#39;；</p></li><li><p>添加文本节点：<code>appendChild(创建的标签)</code>；在结束标签之前添加；只能放到一个标签里，不能重复放；</p><p>可以直接放到body里面： 获取body标签：body = document.body；</p></li><li><p>添加到指定元素前面：<code>父元素.insertBefore（new,old）</code>；new新标签，old指定标签；</p><p>在IE9及以上，如果第二个参数不存在，则以appendChild添加，在IE8及以下，则报错；</p></li></ol><div class="language-js"><pre><code><span class="token comment">// 解决兼容问题：</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    ul<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>；\n</code></pre></div><p>js原生是没有insertAfter的，需要手动实现</p><div class="language-js"><pre><code><span class="token comment">// 插入到节点之后</span>\n<span class="token keyword">function</span> <span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token parameter">newDom<span class="token punctuation">,</span> oldDom</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> parentDom <span class="token operator">=</span> oldDom<span class="token punctuation">.</span>parentNode\n  <span class="token comment">// 判断是否是最后一个节点</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>parentDom<span class="token punctuation">.</span>lastChild <span class="token operator">===</span> oldDom<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    parentDom<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newDom<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  \tparentDom<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newDom<span class="token punctuation">,</span> oldDom<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span>    \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>技巧：</p><p>.link可以快速创建a标签</p><h2 id="十、删除替换克隆"><a class="header-anchor" href="#十、删除替换克隆" aria-hidden="true">#</a> 十、删除替换克隆</h2><ol><li><p>删除：<code>remove()</code>；谁调用的就删除谁，ie8及以下不兼容；</p><pre><code> `父元素.removeChild(子元素)`；将子元素从父元素中删除；\n</code></pre></li><li><p>替换：<code>父元素.replaceChild(新标签，旧标签)</code>；</p></li><li><p>克隆：<code>元素.cloneNode()</code>；true，内容标签一起克隆，false,克隆标签；</p></li><li><p>包含：<code>父元素.contains(子元素)</code></p></li></ol><h2 id="十一、insertadjacenthtml"><a class="header-anchor" href="#十一、insertadjacenthtml" aria-hidden="true">#</a> 十一、insertAdjacentHTML</h2><ol><li><p><code>element.insertAdjacentHTML(position, text)</code>，将text解析为html或xml，并将结果节点插入到DOM树中的指定位置，该方法比直接操作innerHTML操作更快</p></li><li><p>position是相对于元素的位置，必须是以下字符串之一</p><ul><li><p><code>beforebegin</code>：元素自身的前面。</p></li><li><p><code>afterbegin</code>：插入元素内部的第一个子节点之前。</p></li><li><p><code>beforeend</code>：插入元素内部的最后一个子节点之后。</p></li><li><p><code>afterend</code>：元素自身的后面。</p></li></ul></li></ol><div class="language-js"><pre><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> beforebegin <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> afterbegin <span class="token operator">--</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Hello World<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> beforeend <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> afterend <span class="token operator">--</span><span class="token operator">&gt;</span>\n</code></pre></div><p>示例：</p><div class="language-js"><pre><code><span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlist<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&#39;afterbegin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;li id=&quot;first-item&quot;&gt;First&lt;/li&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="十二、元素的其他获取方式；"><a class="header-anchor" href="#十二、元素的其他获取方式；" aria-hidden="true">#</a> 十二、元素的其他获取方式；</h2><ol><li><p><code>querySelector(css选择器)</code>；选择第一个直接是元素；</p></li><li><p><code>querySelectorAll(css选择器)</code>；选择所有的，结果是类数组</p></li><li><p><code>元素.closest(css选择器)</code>，返回当前节点最近匹配选择符的父元素，如果选择到自己相同的元素，则返回自己</p></li></ol><h2 id="十三、表格的获取方式；"><a class="header-anchor" href="#十三、表格的获取方式；" aria-hidden="true">#</a> 十三、表格的获取方式；</h2><ol><li><p>获取表头：<code>table.tHead</code>；</p></li><li><p>获取表尾：<code>table.tFoot</code>；</p></li><li><p>获取主体：<code>table.tBodies[0]</code>；类数组，需要加下标；</p></li><li><p>获取行：<code>table.rows</code>；获取table下所有的tr；</p><p><code>table.tBodies</code>；获取主体下的所有的tr；</p></li><li><p>获取单元格：<code>table.rows[0].cells</code>；需要通过行来获取td；</p></li></ol><h2 id="十四、表单的获取方式"><a class="header-anchor" href="#十四、表单的获取方式" aria-hidden="true">#</a> 十四、表单的获取方式</h2><h3 id="表单获取属性："><a class="header-anchor" href="#表单获取属性：" aria-hidden="true">#</a> 表单获取属性：</h3><p>通过form.name名 直接获取到某个标签；</p><h3 id="表单事件："><a class="header-anchor" href="#表单事件：" aria-hidden="true">#</a> 表单事件：</h3><p><code>form.onsubmit</code>；点击提交按钮事件时触发；</p><p><code>form.onreset</code>；表单重置事件；</p><p><code>form.user.onfocus</code>；输入框获得焦点时触发；</p><p><code>form.user.onblur</code>；输入框失去焦点时触发；提示输入完验证是否合格；</p><p><code>form.user.onchange</code>；当按下回车或失焦时触发，且内容与上次按下回车或失焦不同；</p><p><code>form.user.oninput</code>： 用户输入时触发；</p><h3 id="表单方法："><a class="header-anchor" href="#表单方法：" aria-hidden="true">#</a> 表单方法：</h3><p><code>return false</code>；阻止表单提交，判断是否有内容，没有则阻止提交；</p><p><code>form.submit()</code>；调用提交方法；常用于button；</p><p><code>form.reset()</code>；调用重置方法；</p><p><code>form.user.focus()</code>；输入框获得焦点；</p><p><code>form.user.blur()</code>；输入框失去焦点；</p><p><code>form.user.select()</code>；直接选中输入框的内容并获得焦点；</p><p>当输入框改动时，执行这个函数，每按下一次都会执行；</p><p><code>input.oninput = function(){}</code>，比onkeyup先触发；</p><h3 id="焦点事件"><a class="header-anchor" href="#焦点事件" aria-hidden="true">#</a> 焦点事件</h3><p><code>focus</code>：获得焦点，不支持冒泡；</p><p><code>blur</code>：失去焦点，不支持冒泡</p><p><code>focusin</code>：获得焦点，支持冒泡；</p><p><code>focusout</code>：失去焦点，支持冒泡；</p><p><code>input.focus()</code> 会自动滚动到获取焦点的地方，如果不希望滚动到获取焦点的地方，可以使用以下的代码</p><div class="language-js"><pre><code><span class="token comment">// 下面代码ie不兼容</span>\nipt<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    preventScroll<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="高频面试题"><a class="header-anchor" href="#高频面试题" aria-hidden="true">#</a> 高频面试题</h2><p>● DOM 怎样添加、移除、移动、复制、创建和查找节点</p>',82);o.render=function(a,s,o,t,l,c){return e(),n("div",null,[p])};export default o;export{s as __pageData};
