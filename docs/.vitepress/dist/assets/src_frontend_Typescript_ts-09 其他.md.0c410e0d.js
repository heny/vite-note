import{o as n,c as s,d as a}from"./app.dc9dbd0c.js";const t='{"title":"ts-09 关键词、编译上下文","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、typescript常用关键词","slug":"一、typescript常用关键词"},{"level":3,"title":"typeof","slug":"typeof"},{"level":3,"title":"const","slug":"const"},{"level":3,"title":"keyof","slug":"keyof"},{"level":3,"title":"in","slug":"in"},{"level":3,"title":"infer","slug":"infer"},{"level":3,"title":"extends","slug":"extends"},{"level":2,"title":"二、编译上下文","slug":"二、编译上下文"},{"level":3,"title":"tsconfig.json的作用","slug":"tsconfig-json的作用"},{"level":3,"title":"tsconfig.json重要字段","slug":"tsconfig-json重要字段"},{"level":3,"title":"compilerOptions选项","slug":"compileroptions选项"}],"relativePath":"src\\\\frontend\\\\Typescript\\\\ts-09 其他.md","lastUpdated":1612089669877}',p={},o=a('<h1 id="ts-09-关键词、编译上下文"><a class="header-anchor" href="#ts-09-关键词、编译上下文" aria-hidden="true">#</a> ts-09 关键词、编译上下文</h1><h2 id="一、typescript常用关键词"><a class="header-anchor" href="#一、typescript常用关键词" aria-hidden="true">#</a> 一、typescript常用关键词</h2><h3 id="typeof"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h3><p><code>typeof</code>操作符可以用来获取一个变量声明或对象的类型</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> sem<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;hhh&#39;</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">20</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 声明一个别名直接指向sem对象，最终Sem的类型同sem相同，也是Person</span>\n<span class="token keyword">type</span> <span class="token class-name">Sem</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> sem<span class="token punctuation">;</span>\n\n<span class="token comment">// 函数</span>\n<span class="token keyword">function</span> <span class="token function">toArray</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> toArray<span class="token punctuation">;</span>\n</code></pre></div><p>对于对象执行相同的作用</p><div class="language-js"><pre><code><span class="token keyword">const</span> kakuqo <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&quot;kakuqo&quot;</span><span class="token punctuation">,</span>\n    address<span class="token operator">:</span> <span class="token punctuation">{</span>\n      province<span class="token operator">:</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\ntype Kakuqo <span class="token operator">=</span> <span class="token keyword">typeof</span> kakuqo<span class="token punctuation">;</span>\n<span class="token comment">/*\n type Kakuqo = {\n    name: string;\n    address: {\n        city: string;\n    };\n}\n*/</span>\n</code></pre></div><h3 id="const"><a class="header-anchor" href="#const" aria-hidden="true">#</a> const</h3><p>const是3.4引入的一种新的字面量构造方式，也称为const断言，有以下特性</p><ul><li>表达式中的任何字面量类型都不应该被扩展</li><li>对象字面量的属性，将使用<code>readonly</code>修饰；</li><li>数组字面量将变成<code>readonly</code>元组</li></ul><div class="language-ts"><pre><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> x<span class="token punctuation">;</span> <span class="token comment">// type X = &#39;hello&#39;</span>\n\n<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> y<span class="token punctuation">;</span> <span class="token comment">// type Y = readonly [10, 20]</span>\n\n<span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token punctuation">{</span>text<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">Z</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> z<span class="token punctuation">;</span> <span class="token comment">// let z: {readonly text: &#39;hello&#39;}</span>\n</code></pre></div><p>通过<code>typeof</code>操作符获取元组中元素值的联合类型</p><div class="language-js"><pre><code>type Data <span class="token operator">=</span> <span class="token keyword">typeof</span> y<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div><p>获取引用类型的数组；</p><div class="language-ts"><pre><code><span class="token keyword">const</span> locales <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>locale<span class="token operator">:</span> <span class="token string">&#39;zh-CN&#39;</span><span class="token punctuation">,</span>language<span class="token operator">:</span> <span class="token string">&#39;中文&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>locale<span class="token operator">:</span> <span class="token string">&#39;en&#39;</span><span class="token punctuation">,</span> language<span class="token operator">:</span> <span class="token string">&#39;Englist&#39;</span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">Locale</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> locales<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;locale&#39;</span><span class="token punctuation">]</span> <span class="token comment">// type Locale = &#39;zh-CN&#39; | &#39;en</span>\n</code></pre></div><h3 id="keyof"><a class="header-anchor" href="#keyof" aria-hidden="true">#</a> keyof</h3><p><code>keyof</code>操作符可以用来获取一个对象中的所有key值</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">K1</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Person<span class="token punctuation">;</span> <span class="token comment">// &#39;name&#39; | &#39;age&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">K2</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Person<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// &quot;length&quot; | &quot;toString&quot; | &quot;pop&quot; | &quot;push&quot; | &quot;concat&quot; | &quot;join&quot; </span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">K3</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> Person<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// string | number</span>\n</code></pre></div><p>keyof结合typeof使用</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token constant">COLORS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  red<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>\n  blue<span class="token operator">:</span> <span class="token string">&#39;blue&#39;</span>\n<span class="token punctuation">}</span>\n\ntype <span class="token constant">C</span> <span class="token operator">=</span> keyof <span class="token keyword">typeof</span> <span class="token constant">COLORS</span> <span class="token comment">// type C = &#39;red&#39; | &#39;blue&#39;</span>\n</code></pre></div><h3 id="in"><a class="header-anchor" href="#in" aria-hidden="true">#</a> in</h3><p><code>in</code>用来遍历枚举类型</p><div class="language-js"><pre><code>type Keys <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span>\ntype Obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>p <span class="token keyword">in</span> keys<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token comment">// {a: any, b: any, c: any}</span>\n</code></pre></div><h3 id="infer"><a class="header-anchor" href="#infer" aria-hidden="true">#</a> infer</h3><p>在条件类型语句中，可以用<code>infer</code>声明一个类型变量并且对它进行使用</p><div class="language-js"><pre><code>type ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>\n\t<span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> infer <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> any<span class="token punctuation">;</span>\n</code></pre></div><p>以上代码中 <code>infer R</code> 就是声明一个变量来承载传入函数签名的返回值类型，简单说就是用它取到函数返回值的类型方便之后使用。</p><h3 id="extends"><a class="header-anchor" href="#extends" aria-hidden="true">#</a> extends</h3><p>有时候我们定义的泛型不想过于灵活或者说想继承某些类等，可以通过extends关键字添加泛型约束</p><div class="language-js"><pre><code><span class="token keyword">interface</span> <span class="token class-name">ILengthwise</span> <span class="token punctuation">{</span>\n    length<span class="token operator">:</span> number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Ilengthwise</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> arg\n<span class="token punctuation">}</span>\n</code></pre></div><p>这时loggingIdentity被约束了类型</p><div class="language-js"><pre><code><span class="token function">loggingIdentity</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Error, number doesn&#39;t have a .length property</span>\n<span class="token function">loggingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="二、编译上下文"><a class="header-anchor" href="#二、编译上下文" aria-hidden="true">#</a> 二、编译上下文</h2><h3 id="tsconfig-json的作用"><a class="header-anchor" href="#tsconfig-json的作用" aria-hidden="true">#</a> tsconfig.json的作用</h3><ul><li>用于标识Typescript项目的根路径；</li><li>用于配置Typescript编译器；</li><li>用于指定编译的文件</li></ul><h3 id="tsconfig-json重要字段"><a class="header-anchor" href="#tsconfig-json重要字段" aria-hidden="true">#</a> tsconfig.json重要字段</h3><ul><li>files 设置要编译的文件的名称</li><li>include 设置需要进行编译的文件，支持路径模式匹配；</li><li>exclude 设置无需进行编译的文件，支持路径模式匹配；</li><li>compilerOptions 设置与编译流程相关的选项</li></ul><h3 id="compileroptions选项"><a class="header-anchor" href="#compileroptions选项" aria-hidden="true">#</a> compilerOptions选项</h3><p>compilerOptions 支持很多选项，常见的有 <code>baseUrl</code>、 <code>target</code>、<code>baseUrl</code>、 <code>moduleResolution</code> 和 <code>lib</code> 等。</p><div class="language-js"><pre><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">/* 基本选项 */</span>\n    <span class="token string">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>                       <span class="token comment">// 指定 ECMAScript 目标版本: &#39;ES3&#39; (default), &#39;ES5&#39;, &#39;ES6&#39;/&#39;ES2015&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, or &#39;ESNEXT&#39;</span>\n    <span class="token string">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>                  <span class="token comment">// 指定使用模块: &#39;commonjs&#39;, &#39;amd&#39;, &#39;system&#39;, &#39;umd&#39; or &#39;es2015&#39;</span>\n    <span class="token string">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                             <span class="token comment">// 指定要包含在编译中的库文件</span>\n    <span class="token string">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                       <span class="token comment">// 允许编译 javascript 文件</span>\n    <span class="token string">&quot;checkJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                       <span class="token comment">// 报告 javascript 文件中的错误</span>\n    <span class="token string">&quot;jsx&quot;</span><span class="token operator">:</span> <span class="token string">&quot;preserve&quot;</span><span class="token punctuation">,</span>                     <span class="token comment">// 指定 jsx 代码的生成: &#39;preserve&#39;, &#39;react-native&#39;, or &#39;react&#39;</span>\n    <span class="token string">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                   <span class="token comment">// 生成相应的 &#39;.d.ts&#39; 文件</span>\n    <span class="token string">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                     <span class="token comment">// 生成相应的 &#39;.map&#39; 文件</span>\n    <span class="token string">&quot;outFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>                       <span class="token comment">// 将输出文件合并为一个文件</span>\n    <span class="token string">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>                        <span class="token comment">// 指定输出目录</span>\n    <span class="token string">&quot;rootDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>                       <span class="token comment">// 用来控制输出目录结构 --outDir.</span>\n    <span class="token string">&quot;removeComments&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment">// 删除编译后的所有的注释</span>\n    <span class="token string">&quot;noEmit&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token comment">// 不生成输出文件</span>\n    <span class="token string">&quot;importHelpers&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment">// 从 tslib 导入辅助工具函数</span>\n    <span class="token string">&quot;isolatedModules&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token comment">// 将每个文件做为单独的模块 （与 &#39;ts.transpileModule&#39; 类似）.</span>\n\n    <span class="token comment">/* 严格的类型检查选项 */</span>\n    <span class="token string">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token comment">// 启用所有严格类型检查选项</span>\n    <span class="token string">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment">// 在表达式和声明上有隐含的 any类型时报错</span>\n    <span class="token string">&quot;strictNullChecks&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token comment">// 启用严格的 null 检查</span>\n    <span class="token string">&quot;noImplicitThis&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment">// 当 this 表达式值为 any 类型的时候，生成一个错误</span>\n    <span class="token string">&quot;alwaysStrict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                  <span class="token comment">// 以严格模式检查每个模块，并在每个文件里加入 &#39;use strict&#39;</span>\n\n    <span class="token comment">/* 额外的检查 */</span>\n    <span class="token string">&quot;noUnusedLocals&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment">// 有未使用的变量时，抛出错误</span>\n    <span class="token string">&quot;noUnusedParameters&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment">// 有未使用的参数时，抛出错误</span>\n    <span class="token string">&quot;noImplicitReturns&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             <span class="token comment">// 并不是所有函数里的代码都有返回值时，抛出错误</span>\n    <span class="token string">&quot;noFallthroughCasesInSwitch&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span>\n\n    <span class="token comment">/* 模块解析选项 */</span>\n    <span class="token string">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>            <span class="token comment">// 选择模块解析策略： &#39;node&#39; (Node.js) or &#39;classic&#39; (TypeScript pre-1.6)</span>\n    <span class="token string">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>                       <span class="token comment">// 用于解析非相对模块名称的基目录</span>\n    <span class="token string">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                           <span class="token comment">// 模块名到基于 baseUrl 的路径映射的列表</span>\n    <span class="token string">&quot;rootDirs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token comment">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span>\n    <span class="token string">&quot;typeRoots&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token comment">// 包含类型声明的文件列表</span>\n    <span class="token string">&quot;types&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                           <span class="token comment">// 需要包含的类型声明文件名列表</span>\n    <span class="token string">&quot;allowSyntheticDefaultImports&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 允许从没有设置默认导出的模块中默认导入。</span>\n\n    <span class="token comment">/* Source Map Options */</span>\n    <span class="token string">&quot;sourceRoot&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>                    <span class="token comment">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span>\n    <span class="token string">&quot;mapRoot&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>                       <span class="token comment">// 指定调试器应该找到映射文件而不是生成文件的位置</span>\n    <span class="token string">&quot;inlineSourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token comment">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span>\n    <span class="token string">&quot;inlineSources&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span>\n\n    <span class="token comment">/* 其他选项 */</span>\n    <span class="token string">&quot;experimentalDecorators&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment">// 启用装饰器</span>\n    <span class="token string">&quot;emitDecoratorMetadata&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>          <span class="token comment">// 为装饰器提供元数据的支持</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',40);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
