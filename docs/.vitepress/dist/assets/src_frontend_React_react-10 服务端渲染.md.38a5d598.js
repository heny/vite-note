import{o as n,c as a,d as s}from"./app.dc9dbd0c.js";const t='{"title":"React-10 服务端渲染","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、CSR与SSR","slug":"一、csr与ssr"},{"level":2,"title":"二、ReactDOMServer类库","slug":"二、reactdomserver类库"}],"relativePath":"src\\\\frontend\\\\React\\\\react-10 服务端渲染.md","lastUpdated":1612089669852}',e={},p=s('<h1 id="react-10-服务端渲染"><a class="header-anchor" href="#react-10-服务端渲染" aria-hidden="true">#</a> React-10 服务端渲染</h1><h2 id="一、csr与ssr"><a class="header-anchor" href="#一、csr与ssr" aria-hidden="true">#</a> 一、CSR与SSR</h2><p><img src="https://notecdn.heny.vip/images/react-10_%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93-01.png" alt="image"></p><ol><li>CSR：客户端渲染（Client Side Render） 过程：</li></ol><ul><li>①浏览器发送请求</li><li>②服务器返回空白HTML(HTML里包含一个root节点和js文件)</li><li>③浏览器下载js文件</li><li>④浏览器运行react代码</li><li>⑤页面准备就绪</li></ul><p>即：当前页面是由js文件渲染出来的；</p><p>SEO (搜索引擎优化)，搜索关键词的时候排名，对大多数搜索引擎，不识别JavaScript 内容，只识别 HTML 内容。 （注：原则上可以不用服务端渲染时最好不用，所以如果只有 SEO 要求，可以用预渲染等技术去替代；</p><ol start="2"><li>SSR：服务端渲染（Server Side Render） 过程：</li></ol><ul><li>浏览器发送请求</li><li>服务器运行react代码生成页面并返回HTML页面</li><li>浏览器下载HTML文档</li><li>页面准备就绪</li></ul><p>即：当前页面是由服务器生成好给到浏览器的；</p><h2 id="二、reactdomserver类库"><a class="header-anchor" href="#二、reactdomserver类库" aria-hidden="true">#</a> 二、ReactDOMServer类库</h2><p>react-dom/server包提供了组件的服端渲染功能，返回值是一个html</p><ol><li>渲染为html：renderToString</li></ol><div class="language-jsx"><pre><code>ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ol start="2"><li>渲染为静态HTML：renderToStaticMarkup 该方法与renderToString方法类似，但这个方法不会生成额外的DOM特性，如：data-react-id等 React内部所使用的特性。当你想使用一个简单的静态页面生成器时这个方法非常有用，它会剥离额外的特性且会节省大量字节。</li></ol><div class="language-jsx"><pre><code>ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToStaticMarkup</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>\n</code></pre></div><p>简单用法：在页面没有展示时，渲染的是该html，给页面添加骨架屏</p><div class="language-jsx"><pre><code><span class="token keyword">var</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToStaticMarkup</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skeleton</span><span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">)</span>\ndocument<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token comment">// window.root相当于上面的获取id为root的</span>\n</code></pre></div>',18);e.render=function(s,t,e,o,c,l){return n(),a("div",null,[p])};export default e;export{t as __pageData};
