import{o as s,c as a,d as n}from"./app.dc9dbd0c.js";const e='{"title":"linux-07 shell语句","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、条件语句","slug":"一、条件语句"},{"level":3,"title":"根据文件类型进行判断","slug":"根据文件类型进行判断"},{"level":3,"title":"按照文件权限进行判断","slug":"按照文件权限进行判断"},{"level":3,"title":"两个文件之间进行比较","slug":"两个文件之间进行比较"},{"level":3,"title":"两个整数之间比较","slug":"两个整数之间比较"},{"level":3,"title":"字符串的判断","slug":"字符串的判断"},{"level":3,"title":"多重条件判断","slug":"多重条件判断"},{"level":2,"title":"二、if流程控制语句","slug":"二、if流程控制语句"},{"level":3,"title":"单分支if条件语句","slug":"单分支if条件语句"},{"level":3,"title":"双分支if条件语句","slug":"双分支if条件语句"},{"level":3,"title":"多分支if条件语句","slug":"多分支if条件语句"},{"level":2,"title":"三、case流程控制语句","slug":"三、case流程控制语句"},{"level":2,"title":"四、for流程控制语句","slug":"四、for流程控制语句"},{"level":2,"title":"五、while循环","slug":"五、while循环"},{"level":2,"title":"六、until循环","slug":"六、until循环"}],"relativePath":"src\\\\frontend\\\\Server\\\\linux-07 shell语句.md","lastUpdated":1612089669869}',t={},o=n('<h1 id="linux-07-shell语句"><a class="header-anchor" href="#linux-07-shell语句" aria-hidden="true">#</a> linux-07 shell语句</h1><h2 id="一、条件语句"><a class="header-anchor" href="#一、条件语句" aria-hidden="true">#</a> 一、条件语句</h2><h3 id="根据文件类型进行判断"><a class="header-anchor" href="#根据文件类型进行判断" aria-hidden="true">#</a> 根据文件类型进行判断</h3><p>以下命令都需要进行判断文件是否存在，并且为描述文件，命令后面跟文件名</p><ul><li><code>-b</code>：块设备文件</li><li><code>-c</code>：字符设备文件</li><li><code>-d</code>：目录文件</li><li><code>-e</code>：仅判断文件是否存在</li><li><code>-f</code>：普通文件</li><li><code>-L</code>：符号链接文件</li><li><code>-p</code>：管道文件</li><li><code>-s</code>：非空</li><li><code>-S</code>：套接字文件</li></ul><p><strong>两种判断格式</strong></p><div class="language-bash"><pre><code><span class="token comment"># 第一种</span>\n<span class="token builtin class-name">test</span> -e /root/install.log\n<span class="token comment"># 第二种</span>\n<span class="token punctuation">[</span> -e /root/install.log <span class="token punctuation">]</span> \n<span class="token punctuation">[</span> -d /root <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;yes&quot;</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;no&quot;</span> <span class="token comment"># 判断同时输出</span>\n</code></pre></div><h3 id="按照文件权限进行判断"><a class="header-anchor" href="#按照文件权限进行判断" aria-hidden="true">#</a> 按照文件权限进行判断</h3><p>以下命令都需要判断文件是否存在，并且为描述文件，命令后面跟文件名</p><ul><li><code>-r</code>：拥有读权限</li><li><code>-w</code>：拥有写权限</li><li><code>-x</code>：拥有执行权限</li><li><code>-u</code>：拥有SUID权限</li><li><code>-g</code>：拥有SGID权限</li><li><code>-k</code>：拥有SBit权限</li></ul><div class="language-bash"><pre><code><span class="token punctuation">[</span> -w student.txt <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;yes&quot;</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;no&quot;</span>\n</code></pre></div><h3 id="两个文件之间进行比较"><a class="header-anchor" href="#两个文件之间进行比较" aria-hidden="true">#</a> 两个文件之间进行比较</h3><ul><li><code>文件1 -nt 文件2</code>：判断文件1的修改时间是否比文件2的新</li><li><code>文件1 -ot 文件2</code>：判断文件1的修改时间是否比文件2的旧</li><li><code>文件1 -ef 文件2</code>：判断文件1是否和文件2的Inode号一致，可以理解为两个文件是否同一个文件，这个判断用于判断硬链接是很好的方法</li></ul><div class="language-bash"><pre><code><span class="token comment">#创建硬链接</span>\n<span class="token function">ln</span> /root/student.txt /tmp/stu.txt\n<span class="token comment"># 测试下</span>\n<span class="token punctuation">[</span> /root/student.txt -ef /tmp/stu.txt <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;yes&quot;</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;no&quot;</span>\n</code></pre></div><h3 id="两个整数之间比较"><a class="header-anchor" href="#两个整数之间比较" aria-hidden="true">#</a> 两个整数之间比较</h3><ul><li><code>整数1 -eq 整数2</code>：判断整数1是否和整数2相等</li><li><code>-ne</code>：不相等</li><li><code>-gt</code>：大于</li><li><code>-lt</code>：小于</li><li><code>-ge</code>：大于等于</li><li><code>-le</code>：小于</li></ul><div class="language-bash"><pre><code><span class="token punctuation">[</span> <span class="token number">23</span> -ge <span class="token number">22</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;yes&quot;</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;no&quot;</span>\n</code></pre></div><h3 id="字符串的判断"><a class="header-anchor" href="#字符串的判断" aria-hidden="true">#</a> 字符串的判断</h3><ul><li><code>-z 字符串</code>：判断字符串是否为空</li><li><code>-n 字符串</code>：非空</li><li><code>字串1 == 字串2</code>：是否相等</li><li><code>字串1 != 字串2</code>：是否不等</li></ul><div class="language-bash"><pre><code><span class="token assign-left variable">name</span><span class="token operator">=</span>sc\n<span class="token comment"># 判断name变量是否为空</span>\n<span class="token punctuation">[</span> -z <span class="token string">&quot;<span class="token variable">$name</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;yes&quot;</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;no&quot;</span>\n</code></pre></div><h3 id="多重条件判断"><a class="header-anchor" href="#多重条件判断" aria-hidden="true">#</a> 多重条件判断</h3><ul><li><code>判断1 -a 判断2</code>：逻辑与，判断1和判断2都成立，最终结果为真</li><li><code>判断1 -o 判断2</code>：逻辑或，判断1和判断2有一个成立，最终结果为真</li><li><code>! 判断</code>：逻辑非，使原始的判断式取反</li></ul><div class="language-bash"><pre><code><span class="token assign-left variable">aa</span><span class="token operator">=</span><span class="token number">11</span>\n<span class="token punctuation">[</span> -n <span class="token string">&quot;<span class="token variable">$aa</span>&quot;</span> -a <span class="token string">&quot;<span class="token variable">$aa</span>&quot;</span> -gt <span class="token number">23</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;yes&quot;</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;no&quot;</span>\n</code></pre></div><h2 id="二、if流程控制语句"><a class="header-anchor" href="#二、if流程控制语句" aria-hidden="true">#</a> 二、if流程控制语句</h2><h3 id="单分支if条件语句"><a class="header-anchor" href="#单分支if条件语句" aria-hidden="true">#</a> 单分支if条件语句</h3><div class="language-bash"><pre><code><span class="token keyword">if</span> <span class="token punctuation">[</span> 条件判断式 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>\n\t程序\n<span class="token keyword">fi</span>\n<span class="token comment"># or</span>\n<span class="token keyword">if</span> <span class="token punctuation">[</span> 条件判断式 <span class="token punctuation">]</span>\n\t<span class="token keyword">then</span>\n\t\t程序\n<span class="token keyword">fi</span>\n</code></pre></div><p>注意：</p><ul><li>if语句使用fi结尾，和一般语言使用大括号结尾不同</li><li>[ 条件判断式 ]就是使用test命令判断，所以中括号和条件判断式之间必须有空格</li><li>then后面跟符合条件之后执行的程序，可以放在[]之后，用&#39;;&#39;分割，也可以换行写入，就不需要&#39;;&#39;了</li></ul><p>例子：判断分区使用率</p><div class="language-bash"><pre><code><span class="token comment"># 把根分区使用率作为变量值赋予变量rate</span>\n<span class="token assign-left variable">rate</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">df</span> -h <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;/dev/sda3&quot;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print <span class="token variable">$5</span>}&#39;</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">&quot;%&quot;</span> -f1<span class="token variable">)</span></span>\n<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$rate</span> -ge <span class="token number">80</span> <span class="token punctuation">]</span>\n\t<span class="token keyword">then</span>\n\t\t<span class="token builtin class-name">echo</span> <span class="token string">&quot;warning! /dev/sda3 is full!!&quot;</span>\n    <span class="token keyword">fi</span>\n</code></pre></div><h3 id="双分支if条件语句"><a class="header-anchor" href="#双分支if条件语句" aria-hidden="true">#</a> 双分支if条件语句</h3><div class="language-bash"><pre><code><span class="token keyword">if</span> <span class="token punctuation">[</span> 条件判断式 <span class="token punctuation">]</span>\n\t<span class="token keyword">then</span>\n\t\t<span class="token comment">#条件成立时，执行的程序</span>\n    <span class="token keyword">else</span>\n    \t<span class="token comment">#条件不成立时，执行的另一个程序</span>\n<span class="token keyword">fi</span>\n</code></pre></div><h3 id="多分支if条件语句"><a class="header-anchor" href="#多分支if条件语句" aria-hidden="true">#</a> 多分支if条件语句</h3><div class="language-bash"><pre><code><span class="token keyword">if</span> <span class="token punctuation">[</span> 条件判断式1 <span class="token punctuation">]</span>\n\t<span class="token keyword">then</span>\n\t\t<span class="token comment"># 当条件1成立时，执行程序1</span>\n<span class="token keyword">elif</span> <span class="token punctuation">[</span> 条件判断2 <span class="token punctuation">]</span>\n\t<span class="token keyword">then</span> 当条件判断2成立时，执行程序2\n<span class="token comment">#...省略更多条件..</span>\n<span class="token keyword">else</span>\n\t<span class="token comment"># 当所有条件都不成立时，最后执行此程序</span>\n<span class="token keyword">fi</span>\n</code></pre></div><h2 id="三、case流程控制语句"><a class="header-anchor" href="#三、case流程控制语句" aria-hidden="true">#</a> 三、case流程控制语句</h2><p>多分支case条件语句</p><p>case语句和if...elif...else语句一样都是多分支条件语句，不过和if多分支条件语句不同的是，case语句只能判断一种条件关系，而if语句可以判断多种关系</p><div class="language-bash"><pre><code><span class="token keyword">case</span> $变量名 <span class="token keyword">in</span>\n\t<span class="token string">&quot;值1&quot;</span><span class="token punctuation">)</span>\n\t\t<span class="token comment"># 如果变量的值等于1，则执行</span>\n\t\t<span class="token punctuation">;</span><span class="token punctuation">;</span>\n    <span class="token string">&quot;值2&quot;</span><span class="token punctuation">)</span>\n    \t<span class="token comment"># 条件2</span>\n    \t<span class="token punctuation">;</span><span class="token punctuation">;</span>\n    *<span class="token punctuation">)</span>\n    \t<span class="token comment"># 最后的条件</span>\n    \t<span class="token punctuation">;</span><span class="token punctuation">;</span>\n<span class="token keyword">esac</span>\n</code></pre></div><h2 id="四、for流程控制语句"><a class="header-anchor" href="#四、for流程控制语句" aria-hidden="true">#</a> 四、for流程控制语句</h2><p>语法一</p><div class="language-bash"><pre><code><span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 值1 值2 值3<span class="token punctuation">..</span>.\n\t<span class="token keyword">do</span>\n\t\t<span class="token comment">#程序</span>\n    <span class="token keyword">done</span>\n</code></pre></div><p>例子：批量解压缩脚本</p><div class="language-bash"><pre><code><span class="token shebang important">#!/bin/bash</span>\n<span class="token builtin class-name">cd</span> /lamp\n<span class="token function">ls</span> *.tar.gz <span class="token operator">&gt;</span> ls.log\n<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> ls.log<span class="token variable">)</span></span>\n\t<span class="token keyword">do</span>\n\t\t<span class="token function">tar</span> -zxf <span class="token variable">$i</span> <span class="token operator">&amp;&gt;</span>/dev/null\n    <span class="token keyword">done</span>\n<span class="token function">rm</span> -rf /lamp/ls.log\n</code></pre></div><p>语法二</p><div class="language-bash"><pre><code><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>初始值<span class="token punctuation">;</span>循环控制条件<span class="token punctuation">;</span>变量变化<span class="token punctuation">))</span></span>\n\t<span class="token keyword">do</span>\n\t\t程序\n    <span class="token keyword">done</span>\n</code></pre></div><p>例子：从1加到100</p><div class="language-bash"><pre><code><span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token number">0</span>\n<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">))</span></span>\n\t<span class="token keyword">do</span>\n\t\t<span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$s<span class="token operator">+</span>$i<span class="token variable">))</span></span>\n    <span class="token keyword">done</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;The sum of 1+2+..+100 is: <span class="token variable">$s</span>&quot;</span>\n</code></pre></div><h2 id="五、while循环"><a class="header-anchor" href="#五、while循环" aria-hidden="true">#</a> 五、while循环</h2><p>while循环是不定循环，也称作条件循环，只要条件判断式成立，循环就会一直继续，直到条件判断式不成立，循环才会停止，这就和for的固定循环不太一样了；</p><div class="language-bash"><pre><code><span class="token keyword">while</span> <span class="token punctuation">[</span> 条件判断式 <span class="token punctuation">]</span>\n\t<span class="token keyword">do</span>\n\t\t<span class="token comment">#程序</span>\n    <span class="token keyword">done</span>\n</code></pre></div><p>例子：1加到100</p><div class="language-bash"><pre><code><span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span>\n<span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token number">0</span>\n<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -le <span class="token number">100</span> <span class="token punctuation">]</span>\n\t<span class="token keyword">do</span>\n\t\t<span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span> $s<span class="token operator">+</span>$i <span class="token variable">))</span></span>\n\t\t<span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span> $i<span class="token operator">+</span><span class="token number">1</span> <span class="token variable">))</span></span>\n    <span class="token keyword">done</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;the sum is:<span class="token variable">$s</span>&quot;</span>\n</code></pre></div><h2 id="六、until循环"><a class="header-anchor" href="#六、until循环" aria-hidden="true">#</a> 六、until循环</h2><p>until循环和while循环相反，until循环时只要条件判断式不成立则进行循环，并执行循环程序，一旦循环条件成立，则终止循环</p><div class="language-bash"><pre><code><span class="token keyword">until</span> <span class="token punctuation">[</span> 条件判断式 <span class="token punctuation">]</span>\n\t<span class="token keyword">do</span>\n\t\t<span class="token comment"># 程序</span>\n    <span class="token keyword">done</span>\n</code></pre></div>',55);t.render=function(n,e,t,p,l,c){return s(),a("div",null,[o])};export default t;export{e as __pageData};
