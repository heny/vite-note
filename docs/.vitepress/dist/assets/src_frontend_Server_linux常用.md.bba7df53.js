import{o as e,c as n,d as s}from"./app.f43337b9.js";const a='{"title":"linux常用","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本操作","slug":"基本操作"},{"level":2,"title":"linux修改中文系统","slug":"linux修改中文系统"},{"level":2,"title":"本地直接连接linux","slug":"本地直接连接linux"},{"level":2,"title":"使用xshell上传网站","slug":"使用xshell上传网站"},{"level":2,"title":"本地cmd直接操作文件上传","slug":"本地cmd直接操作文件上传"},{"level":2,"title":"解决scp不需要输入密码直接上传","slug":"解决scp不需要输入密码直接上传"},{"level":2,"title":"本地直接打包加上传","slug":"本地直接打包加上传"},{"level":2,"title":"填写脚本自动上传","slug":"填写脚本自动上传"},{"level":2,"title":"node项目保持后台运行","slug":"node项目保持后台运行"},{"level":2,"title":"nohup后台运行sh程序及查看","slug":"nohup后台运行sh程序及查看"},{"level":2,"title":"ubuntu下使用nvm","slug":"ubuntu下使用nvm"},{"level":2,"title":"docker常用命令","slug":"docker常用命令"},{"level":2,"title":"jenkins常用命令","slug":"jenkins常用命令"},{"level":2,"title":"部署在线版VScode","slug":"部署在线版vscode"},{"level":3,"title":"拉取代码","slug":"拉取代码"},{"level":3,"title":"设置密码","slug":"设置密码"},{"level":3,"title":"运行","slug":"运行"}],"relativePath":"src\\\\frontend\\\\Server\\\\linux常用.md","lastUpdated":1612101557992}',l={},o=s('<h1 id="linux常用"><a class="header-anchor" href="#linux常用" aria-hidden="true">#</a> linux常用</h1><h2 id="基本操作"><a class="header-anchor" href="#基本操作" aria-hidden="true">#</a> 基本操作</h2><ul><li>清空当前屏幕：<code>clear</code></li><li>直到多少秒：<code>sleep 60</code></li><li>查看历史命令：<code>history</code>， <ul><li>使用<code>!n</code>执行第n条命令，</li><li><code>!!</code>执行上一条命令</li><li><code>!字串</code> 执行上一条该字串开头的命令</li></ul></li></ul><h2 id="linux修改中文系统"><a class="header-anchor" href="#linux修改中文系统" aria-hidden="true">#</a> linux修改中文系统</h2><ol><li><p>locale -a查看是否有zh_CN.UTF-8，如果有则进行下一步，没有自行百度安装</p></li><li><p>使用<code>vim</code>打开<code>locale.conf</code>文件</p><p><code>vim /etc/locale.conf</code></p></li><li><p>编辑文件后保存退出</p><div class="language-sh"><pre><code>LANG=&quot;zh_CN.UTF-8&quot; # en_US.UTF-8为英文\n</code></pre></div></li><li><p>最后重启 <code>reboot</code></p></li></ol><h2 id="本地直接连接linux"><a class="header-anchor" href="#本地直接连接linux" aria-hidden="true">#</a> 本地直接连接linux</h2><div class="language-shell"><pre><code><span class="token function">ssh</span> root@39.107.82.176\n</code></pre></div><h2 id="使用xshell上传网站"><a class="header-anchor" href="#使用xshell上传网站" aria-hidden="true">#</a> 使用xshell上传网站</h2><ol><li>安装：<code>yum install lrzsz -y</code></li><li>检查安装是否完成：<code>rpm -qa | grep lrzsz</code></li><li>基本操作：</li></ol><ul><li>上传：<code>rz</code> 直接弹出上传窗口</li><li>下载：<code>sz</code> 直接弹出下载窗口</li></ul><h2 id="本地cmd直接操作文件上传"><a class="header-anchor" href="#本地cmd直接操作文件上传" aria-hidden="true">#</a> 本地cmd直接操作文件上传</h2><div class="language-shell"><pre><code><span class="token comment"># 下载文件</span>\n<span class="token function">scp</span> build.gz root@107.172.27.254:/home/test.txt\n<span class="token comment"># 上传文件</span>\n<span class="token function">scp</span> test.txt root@107.172.27.254:/home    \n<span class="token comment"># 下载目录</span>\n<span class="token function">scp</span> -r dist root@107.172.27.254:/home/test   \n<span class="token comment"># 上传目录</span>\n<span class="token function">scp</span> -r dist root@107.172.27.254:/home    \n<span class="token comment"># 上传当前目录所有文件和目录到远程</span>\n<span class="token function">scp</span> -r * root@39.107.82.176:/home\n</code></pre></div><h2 id="解决scp不需要输入密码直接上传"><a class="header-anchor" href="#解决scp不需要输入密码直接上传" aria-hidden="true">#</a> 解决scp不需要输入密码直接上传</h2><ol><li>在linux输入</li></ol><div class="language-shell"><pre><code>ssh-keygen -t rsa\n<span class="token builtin class-name">cd</span> /root/.ssh\n</code></pre></div><ol start="2"><li>在本地执行以下命令，并一路回车创建ssh密钥</li></ol><div class="language-shell"><pre><code>ssh-keygen -t rsa\n</code></pre></div><p>之后到<code>C:\\Users\\Administrator\\.ssh</code>，输入以下命令</p><div class="language-shell"><pre><code><span class="token function">scp</span> id_rsa.pub root@39.107.82.176\n</code></pre></div><ol start="3"><li>文件上传之后到linux输入命令</li></ol><div class="language-shell"><pre><code><span class="token builtin class-name">cd</span> /root/.ssh\n<span class="token function">cat</span> id_rsa.pub <span class="token operator">&gt;&gt;</span> authorized_keys\n</code></pre></div><ol start="4"><li>已经可以测试不输入密码直接上传了</li></ol><h2 id="本地直接打包加上传"><a class="header-anchor" href="#本地直接打包加上传" aria-hidden="true">#</a> 本地直接打包加上传</h2><div class="language-shell"><pre><code><span class="token comment"># 切换到build目录里</span>\n$ <span class="token builtin class-name">cd</span> ./build\n$ <span class="token function">tar</span> -cvf build.gz *\n<span class="token comment"># 上传到www/wwwroot/chart目录</span>\n$ <span class="token function">scp</span> build.gz root@39.107.82.176:/www/wwwroot/chart\n<span class="token comment"># 连接到linux,并输入密码</span>\n$ <span class="token function">ssh</span> root@39.107.82.176\n\n<span class="token comment">#  服务器的操作</span>\n<span class="token comment"># 切换到www/wwwroot/chart目录</span>\n<span class="token builtin class-name">cd</span> /www/wwwroot/chart <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span>\n<span class="token comment"># 解压</span>\n<span class="token function">tar</span> -xvf build.gz\n</code></pre></div><h2 id="填写脚本自动上传"><a class="header-anchor" href="#填写脚本自动上传" aria-hidden="true">#</a> 填写脚本自动上传</h2><ol><li>本地脚本，<a href="http://xn--delony-h18it8squmh9e54sf5af30d5titr1dba0907l.sh" target="_blank" rel="noopener noreferrer">在项目根目录创建文件夹delony.sh</a>，只要是sh后缀都行</li></ol><div class="language-shell"><pre><code><span class="token shebang important">#!/bin/bash</span>\n<span class="token function">npm</span> run build\n<span class="token builtin class-name">cd</span> ./build\n<span class="token function">tar</span> -cvf build.gz *\n<span class="token function">scp</span> build.gz root@39.107.82.176:/www/wwwroot/chart\n<span class="token function">ssh</span> root@39.107.82.176\n</code></pre></div><ol start="2"><li>运行之后会直接到服务器</li></ol><div class="language-shell"><pre><code><span class="token function">touch</span> delony.sh\n<span class="token function">chmod</span> <span class="token number">777</span> delony.sh\n<span class="token function">vim</span> delony.sh\n\n<span class="token comment"># 写入以下代码</span>\n<span class="token comment">#!/bin/bash</span>\n<span class="token builtin class-name">cd</span> /www/wwwroot/chart\n<span class="token function">tar</span> -xvf build.gz\n<span class="token function">rm</span> -rf build.gz\n</code></pre></div><ol start="3"><li><a href="http://xn--delony-9m7i2c81a680a40fiq4h.sh" target="_blank" rel="noopener noreferrer">之后点击一下delony.sh</a>，之后在到服务器运行：sh ./delony.sh即可</li></ol><h2 id="node项目保持后台运行"><a class="header-anchor" href="#node项目保持后台运行" aria-hidden="true">#</a> node项目保持后台运行</h2><ol><li><p>全局安装：<code>npm install forever -g</code></p></li><li><p>启动某个项目：forever start 文件名</p><p><img src="https://notecdn.heny.vip/images/server-03_linux%E5%B8%B8%E7%94%A8-02.png" alt="image"></p></li><li><p>查看后台运行的项目：forever list</p><p><img src="https://notecdn.heny.vip/images/server-03_linux%E5%B8%B8%E7%94%A8-03.png" alt="image"></p></li><li><p>停止某个项目：forever stop [pid]</p><p><img src="https://notecdn.heny.vip/images/server-03_linux%E5%B8%B8%E7%94%A8-04.png" alt="image"></p></li><li><p>停止所有项目：forever stopall</p></li><li><p>重新启动项目：forever restart 文件名（重新启动不需要再传入参数了）</p></li></ol><h2 id="nohup后台运行sh程序及查看"><a class="header-anchor" href="#nohup后台运行sh程序及查看" aria-hidden="true">#</a> nohup后台运行sh程序及查看</h2><ol><li><p>后台执行.sh文件（使用nohup和&amp;命令）</p><div class="language-sh"><pre><code>nohup ./a.sh &amp;\n</code></pre></div><ul><li>nohup：加在一个命令的最前面，表示不挂断的运行命令</li><li>&amp;：加在一个命令的最后面，表示这个命令放在后台运行；</li></ul><p>执行之后会增加一个<code>nohup.out</code>文件查看执行日志</p><p>注意：在执行该.sh文件出错时，建议可以先手动运行一下sh文件有没有错误</p></li><li><p>查看后台运行的命令（使用ps和jobs）</p><ul><li><p><code>jobs</code>：只能查看当前终端后台执行的任务，换了终端就看不见了</p><div class="language-sh"><pre><code>[1]- 运行中        nohup ./one.sh &amp;\n[2]+ 运行中        nohup ./a.sh &amp;\n</code></pre></div><p><code>-</code> 表示之前的任务，<code>+</code>表示最近的任务，<code>[1]</code>代表jobnum是1；</p></li><li><p><code>ps</code>：可以查看别的终端的任务</p><div class="language-sh"><pre><code>[root@heny test]ps -aux | grep a.sh # 将a.sh的任务过滤出来\nroot     15208  0.0  0.0 113176  1404 pts/1    S    16:02   0:00 /bin/bash ./one.sh\nroot     16413  0.0  0.2 151752  5356 pts/1    S+   16:11   0:00 vim one.sh\nroot     19902  0.0  0.0 112724  1000 pts/5    R+   16:31   0:00 grep --color=auto one.sh\n</code></pre></div><p>参数：<code>a</code> 显示所有程序 <code>u</code> 以用户为主的格式显示 <code>x</code> 显示所有的程序，不以终端机来区分</p><p>第二列为PID；</p></li></ul></li><li><p>关闭当前后台运行的程序（使用kill）</p><p>（1）通过jobs命令查看jobnum，然后执行<code>kill jobnum</code></p><p>（2）通过ps命令查看进程号PID，然后执行<code>kill PID</code></p><p>（3）当前的前台的进程按<code>ctrl+c</code>就可以终止了</p></li><li><p>前后台进程的切换与控制</p><p>（1）<code>fg</code>命令</p><p>将后台中的命令调至前台继续运行；</p><p>如果后台有多个命令，可以使用jobs查看Jobnum，然后使用fg %jobnum将选中的命令调出；</p><p>（2）<code>ctrl + z</code>命令</p><p>将一个正在前台执行的命令放到后台，并且处于暂停状态</p><p>（3）<code>bg</code> 命令</p><p>将一个在后台暂停的命令，变成在后台继续执行；</p><p>如果多个命令使用jobs查看，之后bg %jobnum；</p></li></ol><h2 id="ubuntu下使用nvm"><a class="header-anchor" href="#ubuntu下使用nvm" aria-hidden="true">#</a> ubuntu下使用nvm</h2><ol><li><p>从github克隆过来</p><p>需要先创建~/git目录，之后将git的东西放在里面；还需要<code>apt install git</code>；</p><div class="language-sh"><pre><code>$ cd ~/git\n$ git clone https://github.com/creationix/nvm.git\n</code></pre></div></li><li><p>配置终端启动时自动执行 source ~/git/nvm/nvm.sh,</p><p>在 ~/.bashrc, ~/.bash_profile, ~/.profile, 或者 ~/.zshrc 文件添加以下命令:</p><div class="language-sh"><pre><code>source ~/git/nvm/nvm.sh\n</code></pre></div></li><li><p>重新打开</p></li><li><p>配置nvm环境变量</p><p>添加到上面一样的文件里面</p><div class="language-sh"><pre><code># nvm\nexport NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node\nsource ~/git/nvm/nvm.sh\n</code></pre></div></li><li><p>之后就可以使用nvm来安装各版本的node了</p></li></ol><h2 id="docker常用命令"><a class="header-anchor" href="#docker常用命令" aria-hidden="true">#</a> docker常用命令</h2><ul><li><code>docker ps</code> 查看docker容器列表</li><li><code>docker-compose up -d jenkins</code> 更新jenkins的配置</li></ul><h2 id="jenkins常用命令"><a class="header-anchor" href="#jenkins常用命令" aria-hidden="true">#</a> jenkins常用命令</h2><p><strong>jenkins目录</strong></p><p>jenkins安装目录：/var/lib/jenkins</p><p>jenkins日志目录：/var/log/jenkins/jenkins.log</p><p>jenkins默认配置：/etc/default/jenkins</p><p>jenkins默认工作区：/var/lib/jenkins/workspace/</p><p><strong>jenkins常用命令</strong></p><ul><li>启动：<code>service jenkins start</code></li><li>重启：<code>service jenkins restart</code></li><li>停止：<code>service jenkins stop</code></li><li>启动之后检查jenkins：<code>ps -def | grep java</code></li></ul><p><strong>浏览器进入jenkins</strong></p><ul><li>登录：localhost:8080</li><li>关闭：localhost:8080/exit</li><li>重启：localhost:8080/restart</li><li>重新加载配置：localhost:8080/reload</li></ul><h2 id="部署在线版vscode"><a class="header-anchor" href="#部署在线版vscode" aria-hidden="true">#</a> 部署在线版VScode</h2><p><code>code-server</code>官网链接：<a href="https://github.com/cdr/code-server/releases" target="_blank" rel="noopener noreferrer">https://github.com/cdr/code-server/releases</a></p><h3 id="拉取代码"><a class="header-anchor" href="#拉取代码" aria-hidden="true">#</a> 拉取代码</h3><p>直接放linux后台拉取（可以输入ll即时查看文件大小）：</p><div class="language-bash"><pre><code><span class="token function">wget</span> -bc -t <span class="token number">20</span> https://www.ivdone.top/wordpress/pic/p662/code-server-3.2.0-linux-x86_64.tar.gz\n\n<span class="token comment"># 之后解压</span>\n<span class="token function">tar</span> -zxvf code-server-3.2.0-linux-x86_64.tar.gz\n<span class="token comment"># 进入该目录</span>\n<span class="token builtin class-name">cd</span> code-server-3.2.0-linux-x86_64/\n</code></pre></div><h3 id="设置密码"><a class="header-anchor" href="#设置密码" aria-hidden="true">#</a> 设置密码</h3><div class="language-shell"><pre><code><span class="token comment"># 设置web登录密码</span>\n<span class="token function">vi</span> ~/.bashrc\n<span class="token comment"># 在该文件的末端导出环境变量，xxxxxx为你自己设置的登录密码，保存</span>\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">PASSWORD</span><span class="token operator">=</span><span class="token string">&quot;xxxxxx&quot;</span>\n<span class="token comment"># 更新环境变量</span>\n<span class="token builtin class-name">source</span> ~/.bashrc\n</code></pre></div><h3 id="运行"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h3><div class="language-shell"><pre><code><span class="token comment"># 检查端口是否被占用，注意Linux防火墙要开放该端口</span>\n<span class="token function">lsof</span> -i:8080\n<span class="token comment"># 前台运行，使能了登录密码</span>\n./code-server --host <span class="token number">0.0</span>.0.0 --port <span class="token number">8080</span> --auth password\n<span class="token comment"># 后台运行</span>\n<span class="token function">nohup</span> ./code-server --host <span class="token number">0.0</span>.0.0 --port <span class="token number">8080</span> --auth password <span class="token operator">&amp;</span>\n</code></pre></div><p>之后可以直接访问了，然后部署nginx即可；</p>',58);l.render=function(s,a,l,c,i,p){return e(),n("div",null,[o])};export default l;export{a as __pageData};
