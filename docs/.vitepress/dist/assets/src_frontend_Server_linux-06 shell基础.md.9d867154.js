import{o as s,c as a,d as n}from"./app.f43337b9.js";const e='{"title":"linux-06 shell基础","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、shell基础","slug":"一、shell基础"},{"level":3,"title":"控制字符","slug":"控制字符"},{"level":3,"title":"输出颜色","slug":"输出颜色"},{"level":3,"title":"输入内容到文件","slug":"输入内容到文件"},{"level":3,"title":"执行shell脚本","slug":"执行shell脚本"},{"level":3,"title":"输出重定向","slug":"输出重定向"},{"level":3,"title":"输入重定向","slug":"输入重定向"},{"level":3,"title":"多命令顺序","slug":"多命令顺序"},{"level":3,"title":"通配符","slug":"通配符"},{"level":3,"title":"本地变量（只在当前变量生效）","slug":"本地变量（只在当前变量生效）"},{"level":3,"title":"环境变量（在所有变量生效）","slug":"环境变量（在所有变量生效）"},{"level":3,"title":"位置参数变量","slug":"位置参数变量"},{"level":3,"title":"预定义变量","slug":"预定义变量"},{"level":3,"title":"接收键盘输入","slug":"接收键盘输入"},{"level":3,"title":"数值运算符","slug":"数值运算符"},{"level":3,"title":"expr或let数值运算工具","slug":"expr或let数值运算工具"},{"level":2,"title":"二、字符截取命令","slug":"二、字符截取命令"},{"level":3,"title":"cut字段提取命令","slug":"cut字段提取命令"},{"level":3,"title":"printf命令","slug":"printf命令"},{"level":3,"title":"awk命令","slug":"awk命令"},{"level":3,"title":"sed命令","slug":"sed命令"},{"level":2,"title":"三、字符处理命令","slug":"三、字符处理命令"},{"level":3,"title":"排序命令sort","slug":"排序命令sort"},{"level":3,"title":"统计命令wc","slug":"统计命令wc"}],"relativePath":"src\\\\frontend\\\\Server\\\\linux-06 shell基础.md","lastUpdated":1612089669869}',l={},t=n('<h1 id="linux-06-shell基础"><a class="header-anchor" href="#linux-06-shell基础" aria-hidden="true">#</a> linux-06 shell基础</h1><h2 id="一、shell基础"><a class="header-anchor" href="#一、shell基础" aria-hidden="true">#</a> 一、shell基础</h2><p><code>echo -e</code> 支持反斜线控制的字符转换</p><h3 id="控制字符"><a class="header-anchor" href="#控制字符" aria-hidden="true">#</a> 控制字符</h3><ul><li><code>\\\\</code> 输出\\本身</li><li><code>\\b</code> 退格键</li><li><code>\\e</code> ESCAPE键</li><li><code>\\f</code>换页符</li><li><code>\\n</code>换行符</li><li><code>\\r</code> 回车符</li><li><code>\\t</code> 制表符(tab键)</li><li><code>\\0nnn</code> (nnn三位八进制)</li><li><code>\\xhh</code> 按照十六进制</li></ul><h3 id="输出颜色"><a class="header-anchor" href="#输出颜色" aria-hidden="true">#</a> 输出颜色</h3><p><code>echo -e &quot;\\e[1;31m abcd \\e[0m&quot;</code></p><p>30m黑色、31m红色、32m绿色、33m黄色、34m蓝色、35m洋色 、36m青色、37m白色</p><h3 id="输入内容到文件"><a class="header-anchor" href="#输入内容到文件" aria-hidden="true">#</a> 输入内容到文件</h3><ul><li>覆盖：<code>echo &#39;content&#39; &gt; a.txt</code></li><li>追加：<code>echo &#39;string&#39; &gt;&gt; a.txt</code></li></ul><h3 id="执行shell脚本"><a class="header-anchor" href="#执行shell脚本" aria-hidden="true">#</a> 执行shell脚本</h3><ul><li><code>chmod 755 hello.sh</code></li><li><code>./hello.sh</code></li><li><code>bash hello.sh</code></li></ul><h3 id="输出重定向"><a class="header-anchor" href="#输出重定向" aria-hidden="true">#</a> 输出重定向</h3><ul><li><code>命令 &gt; 文件 2&gt;&amp;1</code> 以覆盖方式 把正确和错误输入到一个文件</li><li><code>命令 &gt;&gt; 文件 2&gt;&amp;</code> 以追加方式 把正确和错误输入到一个文件</li><li><code>命令 &amp;&gt; 文件</code> 以覆盖方式 把正确和错误输入到一个文件</li><li><code>命令 &amp;&gt;&gt; 文件</code> 以追加方式 把正确和错误输入到一个文件</li><li><code>命令&gt;&gt;文件1 2&gt;&gt;文件2</code> 把正确追加到1 错误追加到2</li></ul><h3 id="输入重定向"><a class="header-anchor" href="#输入重定向" aria-hidden="true">#</a> 输入重定向</h3><p><code>wc 选项 文件名</code> <code>-c</code>统计字节 <code>-w</code>统计单词 <code>-l</code>统计行数</p><h3 id="多命令顺序"><a class="header-anchor" href="#多命令顺序" aria-hidden="true">#</a> 多命令顺序</h3><p>命令 ; 命令 ; 命令 多命令执行</p><div class="language-bash"><pre><code><span class="token function">date</span> <span class="token punctuation">;</span> <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>输入文件 <span class="token assign-left variable">of</span><span class="token operator">=</span>输出文件 <span class="token assign-left variable">bs</span><span class="token operator">=</span>字节数 <span class="token assign-left variable">count</span><span class="token operator">=</span>个数 <span class="token punctuation">;</span> <span class="token function">date</span> 计算复制速度\n</code></pre></div><ul><li><code>&amp;&amp;</code>：逻辑与，第一条执行再执行第二条</li><li><code>||</code>：逻辑或 ，第一条错误执行第二条 第一条正确不执行第二条</li><li>判断命令是否正确：命令 &amp;&amp; echo yes || echo no</li><li>命令1的正确输出作为命令2的操作对象：命令 | 命令2</li></ul><h3 id="通配符"><a class="header-anchor" href="#通配符" aria-hidden="true">#</a> 通配符</h3><ul><li><code>?</code>单个字符</li><li><code>*</code>包含任意字符</li><li><code>[a-z]a-z</code>的字符</li><li><code>[^a-z]</code>只有数字 没有字母</li><li><code>&#39;&#39;</code>没有特殊意义</li><li><code>&quot;&quot;</code>有特殊含义</li><li>``直接执行命令</li><li><code>$()</code>和反引号一样</li><li><code>#</code>注释</li><li><code>$</code>调用变量</li><li><code>\\</code>转意符</li></ul><h3 id="本地变量（只在当前变量生效）"><a class="header-anchor" href="#本地变量（只在当前变量生效）" aria-hidden="true">#</a> 本地变量（只在当前变量生效）</h3><p>本地变量定义：name=sc</p><ul><li>变量叠加 <ul><li><code>aa=&quot;$aa&quot;456</code></li><li>``aa=${aa}789`</li></ul></li><li><code>set</code> 变量查看</li><li><code>unset 变量</code> 变量删除</li><li><code>echo $name</code> 调用变量 变量前加$</li></ul><h3 id="环境变量（在所有变量生效）"><a class="header-anchor" href="#环境变量（在所有变量生效）" aria-hidden="true">#</a> 环境变量（在所有变量生效）</h3><ul><li><p><code>pstree</code> 查看当前变量等级</p></li><li><p><code>export age=18</code> 定义环境变量</p></li><li><p><code>env</code> 查看环境变量</p></li><li><p><code>echo $PATH</code> 查找系统命令路劲</p></li><li><p><code>PS1</code> 定义系统提示符的变量</p><p><code>PS1=&#39;[\\u@\\t \\W]\\$ &#39;</code> -t时间 -u用户 -h主机名 -W显示最后一个目录 $提示符</p></li></ul><h3 id="位置参数变量"><a class="header-anchor" href="#位置参数变量" aria-hidden="true">#</a> 位置参数变量</h3><ul><li><code>$n</code> $0代表命令本身 $1-$9代表第1-9个参数 十以上的表达${10}</li><li><code>$*</code> 所有参数 看成整个参数</li><li><code>$@</code> 所有参数 看成单个参数</li><li><code>$#</code> 代表多少个参数</li></ul><h3 id="预定义变量"><a class="header-anchor" href="#预定义变量" aria-hidden="true">#</a> 预定义变量</h3><ul><li><p><code>$?</code> 返回结果0正确执行 返回非0错误执行</p></li><li><p><code>$$</code> 当前进程的进程号pid</p></li><li><p><code>$!</code> 最后一个进程后台pid</p></li><li><p><code>&amp;</code> 放入后台</p></li></ul><h3 id="接收键盘输入"><a class="header-anchor" href="#接收键盘输入" aria-hidden="true">#</a> 接收键盘输入</h3><p>read 选项 变量名 -p &quot;提示信息&quot; 输入提示信息 -t 秒数 -n 字符数 -s 隐藏字符</p><h3 id="数值运算符"><a class="header-anchor" href="#数值运算符" aria-hidden="true">#</a> 数值运算符</h3><p>declare [+/-]选项 变量名</p><ul><li><code>-</code> 设定变量属性</li><li><code>+</code> 取消变量属性</li><li><code>-i</code> 声明变量整形</li><li><code>-x</code> 声明环境变量</li><li><code>-p</code> 查看变量类型</li></ul><div class="language-bash"><pre><code><span class="token builtin class-name">declare</span> -i <span class="token assign-left variable">cc</span><span class="token operator">=</span><span class="token variable">$aa</span>+<span class="token variable">$bb</span>\n</code></pre></div><h3 id="expr或let数值运算工具"><a class="header-anchor" href="#expr或let数值运算工具" aria-hidden="true">#</a> expr或let数值运算工具</h3><div class="language-bash"><pre><code><span class="token assign-left variable">dd</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> $aa+$bb<span class="token variable">)</span></span>\n<span class="token builtin class-name">let</span> <span class="token assign-left variable">hh</span><span class="token operator">=</span><span class="token variable">$aa</span>+<span class="token variable">$bb</span>\n<span class="token assign-left variable">ff</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span> $aa<span class="token operator">+</span>$bb <span class="token variable">))</span></span>\n<span class="token assign-left variable">gg</span><span class="token operator">=</span>$<span class="token punctuation">[</span> <span class="token variable">$aa</span>+<span class="token variable">$bb</span> <span class="token punctuation">]</span>\n\n<span class="token assign-left variable">bb</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span> <span class="token number">14</span><span class="token operator">%</span><span class="token number">3</span> <span class="token variable">))</span></span> <span class="token comment"># 得余数</span>\n<span class="token assign-left variable">cc</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span> <span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token number">0</span> <span class="token variable">))</span></span> <span class="token comment"># 逻辑与运算</span>\n</code></pre></div><h2 id="二、字符截取命令"><a class="header-anchor" href="#二、字符截取命令" aria-hidden="true">#</a> 二、字符截取命令</h2><p>student.txt内容如下：</p><div class="language-bash"><pre><code><span class="token function">vi</span> student.txt\n\nID Name PHP Linux MySQL Average\n<span class="token number">1</span> Liming <span class="token number">82</span> <span class="token number">95</span> <span class="token number">86</span> <span class="token number">87.66</span>\n<span class="token number">2</span> Sc <span class="token number">74</span> <span class="token number">96</span> <span class="token number">87</span> <span class="token number">85.66</span>\n<span class="token number">3</span> Gao <span class="token number">99</span> <span class="token number">83</span> <span class="token number">93</span> <span class="token number">91.66</span>\n</code></pre></div><h3 id="cut字段提取命令"><a class="header-anchor" href="#cut字段提取命令" aria-hidden="true">#</a> cut字段提取命令</h3><p><code>cut [选项] 文件名</code></p><ul><li><code>-f 列号</code>：提取第几列</li><li><code>-d 分隔符</code>：按照指定分隔符分割列</li></ul><div class="language-bash"><pre><code><span class="token function">cut</span> -f <span class="token number">2</span> student.txt\n<span class="token function">cut</span> -f <span class="token number">2,3</span> student.txt\n<span class="token function">cut</span> -d <span class="token string">&#39;:&#39;</span> -f <span class="token number">1,3</span> /etc/passwd\n\n<span class="token comment">#cut命令的局限</span>\n<span class="token function">df</span> -h <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">&quot; &quot;</span> -f <span class="token number">1,3</span>\n</code></pre></div><h3 id="printf命令"><a class="header-anchor" href="#printf命令" aria-hidden="true">#</a> printf命令</h3><p><code>printf &#39;[输出类型输出格式]&#39; 输出内容</code></p><ul><li><code>%ns</code>：输出字符串，n指代输出几个字符</li><li><code>%ni</code>：输出整数n指代输出几个字符</li><li><code>%m.nf</code>：输出浮点数，m和n是数字，指代输出的整数和小数，%8.2f代表共输出8位数，2位小数，6位整数；</li></ul><p>输出格式：</p><ul><li><code>\\a</code>：输出警告声音</li><li><code>\\b</code>：输出退格键</li><li><code>\\f</code>：清除屏幕</li><li><code>\\n</code>：换行</li><li><code>\\r</code>：回车</li><li><code>\\t</code>：水平输出退格，tab键</li><li><code>\\v</code>：垂直输出退格，tab键</li></ul><div class="language-bash"><pre><code><span class="token builtin class-name">printf</span> <span class="token string">&#39;%s %s %s <span class="token entity" title="\\n">\\n</span>&#39;</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span>\n</code></pre></div><p>在awt命令的输出中支持print和printf命令：</p><ul><li>print：print会在每个输出之后自动加入一个换行符（linux默认没有print命令）</li><li>printf：printf是标准格式输出命令，并不会自动加入换行符，如果需要换行需要手工加入换行符；</li></ul><h3 id="awk命令"><a class="header-anchor" href="#awk命令" aria-hidden="true">#</a> awk命令</h3><p><code>awk &#39;条件1{动作1} 条件2{动作2}...&#39; 文件名</code></p><p>条件：一般使用关系表达式作为条件</p><ul><li>x &gt; 10 ：判断变量x是否大于10</li><li>x &gt;= 10</li><li>x &lt;= 10</li></ul><p>动作：</p><ul><li>格式化输出</li><li>流程控制语句</li></ul><div class="language-bash"><pre><code><span class="token function">awk</span> <span class="token string">&#39;{printf <span class="token variable">$2</span> &quot;<span class="token entity" title="\\t">\\t</span>&quot; <span class="token variable">$6</span> &quot;<span class="token entity" title="\\n">\\n</span>&quot;}&#39;</span> student.txt\n<span class="token function">df</span> -h <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print <span class="token variable">$1</span> &quot;<span class="token entity" title="\\t">\\t</span>&quot; <span class="token variable">$3</span>}&#39;</span>\n</code></pre></div><p>BEGIN</p><div class="language-bash"><pre><code><span class="token function">awk</span> <span class="token string">&#39;BEGIN{printf &quot;This is a transcript <span class="token entity" title="\\n">\\n</span>&quot;} {printf <span class="token variable">$2</span> &quot;<span class="token entity" title="\\t">\\t</span>&quot; <span class="token variable">$6</span> &quot;<span class="token entity" title="\\n">\\n</span>&quot;}&#39;</span> student.txt\n</code></pre></div><p>END</p><div class="language-bash"><pre><code><span class="token function">awk</span> <span class="token string">&#39;END{printf &quot;the end <span class="token entity" title="\\n">\\n</span>&quot;}{printf <span class="token variable">$2</span> &quot;<span class="token entity" title="\\t">\\t</span>&quot; <span class="token variable">$6</span> &quot;<span class="token entity" title="\\n">\\n</span>&quot;}&#39;</span> student.txt\n</code></pre></div><p>FS内置变量</p><div class="language-bash"><pre><code><span class="token function">cat</span> /etc/passwd <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;/bin/bash&quot;</span> <span class="token operator">|</span> <span class="token punctuation">\\</span>\n<span class="token function">awk</span> <span class="token string">&#39;BEGIN {FS=&quot;:&quot;} {printf <span class="token variable">$1</span> &quot;<span class="token entity" title="\\t">\\t</span>&quot; <span class="token variable">$3</span> &quot;<span class="token entity" title="\\n">\\n</span>&quot;}&#39;</span>\n</code></pre></div><p>关系运算符</p><div class="language-bash"><pre><code><span class="token function">cat</span> student.txt <span class="token operator">|</span> <span class="token function">grep</span> -v Name <span class="token operator">|</span> <span class="token punctuation">\\</span>\n<span class="token function">awk</span> <span class="token string">&#39;<span class="token variable">$6</span> &gt;= 87 {printf <span class="token variable">$2</span> &quot;<span class="token entity" title="\\n">\\n</span>&quot;}&#39;</span>\n</code></pre></div><h3 id="sed命令"><a class="header-anchor" href="#sed命令" aria-hidden="true">#</a> sed命令</h3><p>sed是一种几乎包括在所有UNIX平台（包括Linux）的轻量级流编辑器，sed主要是用来将数据进行选取、替换、删除、新增的命令</p><p><code>sed [选项] &#39;[动作]&#39; 文件名</code></p><ul><li><code>-n</code>：一般sed命令会把所有的数据都输出到屏幕，如果加入此选择，则只会把经过sed命令处理的行输出到屏幕</li><li><code>-e</code>：允许对输入数据应用多条sed命令编辑</li><li><code>-i</code>：用sed的修改结果直接修改读取数据的文件，而不是屏幕输出</li></ul><p>动作：</p><ul><li><code>a \\</code>： 追加，在当前行后添加一行或多行。添加多行时，除最后 一行 外，每行末尾需要用“\\”代表数据未完结。</li><li><code>c \\</code>： 行替换，用c后面的字符串替换原数据行，替换多行时，除最 后一行外，每行末尾需用“\\”代表数据未完结。</li><li><code>i \\</code>： 插入，在当期行前插入一行或多行。插入多行时，除最后 一行 外，每行末尾需要用“\\”代表数据未完结。</li><li><code>d</code>： 删除，删除指定的行。</li><li><code>p</code>： 打印，输出指定的行。</li><li><code>s</code>： 字串替换，用一个字符串替换另外一个字符串。格式为“行范 围s/旧字串/新字串/g”（和vim中的替换格式类似）</li></ul><p>学生成绩表</p><div class="language-bash"><pre><code><span class="token function">vi</span> student.txt\nID Name PHP Linux MySQL Average\n<span class="token number">1</span> Liming <span class="token number">82</span> <span class="token number">95</span> <span class="token number">86</span> <span class="token number">87.66</span>\n<span class="token number">2</span> Sc <span class="token number">74</span> <span class="token number">96</span> <span class="token number">87</span> <span class="token number">85.66</span>\n<span class="token number">3</span> Gao <span class="token number">99</span> <span class="token number">83</span> <span class="token number">93</span> <span class="token number">91.66</span>\n</code></pre></div><p>行数据操作</p><div class="language-bash"><pre><code><span class="token comment"># 查看第2行</span>\n<span class="token function">sed</span> <span class="token string">&#39;2p&#39;</span> student.txt\n<span class="token function">sed</span> -n <span class="token string">&#39;2p&#39;</span> student.txt\n\n<span class="token comment"># 删除第二行到第四行的数据，但不修改文件本身</span>\n<span class="token function">sed</span> <span class="token string">&#39;2,4d&#39;</span> student.txt\n\n<span class="token comment"># 在第二行后追加hello</span>\n<span class="token function">sed</span> <span class="token string">&#39;2a hello&#39;</span> student.txt\n\n<span class="token comment"># 在第二行前插入两行数据</span>\n<span class="token function">sed</span> <span class="token string">&#39;2i hello world&#39;</span> student.txt\n\n<span class="token comment"># 数据替换</span>\n<span class="token function">sed</span> <span class="token string">&#39;2c Nosuch person&#39;</span> student.txt\n\n<span class="token comment"># sed操作的数据直接写入文件</span>\n<span class="token function">sed</span> -i <span class="token string">&#39;3s/74/99/g&#39;</span>  student.txt\n\n<span class="token comment">#同时把“ Liming ”和“ Gao ”替换为空</span>\n<span class="token function">sed</span> -e <span class="token string">&#39;s/Liming//g ; s/Gao//g&#39;</span> student.txt\n</code></pre></div><h2 id="三、字符处理命令"><a class="header-anchor" href="#三、字符处理命令" aria-hidden="true">#</a> 三、字符处理命令</h2><h3 id="排序命令sort"><a class="header-anchor" href="#排序命令sort" aria-hidden="true">#</a> 排序命令sort</h3><p><code>sort [选项] 文件名</code></p><ul><li><code>-f</code>： 忽略大小写</li><li><code>-n</code>： 以数值型进行排序，默认使用字符串型排序</li><li><code>-r</code>： 反向排序</li><li><code>-t</code>： 指定分隔符，默认是分隔符是制表符</li><li><code>-k n[,m]</code>： 按照指定的字段范围排序。从第n字段开始， m字段结束（默认到行尾</li></ul><div class="language-bash"><pre><code><span class="token function">sort</span> /etc/passwd\n<span class="token function">sort</span> -r /etc/passwd\n\n<span class="token comment"># 指定分隔符是“：”，用第三字段开头，第三字段结尾排序，就是只用第三字段排序</span>\n<span class="token function">sort</span> -t <span class="token string">&quot;:&quot;</span> -k <span class="token number">3,3</span> /etc/passwd\n</code></pre></div><h3 id="统计命令wc"><a class="header-anchor" href="#统计命令wc" aria-hidden="true">#</a> 统计命令wc</h3><p><code>wc [选项] 文件名</code></p><ul><li><code>-l</code>： 只统计行数</li><li><code>-w</code>： 只统计单词数</li><li><code>-m</code>： 只统计字符数</li></ul>',87);l.render=function(n,e,l,o,c,p){return s(),a("div",null,[t])};export default l;export{e as __pageData};
