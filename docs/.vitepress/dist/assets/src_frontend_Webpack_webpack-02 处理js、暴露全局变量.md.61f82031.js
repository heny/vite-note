import{o as n,c as s,d as a}from"./app.dc9dbd0c.js";const p='{"title":"Webpack-02 处理js、暴露全局变量","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、处理js","slug":"一、处理js"},{"level":2,"title":"二、安装eslint","slug":"二、安装eslint"},{"level":2,"title":"三、暴露全局变量","slug":"三、暴露全局变量"},{"level":2,"title":"四、打包图片","slug":"四、打包图片"},{"level":2,"title":"五、打包文件分类","slug":"五、打包文件分类"}],"relativePath":"src\\\\frontend\\\\Webpack\\\\webpack-02 处理js、暴露全局变量.md","lastUpdated":1612089669898}',e={},t=a('<h1 id="webpack-02-处理js、暴露全局变量"><a class="header-anchor" href="#webpack-02-处理js、暴露全局变量" aria-hidden="true">#</a> Webpack-02 处理js、暴露全局变量</h1><h2 id="一、处理js"><a class="header-anchor" href="#一、处理js" aria-hidden="true">#</a> 一、处理js</h2><ol><li>安装<code>babel</code>、<code>babel-loader</code></li></ol><p><code>@babel/core</code> // babel核心模块，</p><p><code>@babel/preset-env</code> // 转化模块,转化成标准、js语法</p><div class="language-cmd"><pre><code>yarn add babel-loader @babel/core @babel/preset-env -D\n</code></pre></div><ol start="2"><li>配置</li></ol><div class="language-js"><pre><code>rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 映射</span>\n                presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><ol start="3"><li>es6类写法打包，babel官网搜索decorators可以查看在线教程</li></ol><p>yarn add @babel/plugin-proposal-class-properties -D</p><div class="language-js"><pre><code>rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 映射</span>\n                presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                <span class="token comment">// 配置小插件</span>\n                plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n                    <span class="token string">&#39;@babel/plugin-proposal-class-properties&#39;</span>\n                <span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        include<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 仅查找src</span>\n        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>  <span class="token comment">// 排除node_modules</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><ol start="4"><li>类的装饰器</li></ol><p>安装：yarn add @babel/plugin-proposal-decorators -D</p><div class="language-js"><pre><code><span class="token punctuation">{</span> <span class="token string">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> \n    <span class="token punctuation">[</span><span class="token string">&quot;@babel/plugin-proposal-decorators&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&quot;legacy&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \n    <span class="token punctuation">[</span><span class="token string">&quot;@babel/plugin-proposal-class-properties&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&quot;loose&quot;</span> <span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> \n<span class="token punctuation">]</span> <span class="token punctuation">}</span>\n</code></pre></div><ol start="5"><li>节省代码大小，抽离公共的代码，使用generator语法</li></ol><p>（1）<code>yarn add @babel/plugin-transform-runtime -D</code>， transform-runtime可以抽离webpack打包公共的代码；</p><p>yarn add @babel/runtime -S，runtime针对运行时的，需要装在生产依赖</p><div class="language-json"><pre><code><span class="token punctuation">{</span> <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/plugin-transform-runtime&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n</code></pre></div><p>（2）yarn add @babel/polyfill , 解析es7语法，includes在打包之后会自动添加一个Array的原型上；</p><div class="language-js"><pre><code><span class="token function">require</span><span class="token punctuation">(</span>&#39;@babel<span class="token operator">/</span>polyfill<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token string">&#39;aaa&#39;</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="二、安装eslint"><a class="header-anchor" href="#二、安装eslint" aria-hidden="true">#</a> 二、安装eslint</h2><p>（1）yarn add eslint eslint-loader -D</p><p>（2）修改rules</p><div class="language-js"><pre><code>rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// loader规则可以写多少, 与babel得分开一个对象</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">&#39;eslint-loader&#39;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        enforce<span class="token operator">:</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 强制在其他的loader之前执行</span>\n        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>   <span class="token comment">// 所有解析js都会找node_modules</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><p>（3）到eslint官网下载<code>.eslintrc.json</code>文件放到项目根目录；</p><h2 id="三、暴露全局变量"><a class="header-anchor" href="#三、暴露全局变量" aria-hidden="true">#</a> 三、暴露全局变量</h2><p>loader类型：</p><pre><code>pre 前面执行的loader，\n\nnormal 普通loader ，\n\n内联loader，\n\n后置postloader\n</code></pre><p>yarn add jquery</p><p>yarn add expose-loader -D</p><div class="language-js"><pre><code>rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    test<span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    use<span class="token operator">:</span> <span class="token string">&#39;expose-loader?$&#39;</span> <span class="token comment">//将jquery作为$符挂载到全局</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre></div><p>（2）在每个模块都注入jquery，在webpack.config.js下面的plugins写入</p><div class="language-js"><pre><code><span class="token keyword">let</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token string">&#39;$&#39;</span><span class="token operator">:</span> <span class="token string">&#39;jquery&#39;</span> <span class="token comment">//将jquery作为$符暴露出去, 之后就可以在项目中使用$符了</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n        jquery<span class="token operator">:</span> <span class="token string">&#39;$&#39;</span> <span class="token comment">// 加上之后在项目中即使引入import jquery都不会继续被打包了</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>（3）除了上述方法，当然也可以使用cdn放在html文件里面</p><h2 id="四、打包图片"><a class="header-anchor" href="#四、打包图片" aria-hidden="true">#</a> 四、打包图片</h2><ol><li>解析js的img</li></ol><p>安装yarn add file-loader -D</p><p>默认会保存图片到build目录下，图片必须使用require或import导入才会被打包，否则会默认为一个字符串，当使用background-img不需要require，因为css-loader会自己转化require；</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    module<span class="token operator">:</span> <span class="token punctuation">{</span>\n        rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpg|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n                use<span class="token operator">:</span> <span class="token string">&#39;file-loader&#39;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="2"><li>解析html标签的img</li></ol><p>安装：yarn add html-withimg-loader -D</p><div class="language-js"><pre><code>rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    use<span class="token operator">:</span> <span class="token string">&#39;html-withimg-loader&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre></div><ol start="3"><li>将图片转化base64引入</li></ol><p>安装 yarn add url-loader -D</p><p>当转换base64之后就不会加载http的请求了，但文件会比原文件大三分之一</p><div class="language-js"><pre><code>rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpg|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    <span class="token comment">// 做限制：当小于多少k时使用base64</span>\n    use<span class="token operator">:</span> <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">&#39;url-loader&#39;</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n            limit<span class="token operator">:</span> <span class="token number">200</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">,</span>    <span class="token comment">//字节单位 当小于200k则转化base64,</span>\n            outputPath<span class="token operator">:</span> <span class="token string">&#39;/img/&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 在打包后将图片输出到img目录下;</span>\n            fallback<span class="token operator">:</span> <span class="token string">&#39;file-loader&#39;</span> <span class="token comment">// 当超过200k则使用file-loader处理</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre></div><ol start="4"><li>图片优化</li></ol><p>使用imagemin-webpack-plugin可以压缩图片</p><p>使用webpack-spritesmith 插件制作雪碧图</p><h2 id="五、打包文件分类"><a class="header-anchor" href="#五、打包文件分类" aria-hidden="true">#</a> 五、打包文件分类</h2><ol><li>在loader里面配置，在输出的文件名可以直接加一个路径，如：&#39;css/1.css&#39;，</li><li>给所有的css或img添加统一的引入地址</li></ol><div class="language-js"><pre><code>output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>\n    publicPath<span class="token operator">:</span> <span class="token string">&#39;http://baidu.com&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="3"><li>给单独的文件添加统一的引入地址，</li></ol><p>在单独的loader里面添加publicPath即可；</p>',54);e.render=function(a,p,e,o,l,c){return n(),s("div",null,[t])};export default e;export{p as __pageData};
