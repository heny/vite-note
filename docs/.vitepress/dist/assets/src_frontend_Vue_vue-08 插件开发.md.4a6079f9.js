import{o as n,c as s,d as a}from"./app.f43337b9.js";const t='{"title":"Vue-09 插件开发","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、创建自己的插件","slug":"一、创建自己的插件"},{"level":2,"title":"二、发布到npm","slug":"二、发布到npm"},{"level":3,"title":"npm初始化","slug":"npm初始化"},{"level":3,"title":"忽略文件不上传","slug":"忽略文件不上传"},{"level":3,"title":"上传","slug":"上传"},{"level":3,"title":"自动修改版本号","slug":"自动修改版本号"},{"level":2,"title":"三、Vue.extend","slug":"三、vue-extend"},{"level":3,"title":"开发一个loading全局组件","slug":"开发一个loading全局组件"},{"level":2,"title":"遇到的bug：","slug":"遇到的bug："}],"relativePath":"src\\\\frontend\\\\Vue\\\\vue-08 插件开发.md","lastUpdated":1612089669894}',p={},o=a('<h1 id="vue-09-插件开发"><a class="header-anchor" href="#vue-09-插件开发" aria-hidden="true">#</a> Vue-09 插件开发</h1><h2 id="一、创建自己的插件"><a class="header-anchor" href="#一、创建自己的插件" aria-hidden="true">#</a> <strong>一、创建自己的插件</strong></h2><ul><li>目录结构 <ol><li>lib下面是我们所有的插件，创建一个新的插件名叫heny；</li><li>heny下的目录是lib和index.js还有一个test.vue文件；</li></ol></li></ul><p><img src="https://notecdn.heny.vip/images/vue-09_%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91.png" alt="image-20200406215427082"></p><ul><li><p>在heny/index.js文件写入</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./lib&#39;</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>在heny/lib/index.js写入以下代码</p><div class="language-js"><pre><code><span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">&#39;./test.vue&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Vue.use默认使用install方法</span>\n    <span class="token comment">// 第一个参数是Vue, 第二个参数是选项</span>\n    <span class="token function">install</span> <span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> test<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>在test.vue文件可以写我们的公共组件代码了</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>test<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>\n    哈哈, 这是我的新插件\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;test&#39;</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>scss<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li><li><p>在main.js主入口文件引入创建好的test插件</p><div class="language-js"><pre><code><span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">&#39;./lib/heny&#39;</span>\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>\n</code></pre></div></li><li><p>直接在App.vue将标签放入，就可以直接使用了</p></li></ul><h2 id="二、发布到npm"><a class="header-anchor" href="#二、发布到npm" aria-hidden="true">#</a> 二、发布到npm</h2><h3 id="npm初始化"><a class="header-anchor" href="#npm初始化" aria-hidden="true">#</a> npm初始化</h3><p>进入lib/heny文件夹，并执行npm init命令</p><ul><li><code>name</code>：包名，默认就是文件夹名字，但是这个名字是需要唯一的，如果你命的名字已经被使用过了，那就只能换个名字。查看是否被用，可以直接输入npm view 包名，如果报错即被使用</li><li><code>version</code>：包的版本，默认是1.0.0， 你可以更换，例如0.1.0或2.0.1等。</li><li><code>description</code>：包的描述。主要描述你的包是用来做什么的。</li><li><code>entry point</code>：包入口文件，默认是Index.js，可以自定义。</li><li><code>test command</code>：测试命令，这个直接回车就好了，因为目前还不需要这个。</li><li><code>git repository</code>：包的git仓库地址，npm自动读取.git目录作为这一项的默认值。没使用则回车略过。</li><li><code>keyword</code>：包的关键词。该项会影响到用户怎样才能搜到你的包，可以理解为搜索引擎悠哈的关键词。建议关键词要能准确描述你的包，例如：&quot;vpay vue-pay vue-password password&quot;</li><li><code>author</code>：作者。例如你的npm账号或者github账号</li><li><code>license</code>：开源协议，回车就好。</li></ul><h3 id="忽略文件不上传"><a class="header-anchor" href="#忽略文件不上传" aria-hidden="true">#</a> 忽略文件不上传</h3><p>创建<code>.npmignore</code>文件，和<code>.gitignore</code>差不多，希望哪些不发到npm包上面；</p><h3 id="上传"><a class="header-anchor" href="#上传" aria-hidden="true">#</a> 上传</h3><ol><li><p>测试插件是否可以上传到npm网上；</p><p>因为main.js引入时，都是从node_modules引入的，因此将lib/heny直接放入node_modules中，再引入的时候直接写：</p><div class="language-js"><pre><code><span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">&#39;heny&#39;</span>\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>\n</code></pre></div><p>测试通过之后就可以直接开始发布到npmjs网上了；</p></li><li><p>注册npm账号</p><p>注册地址：<a href="https://www.npmjs.com/signup" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/signup</a></p></li><li><p>登录npm账号</p><p>如果有设置了淘宝镜像需要先设置回镜像</p><div class="language-js"><pre><code>npm config <span class="token keyword">set</span> registry http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npmjs<span class="token punctuation">.</span>org\n</code></pre></div><p>之后执行npm login命令登录npm；</p><p><img src="https://notecdn.heny.vip/images/vue-09_%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91_02.png" alt="image-20200406220434803"></p></li><li><p>进入到项目的根目录，直接输入npm publish就发布成功了，直接到npmjs官网搜索包的name名字就有了；当然也可以直接在项目npm i 名字；</p><p><img src="https://notecdn.heny.vip/images/vue-09_%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91_03.png" alt="image-20200406220541606"></p><p>注意：第二次发布时，必须修改version版本号才能发布，否则会报错；</p></li></ol><h3 id="自动修改版本号"><a class="header-anchor" href="#自动修改版本号" aria-hidden="true">#</a> 自动修改版本号</h3><p>npm version &lt;update_type&gt;</p><p>type值为：</p><ul><li>patch 0.0.</li><li>minor 1.*.0</li><li>major *.0.0</li></ul><p>其他npm管理包命令</p><div class="language-js"><pre><code><span class="token comment">// 撤销整个包</span>\nnpm unpublish <span class="token operator">--</span>force 包名\n\n<span class="token comment">// 撤销某个版本</span>\nnpm publish 包名@版本号\n</code></pre></div><h2 id="三、vue-extend"><a class="header-anchor" href="#三、vue-extend" aria-hidden="true">#</a> 三、Vue.extend</h2><blockquote><p>Vue.extend属于Vue的全局API，在实际业务开发中很少使用，因为相比常用Vue.component写法使用extend更加麻烦，用于注册插件使用</p></blockquote><p>使用<code>Vue.extend</code>创建插件，传入一个组件，或者一个对象，里面写对应的组件</p><p>之后使用<code>$mount</code>挂载元素得到<code>$el</code>，将<code>$el</code>添加到<code>body</code>里面即可；</p><div class="language-js"><pre><code><span class="token comment">// 使用vue单组件</span>\n<span class="token keyword">import</span> CodeComponent <span class="token keyword">from</span> <span class="token string">&#39;./CodeComponent.vue&#39;</span>\n<span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>CodeComponent<span class="token punctuation">)</span>\n\n<span class="token comment">// 使用对象</span>\n<span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>这是一个组件<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 挂载到body上</span>\n<span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nvm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$el<span class="token punctuation">)</span>\n</code></pre></div><h3 id="开发一个loading全局组件"><a class="header-anchor" href="#开发一个loading全局组件" aria-hidden="true">#</a> 开发一个loading全局组件</h3><ol><li><p>创建Loading/Loading.vue</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>visible<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      visible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      text<span class="token operator">:</span> <span class="token string">&quot;&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li><li><p>创建Loading/index.js</p><div class="language-js"><pre><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> LoadingComponent <span class="token keyword">from</span> <span class="token string">&#39;./Loading&#39;</span>\n<span class="token keyword">const</span> LoadingConstructor <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>LoadingComponent<span class="token punctuation">)</span> <span class="token comment">// 包装成vue实例</span>\n<span class="token class-name">LoadingConstructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">close</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">false</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Loading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoadingConstructor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        data<span class="token operator">:</span> <span class="token punctuation">{</span>\n            text<span class="token operator">:</span> <span class="token string">&#39;数据加载中...&#39;</span><span class="token punctuation">,</span>\n            <span class="token operator">...</span>options\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    instance<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>$el<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> instance\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> Loading\n</code></pre></div></li><li><p>修改main.js</p><div class="language-js"><pre><code><span class="token keyword">import</span> Loading <span class="token keyword">from</span> <span class="token string">&#39;./Loading&#39;</span>\n<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$loading <span class="token operator">=</span> Loading\n</code></pre></div></li><li><p>在组件中使用</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$loading</span><span class="token punctuation">(</span><span class="token punctuation">{</span>text<span class="token operator">:</span> <span class="token string">&#39;数据加载中&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ol><h2 id="遇到的bug："><a class="header-anchor" href="#遇到的bug：" aria-hidden="true">#</a> 遇到的bug：</h2><ol><li>发布npm包报错： <a href="https://blog.csdn.net/weixin_38080573/article/details/88080556" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/weixin_38080573/article/details/88080556</a></li></ol>',28);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
