import{o as n,c as s,d as a}from"./app.0b9a38dc.js";const p='{"title":"Webpack-04  优化、动态链接库、多线程打包","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、分析包内容","slug":"一、分析包内容"},{"level":2,"title":"二、优化","slug":"二、优化"},{"level":2,"title":"三、dllplugin 动态链接库","slug":"三、dllplugin-动态链接库"},{"level":2,"title":"四、多线程打包","slug":"四、多线程打包"},{"level":2,"title":"五、webpack内置优化项","slug":"五、webpack内置优化项"}],"relativePath":"src\\\\frontend\\\\Webpack\\\\webpack-04  优化、动态链接库、多线程打包.md","lastUpdated":1612089669899}',t={},e=a('<h1 id="webpack-04-优化、动态链接库、多线程打包"><a class="header-anchor" href="#webpack-04-优化、动态链接库、多线程打包" aria-hidden="true">#</a> Webpack-04 优化、动态链接库、多线程打包</h1><h2 id="一、分析包内容"><a class="header-anchor" href="#一、分析包内容" aria-hidden="true">#</a> 一、分析包内容</h2><p>用于查看哪个包占用内容多大</p><ol><li>安装：<code>webpack-bundle-analyzer</code></li></ol><div class="language-cmd"><pre><code>npm install webpack-bundle-analyzer -S\n// or\nyarn add -D webpack-bundle-analyzer\n</code></pre></div><ol start="2"><li>配置webpack.js</li></ol><div class="language-js"><pre><code><span class="token comment">// 分析包内容 </span>\n<span class="token keyword">const</span> BundleAnalyzerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-bundle-analyzer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BundleAnalyzerPlugin<span class="token punctuation">;</span> \nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n plugins<span class="token operator">:</span> <span class="token punctuation">[</span> \n    <span class="token comment">// 开启 BundleAnalyzerPlugin </span>\n    <span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n <span class="token punctuation">]</span><span class="token punctuation">,</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="二、优化"><a class="header-anchor" href="#二、优化" aria-hidden="true">#</a> 二、优化</h2><ol><li><code>noParse</code></li></ol><p>由于包没有引用其他模块，因此使用该方法，不去解析某个包，比如jquery</p><div class="language-js"><pre><code>module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    noParse<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">jquery</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 当引入jquery时，不去解析</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="2"><li><code>exclude &amp; include</code></li></ol><p>exclude不包含某个文件夹，include包含某个文件夹，一般两者使用其一即可，</p><p>一般解析js文件时，也会找node_module，因此需要加上exclude</p><div class="language-js"><pre><code>module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_module</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        include<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="3"><li><code>webpack.IgnorePlugin</code></li></ol><p>忽略包内部引入的所有文件，使用IgnorePlugin配置</p><p>当引入moment时，会默认加载所有的locale文件，因此需要忽略掉，只引入zh-cn文件</p><div class="language-js"><pre><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span><span class="token operator">/</span>\\<span class="token punctuation">.</span>\\<span class="token operator">/</span>locale<span class="token comment">//, /moment/) // 第一个忽略谁, 第二个引入什么的时候</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="三、dllplugin-动态链接库"><a class="header-anchor" href="#三、dllplugin-动态链接库" aria-hidden="true">#</a> 三、dllplugin 动态链接库</h2><p>由于每次打包很慢，因为每次都在对react库重新进行打包，因此需要提取一下</p><ol><li>创建一个新的js文件，并打包一次</li></ol><p>（1）安装clean-webpack-plugin插件，用于清除之前冗余的dll文件</p><p>（1）<code>webpack.config.other.js</code> 名字随意</p><div class="language-js"><pre><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    react<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;react&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//这里写入一些提取的js</span>\n    others<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;axios&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;js-cookie&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 其他的js, 数组里面的值越多, js文件越大, 如果太多可以分开写, 再单独写一个文件</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">&#39;_dll_[name].js&#39;</span><span class="token punctuation">,</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    library<span class="token operator">:</span> <span class="token string">&#39;_dll_[name]&#39;</span> <span class="token comment">//提取名字, 直接取entry的名字react</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 清除之前的dll文件</span>\n    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&#39;_dll_[name]&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 需要和library名字一样</span>\n      path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;manifest.json&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>（2）写完之后就可以运行<code>npx webpack --config webpack.config.other.js</code> 打包一次</p><p>（3）打包之后会看到dist目录下面已经有了，在模板index.html文件里面引入，这个是需要写死的，有多少写多少</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>/_dll_react.js<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>/_dll_other.js<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><ol start="2"><li>修改webpack.config.js文件</li></ol><div class="language-js"><pre><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            manifest<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;manifest.json&#39;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>摘抄： <a href="https://blog.csdn.net/janyxh/article/details/100131082" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/janyxh/article/details/100131082</a></p><h2 id="四、多线程打包"><a class="header-anchor" href="#四、多线程打包" aria-hidden="true">#</a> 四、多线程打包</h2><p>当项目比较大时，可以使用happypack打包，如果项目比较小，使用happypack打包不如原来的打包速度更快</p><ol><li>安装：<code>yarn add happypack</code></li><li>替换rules里面的use规则</li></ol><div class="language-js"><pre><code><span class="token keyword">const</span> Happypack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;happypack&#39;</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    module<span class="token operator">:</span> <span class="token punctuation">{</span>\n        rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">&#39;Happypack/loader?id=js&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 将js传入</span>\n            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">&#39;Happypack/loader?id=css&#39;</span><span class="token punctuation">}</span> <span class="token comment">// 如果是css打包</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">Happypack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            id<span class="token operator">:</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span>\n            <span class="token comment">// 将use以前的配置放在这里</span>\n            use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>\n                options<span class="token operator">:</span> <span class="token punctuation">{</span>presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;@babel/preset-react&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token comment">// 多个再new一次</span>\n        <span class="token keyword">new</span> <span class="token class-name">Happypack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            id<span class="token operator">:</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">,</span>\n            use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><img src="https://upload-images.jianshu.io/upload_images/1967135-2edd36749223cd32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/416/format/webp" alt="img"></p><p>以上显示3个进程为已经开启了打包；</p><h2 id="五、webpack内置优化项"><a class="header-anchor" href="#五、webpack内置优化项" aria-hidden="true">#</a> 五、webpack内置优化项</h2><ol><li><code>tree-shaking</code> 摇晃树</li></ol><p>import引入的代码在生产环境下，会自动去除掉没用的代码，简称tree-shaking，摇晃树</p><ol start="2"><li><code>scope hosting</code> 作用域提升</li></ol><p>在webpack3以上，会自动简化代码，如果声明的过于简洁，比如单个数字，webpack会直接省略掉</p>',42);t.render=function(a,p,t,o,c,l){return n(),s("div",null,[e])};export default t;export{p as __pageData};
