import{o as n,c as s,d as a}from"./app.dc9dbd0c.js";const t='{"title":"node-03 fs文件、shelljs","description":"","frontmatter":{},"headers":[{"level":2,"title":"fs系统","slug":"fs系统"},{"level":2,"title":"一、不完全读写（对大文件操作的，可以分段操作）","slug":"一、不完全读写（对大文件操作的，可以分段操作）"},{"level":3,"title":"对文件操作的方法","slug":"对文件操作的方法"},{"level":3,"title":"常用的文件系统标志","slug":"常用的文件系统标志"},{"level":3,"title":"打开文件","slug":"打开文件"},{"level":3,"title":"读文件","slug":"读文件"},{"level":3,"title":"写入文件","slug":"写入文件"},{"level":3,"title":"文件关闭","slug":"文件关闭"},{"level":2,"title":"二、完全读写","slug":"二、完全读写"},{"level":3,"title":"读取文件","slug":"读取文件"},{"level":3,"title":"写入文件","slug":"写入文件-2"},{"level":3,"title":"文件追加","slug":"文件追加"},{"level":3,"title":"拷贝文件","slug":"拷贝文件"},{"level":3,"title":"删除文件","slug":"删除文件"},{"level":2,"title":"三、文件流","slug":"三、文件流"},{"level":3,"title":"写文件","slug":"写文件"},{"level":3,"title":"读文件","slug":"读文件-2"},{"level":2,"title":"四、管道流pipe","slug":"四、管道流pipe"},{"level":2,"title":"五、目录操作","slug":"五、目录操作"},{"level":3,"title":"创建新目录","slug":"创建新目录"},{"level":3,"title":"读取目录","slug":"读取目录"},{"level":3,"title":"删除目录","slug":"删除目录"},{"level":2,"title":"六、文件操作","slug":"六、文件操作"},{"level":3,"title":"新建文件","slug":"新建文件"},{"level":3,"title":"复制文件","slug":"复制文件"},{"level":3,"title":"重命名文件","slug":"重命名文件"},{"level":3,"title":"删除文件","slug":"删除文件-2"},{"level":3,"title":"文件状态","slug":"文件状态"},{"level":2,"title":"九、异步处理fs","slug":"九、异步处理fs"},{"level":2,"title":"参考链接","slug":"参考链接"}],"relativePath":"src\\\\frontend\\\\node\\\\node-03 fs文件.md","lastUpdated":1612089669949}',p={},o=a('<h1 id="node-03-fs文件、shelljs"><a class="header-anchor" href="#node-03-fs文件、shelljs" aria-hidden="true">#</a> node-03 fs文件、shelljs</h1><h2 id="fs系统"><a class="header-anchor" href="#fs系统" aria-hidden="true">#</a> fs系统</h2><ol><li><p>fs模块中提供的方法一般有两种：</p><ol><li>同步[有返回值]，</li><li>异步[有回调函数]；</li></ol><p>带Sync的都是同步的，需要变量来接收；</p></li></ol><p>在获取文件出错时，异步可以使用err来处理错误，同步可以使用try...catch来捕获</p><p>使用异步无法保证处理顺序，可以将后续操作放在异步的回调函数里面处理即可；</p><p>使用异步必须带回调函数，否则会抛出错误</p><p>文件路径：</p><p><code>process.cwd()</code> 指定当前工作目录</p><h2 id="一、不完全读写（对大文件操作的，可以分段操作）"><a class="header-anchor" href="#一、不完全读写（对大文件操作的，可以分段操作）" aria-hidden="true">#</a> 一、不完全读写（对大文件操作的，可以分段操作）</h2><h3 id="对文件操作的方法"><a class="header-anchor" href="#对文件操作的方法" aria-hidden="true">#</a> 对文件操作的方法</h3><p>打开文件：<code>fs.open()</code>，<code>fs.openSync()</code>；</p><p>读取文件：<code>fs.read()</code>，<code>fs.readSync()</code>；</p><p>写文件 ：<code>fs.write()</code>，<code>fs.writeSync()</code>；</p><p>关闭文件：<code>fs.close()</code>，<code>fs.closeSync()</code>；</p><p><code>fs.readFile()</code> 相当于fs.open()---fs.read()---fs.close()；</p><h3 id="常用的文件系统标志"><a class="header-anchor" href="#常用的文件系统标志" aria-hidden="true">#</a> 常用的文件系统标志</h3><p><code>r</code>： 读取，文件不存在则报错；</p><p><code>r+</code>：读写，文件不存在则报错；</p><p><code>w</code>： 写入，文件不存在则自动创建，如果有会覆盖；</p><p><code>w+</code>：读写，文件不存在则自动创建；</p><p><code>a</code>： 追加内容，文件不存在则自动创建；</p><p><code>a+</code>：读取并追加内容，文件不存在自动创建；</p><h3 id="打开文件"><a class="header-anchor" href="#打开文件" aria-hidden="true">#</a> 打开文件</h3><ol><li><p>异步：<code>fs.open(path[,flags],callback)</code>;</p><p><code>path</code>:读取文件的路径；</p><p><code>flags</code>：文件系统标志，加引号；</p><p><code>callback</code>：两个形参err,fd； fd是文件句柄，方便后续使用；</p></li><li><p>同步：<code>fs.openSync</code>返回一个fd；</p><p>读文件需要加&#39;r&#39;，写文件需要加&#39;w&#39;；</p><p>open主要是获取到fd，进行一步read和write操作；</p></li></ol><p>fs.open(filepath,&#39;r&#39;,(err,fd){ console.log(&#39;哈哈&#39;,fd) })</p><h3 id="读文件"><a class="header-anchor" href="#读文件" aria-hidden="true">#</a> 读文件</h3><ol><li>异步：<code>fs.read(fd,buffer,offset,length,postion,callback)</code>; <ul><li><code>fd</code>：指定文件中读取，在open之后的fd形参，指向已打开的文件；</li><li><code>buffer</code>：数据将写入的缓冲区，需要先声明一个缓冲区；</li><li><code>offset</code>：是buffer中从第几个开始读取；</li><li><code>length</code>：读取多少个字节；</li><li><code>position</code>：读取文件初始位置</li><li><code>callback</code>: 回调函数有三个参数(err,bytesRead,buffer)； <ul><li>bytesRead：返回已经读取了多少个字节；</li><li>buffer：缓冲器里面的内容；</li></ul></li></ul></li><li>同步：<code>fs.readSync</code>返回一个bytesRead；</li></ol><p>例：fs.read(fd,buffer,3,4,5,(err,bytesRead,buffer)=&gt;{})；</p><div class="language-js"><pre><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// 创建6字节长度的buf缓存对象</span>\n<span class="token comment">// 打开文件</span>\nfs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;6.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>fd</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token comment">// 读取文件</span>\n    fs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>bytes<span class="token punctuation">,</span>buffer</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>\n        <span class="token comment">// 可以继续读取</span>\n        fs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>bytes<span class="token punctuation">,</span>buffer</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="写入文件"><a class="header-anchor" href="#写入文件" aria-hidden="true">#</a> 写入文件</h3><blockquote><p>需要在open之后</p></blockquote><p><code>fs.write(fd,buffer,offset,length,position,callback)</code>;</p><h3 id="文件关闭"><a class="header-anchor" href="#文件关闭" aria-hidden="true">#</a> 文件关闭</h3><p><code>fs.close(fd,callback)</code></p><h2 id="二、完全读写"><a class="header-anchor" href="#二、完全读写" aria-hidden="true">#</a> 二、完全读写</h2><h3 id="读取文件"><a class="header-anchor" href="#读取文件" aria-hidden="true">#</a> 读取文件</h3><p><code>fs.readFile(path[,options],callback);</code></p><ul><li><code>option</code>：默认为r；</li><li><code>callback</code>：两个参数：err,data;</li></ul><p>readFile加入一个对象：{encoding:&#39;utf-8&#39;}，可以不用.toString()来获取文件内容；</p><p>同步方式：<code>fs.readFileSync(path[,option])</code>；返回data；</p><p><code>fs.readFileSync(filepath,&#39;utf-8&#39;)</code></p><div class="language-js"><pre><code>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&#39;./1.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//data默认是buffer</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="写入文件-2"><a class="header-anchor" href="#写入文件-2" aria-hidden="true">#</a> 写入文件</h3><p><code>fs.writeFile(file,data[,options],callback);</code></p><ul><li><p><code>options</code>：常用于要修改文件系统标志时，默认是&#39;w&#39;，所以需要改a用来追加；</p><p>修改标志：<code>{flag:&#39;a&#39;}</code>；</p></li><li><p><code>callback</code>：一个err参数；</p></li></ul><p>同步：<code>fs.writeFileSync(file,data[,{flag:&#39;&#39;}])</code>没有返回值；\\n可以换行</p><h3 id="文件追加"><a class="header-anchor" href="#文件追加" aria-hidden="true">#</a> 文件追加</h3><p>异步：<code>fs.appendFile(filename,data[,options],callback)</code></p><ul><li>filename：读取的文件名</li><li>data：追加数据，文件追加的默认flag是a；</li></ul><p>同步：<code>fs.appendFileSync(filename,data[,options])</code></p><h3 id="拷贝文件"><a class="header-anchor" href="#拷贝文件" aria-hidden="true">#</a> 拷贝文件</h3><p>异步：<code>fs.copyFile(filenameA,filenameB,callback)</code></p><ul><li><code>filenameA</code>：原始文件名</li><li><code>filenameB</code>：拷贝文件名</li></ul><p>同步：<code>fs.copyFileSync(filepath,filepath1)</code></p><h3 id="删除文件"><a class="header-anchor" href="#删除文件" aria-hidden="true">#</a> 删除文件</h3><p>异步：<code>fs.unlink(path,callback)</code></p><p>同步：<code>fs.unlinkSync(path)</code></p><p>读取小文件时，直接使用<code>readFile()</code>或<code>readFileSync()</code>；</p><p>读取大文件时，使用文件流；</p><h2 id="三、文件流"><a class="header-anchor" href="#三、文件流" aria-hidden="true">#</a> 三、文件流</h2><h3 id="写文件"><a class="header-anchor" href="#写文件" aria-hidden="true">#</a> 写文件</h3><p><code>fs.createWriteStream(path[,options])</code>;</p><p>两个常用事件：<code>finish</code>和<code>error</code>；</p><p>两个常用方法：<code>write</code>[写], <code>end</code>; end必须调用，无论有无参数；</p><p>创建之后是一个对象，里面有一些方法可以使用；</p><p>事件：.on调用事件，之后写一个回调函数(<code>fs.on(event,callback)</code>)；</p><div class="language-js"><pre><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> ws <span class="token operator">=</span> <span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;hello.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>flags<span class="token operator">:</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\nws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件打开&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件写入已准备状态&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件写入完成, 关闭&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;hello world!&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;内容流入完成&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;hello2&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 上一个写完继续写下一个，进行流式写入</span>\nws<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件写入关闭&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 文件打开</span>\n<span class="token comment">// 文件写入已准备状态</span>\n<span class="token comment">// 内容流入完成</span>\n<span class="token comment">// 文件写入关闭</span>\n<span class="token comment">// 文件写入完成, 关闭</span>\n</code></pre></div><h3 id="读文件-2"><a class="header-anchor" href="#读文件-2" aria-hidden="true">#</a> 读文件</h3><p><code>fs.createReadStream(path[,options])；</code></p><p>五个常用事件：<code>data</code>,<code>end</code>,<code>open</code>,<code>close</code>,<code>error</code>，通过on监听</p><div class="language-js"><pre><code><span class="token comment">// 将文件打开并写入数据;    也可以直接使用管道流</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n<span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;hello.txt&#39;</span><span class="token punctuation">)</span>\nrs<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">&#39;UTF8&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 也可以直接在创建时的第二个参数写入, 不设置encoding就是buffer</span>\n\nrs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;打开成功....&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\nrs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token parameter">chunk</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token comment">// 当文件过大，比如1G时，会重复执行该事件, 最后流入结束；</span>\n    data <span class="token operator">+=</span> chunk\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nrs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;读取流结束&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="四、管道流pipe"><a class="header-anchor" href="#四、管道流pipe" aria-hidden="true">#</a> 四、管道流pipe</h2><p><code>readStream.pipe(writeStream)</code></p><p>将读取到的文件流入写入的文件； 不用像文件流写那么多；</p><div class="language-js"><pre><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\nrs<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span>\nws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;finish&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;写入完成&#39;</span><span class="token punctuation">)</span>\n    ws<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="五、目录操作"><a class="header-anchor" href="#五、目录操作" aria-hidden="true">#</a> 五、目录操作</h2><h3 id="创建新目录"><a class="header-anchor" href="#创建新目录" aria-hidden="true">#</a> 创建新目录</h3><p>异步：<code>fs.mkdir(path[,options],callback)；</code></p><ul><li><code>options</code>：一个对象： <ul><li><code>recursive:true</code>；递归创建（文件存在不报错）；</li></ul></li></ul><p>同步：<code>fs.mkdirSync(path[,options])</code>;没有返回值；</p><p><code>fs.existsSync(path)</code> 判断目录是否存在的;</p><p>根目录上使用<code>fs.mkdir()</code>即使使用递归参数，都会报错；</p><div class="language-js"><pre><code>fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>recursive<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">err</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="读取目录"><a class="header-anchor" href="#读取目录" aria-hidden="true">#</a> 读取目录</h3><p>异步：<code>fs.readdir(path,callback)</code>;</p><p>同步：<code>fs.readdirSync(path)</code>;</p><h3 id="删除目录"><a class="header-anchor" href="#删除目录" aria-hidden="true">#</a> 删除目录</h3><p>异步：<code>fs.rmdir(path,callback)</code>; 不能删除有文件的目录；</p><p>同步：<code>fs.rmdirSync(path)</code>；</p><p>实例1：删除空目录时使用rmdir就可以了，删除非空目录需要使用递归；</p><div class="language-js"><pre><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token parameter">dirName</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> dirs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>dirName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//打开文件</span>\n      <span class="token comment">//循环这个目录所有的文件</span>\n    dirs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> \n            <span class="token comment">//拼接一个完整的路径，注意使用形参路径;</span>\n        <span class="token keyword">let</span> curPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dirName<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n           <span class="token comment">//获取文件的状态，来判断文件是否是一个目录;</span>\n        <span class="token keyword">let</span> stats <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>curPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">getFile</span><span class="token punctuation">(</span>curPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span>curPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    fs<span class="token punctuation">.</span><span class="token function">rmdirSync</span><span class="token punctuation">(</span>dirName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//删除这个文件；</span>\n<span class="token punctuation">}</span>\n<span class="token function">getFile</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/test</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre></div><p>实例2：快速重命名</p><p>（1）一次性替换所有文件的名字；</p><div class="language-js"><pre><code><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">/**\n*\n*@param {String} dirName\n*@param {String} oldStr\n*@param {String} newStr\n*/</span>\n<span class="token keyword">function</span> <span class="token function">rename</span><span class="token punctuation">(</span><span class="token parameter">dirName<span class="token punctuation">,</span>oldStr<span class="token punctuation">,</span>newStr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> dirArr <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>dirName<span class="token punctuation">)</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dirArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dirName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dirArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dirName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dirArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>oldStr<span class="token punctuation">,</span>newStr<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&#39;./files&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;pink&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>（2）通过shift+右键 打开PowerShell可以使用</p><div class="language-shell"><pre><code>Get-ChildItem * <span class="token operator">|</span> rename-item -newname <span class="token punctuation">{</span><span class="token variable">$_</span>.name -replace <span class="token string">&#39;hello&#39;</span>,<span class="token string">&#39;你好&#39;</span><span class="token punctuation">}</span>\n</code></pre></div><p>（3）打开cmd，输入node，输入以下的代码即可</p><div class="language-js"><pre><code>fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="六、文件操作"><a class="header-anchor" href="#六、文件操作" aria-hidden="true">#</a> 六、文件操作</h2><h3 id="新建文件"><a class="header-anchor" href="#新建文件" aria-hidden="true">#</a> 新建文件</h3><p>writeFile的时候，如果没有就自动创建；</p><p>异步：<code>fs.writeFile(path,data[,options],callback)；</code></p><div class="language-js"><pre><code>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;创建文件成功&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>同步：<code>fs.writeFileSync(path, data[,options])</code></p><p>如果直接写文件名字，则创建到根目录，如果需要创建到指定目录，可以使用<code>path.resolve</code>给全路径</p><h3 id="复制文件"><a class="header-anchor" href="#复制文件" aria-hidden="true">#</a> 复制文件</h3><p><code>fs.copyFile(src,dest,callback)</code>；源文件，目标文件；</p><p><code>fs.copyFileSync(src,dest)</code></p><p>也可以使用流操作复制文件；</p><h3 id="重命名文件"><a class="header-anchor" href="#重命名文件" aria-hidden="true">#</a> 重命名文件</h3><p>异步：<code>fs.rename(oldPath,newPath,callback)</code>; 也可以重命名</p><p>同步：<code>fs.renameSync(oldPath,newPath)</code>；</p><h3 id="删除文件-2"><a class="header-anchor" href="#删除文件-2" aria-hidden="true">#</a> 删除文件</h3><p>异步：<code>fs.unlink(path,callback)</code>; 不能删除目录；</p><p>同步：<code>fs.unlinkSync(path)</code>;</p><h3 id="文件状态"><a class="header-anchor" href="#文件状态" aria-hidden="true">#</a> 文件状态</h3><p>异步：fs.stat(path,callback)</p><ul><li><code>callback</code>有两个参数：err，stats，stats是fs.stats，返回的是一个对象； <ul><li>stats.isDirectory()；是否是一个目录；</li><li>stats.isFile()是否是一个文件；</li></ul></li></ul><p>同步：<code>fs.statSync(path);</code></p><h2 id="九、异步处理fs"><a class="header-anchor" href="#九、异步处理fs" aria-hidden="true">#</a> 九、异步处理fs</h2><p>插件安装：<a href="https://github.com/jprichardson/node-fs-extra" target="_blank" rel="noopener noreferrer">node-fs-extra</a></p><p>支持的使用方式：</p><div class="language-js"><pre><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs-extra&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Async with promises:</span>\nfs<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token string">&#39;/tmp/myfile&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/tmp/mynewfile&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;success!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Async with callbacks:</span>\nfs<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token string">&#39;/tmp/myfile&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/tmp/mynewfile&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;success!&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Sync:</span>\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n  fs<span class="token punctuation">.</span><span class="token function">copySync</span><span class="token punctuation">(</span><span class="token string">&#39;/tmp/myfile&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/tmp/mynewfile&#39;</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;success!&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Async/Await:</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">copyFiles</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token string">&#39;/tmp/myfile&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/tmp/mynewfile&#39;</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;success!&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">copyFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="参考链接"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2><ul><li><a href="https://juejin.im/post/5cdb76166fb9a032196ef1ff" target="_blank" rel="noopener noreferrer">https://juejin.im/post/5cdb76166fb9a032196ef1ff</a></li></ul>',125);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
