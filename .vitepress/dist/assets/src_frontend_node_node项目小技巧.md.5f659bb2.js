import{o as n,c as s,d as a}from"./app.f5909e71.js";const t='{"title":"node项目小技巧","description":"","frontmatter":{},"headers":[{"level":2,"title":"其他小方法","slug":"其他小方法"},{"level":2,"title":"前端捕获请求数据404问题","slug":"前端捕获请求数据404问题"},{"level":2,"title":"数据统一返回状态","slug":"数据统一返回状态"}],"relativePath":"src\\\\frontend\\\\node\\\\node项目小技巧.md","lastUpdated":1615699077475}',p={},o=a('<h1 id="node项目小技巧"><a class="header-anchor" href="#node项目小技巧" aria-hidden="true">#</a> node项目小技巧</h1><h2 id="其他小方法"><a class="header-anchor" href="#其他小方法" aria-hidden="true">#</a> 其他小方法</h2><ol><li>向后台传参，可以通过点击按钮，加一个函数，调用这个函数，函数里面调用ajax；</li><li>可以使用fileter调用里面的数据，过滤掉其他的；</li><li>json文件写入需要通过json.stringify()之后写入；</li><li>两个相同的路由（一个访问页面，一个调接口），可以再调接口那个传入一个参数，判断是否是传入参数的这个路由，实现两个页面；</li><li>后端思想，需要先显示，后修改； 显示：</li></ol><p>（1）在点击第一个页面时，将id通过查询字符串的方式传入到后台去（后台的接收地址需要写path路径来接收）；</p><p>（2）先将页面用.toString()读取出来，之后再用replace替换掉value值；或使用ejs模板；</p><p>（3）res.send输入到替换掉后的html内容；模板使用res.render()；</p><ol start="6"><li><p>对于input页面不需要让用户看见或者填写的参数，使用type=&#39;hidden&#39;，写入到value里面，这样提交到后台也能看见；</p></li><li><p>前端调用ajax的时候，可以返回一个对象，对象里面填写flag用于判断；</p></li><li><p>判断session-id是否存在，可以让sessionid为undefined的时候等于空，就好判断了，就可以给sessionid置空了；</p></li><li><p>http是无状态的（点击跳转没有记忆能力）；</p></li><li><p>出错时，可以查看页面返回的响应是什么，f12--Network--点击clear按钮(一个斜杠)；之后点击出错的地方，就可以直接在network查看返回的是什么了；</p></li><li><p>点击ajax给后端给前端传入js事件</p></li></ol><div class="language-js"><pre><code><span class="token comment">//前端  id传入到后台了;与后端交互</span>\n    <span class="token comment">//因为后端传过来的参数是字符串，所以需要eval一下;</span>\n$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/user/delete/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token parameter">data</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">eval</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//后端 将事件弄到前端去，前端在成功时输出;</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">alert(&#39;删除失败</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nres<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">alert(&#39;删除成功&#39;);location.reload();</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre></div><ol start="12"><li><p>向前端渲染js</p><div class="language-js"><pre><code>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;script&gt;alert(&#39;</span><span class="token string">&#39;);location.href=&quot;&quot;;&lt;/script&gt;&#39;</span><span class="token punctuation">)</span>\n</code></pre></div></li></ol><h2 id="前端捕获请求数据404问题"><a class="header-anchor" href="#前端捕获请求数据404问题" aria-hidden="true">#</a> 前端捕获请求数据404问题</h2><div class="language-js"><pre><code><span class="token function-variable function">isRunUrl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> _doc <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;head&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  dom<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  dom<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  _doc<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token comment">/*@cc_on!@*/</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//if not IE</span>\n    dom<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    dom<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>dom<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token string">&#39;loaded&#39;</span> <span class="token operator">||</span> dom<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token string">&#39;complete&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  dom<span class="token punctuation">.</span>onerror <span class="token operator">=</span> reject<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">isRunUrl</span><span class="token punctuation">(</span><span class="token string">&quot;测试地址&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//处理resolve的代码</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Promise被置为resolve&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//处理reject的代码</span>\n    console <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;程序被置为了reject&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="数据统一返回状态"><a class="header-anchor" href="#数据统一返回状态" aria-hidden="true">#</a> 数据统一返回状态</h2><p>创建一个js文件，专门导出，提供返回接口使用</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  success<span class="token operator">:</span> <span class="token punctuation">(</span>content<span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      status<span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>\n      success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      content<span class="token operator">:</span> content<span class="token punctuation">,</span>\n      message<span class="token operator">:</span> message\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  fail<span class="token operator">:</span> <span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      status<span class="token operator">:</span> <span class="token string">&quot;fail&quot;</span><span class="token punctuation">,</span>\n      fail<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      type<span class="token operator">:</span> type<span class="token punctuation">,</span>\n      message<span class="token operator">:</span> message\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',14);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
