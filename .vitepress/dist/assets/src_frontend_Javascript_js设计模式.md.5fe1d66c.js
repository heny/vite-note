import{o as n,c as s,d as a}from"./app.5dd0cd0b.js";const t='{"title":"JS设计模式","description":"","frontmatter":{},"headers":[{"level":2,"title":"Object.defineProperty实现深度监听 （观察者模式）","slug":"object-defineproperty实现深度监听-（观察者模式）"},{"level":2,"title":"简易的观察者模式","slug":"简易的观察者模式"},{"level":2,"title":"发布订阅模式","slug":"发布订阅模式"}],"relativePath":"src/frontend/Javascript/js设计模式.md","lastUpdated":1626605767178}',p={},o=a('<h1 id="js设计模式"><a class="header-anchor" href="#js设计模式" aria-hidden="true">#</a> JS设计模式</h1><h2 id="object-defineproperty实现深度监听-（观察者模式）"><a class="header-anchor" href="#object-defineproperty实现深度监听-（观察者模式）" aria-hidden="true">#</a> Object.defineProperty实现深度监听 （观察者模式）</h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;更新视图&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>\n    name<span class="token operator">:</span><span class="token punctuation">{</span>n<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> oldProto<span class="token operator">=</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype\n<span class="token comment">//获取原有的数组方法</span>\n<span class="token keyword">let</span> proto <span class="token operator">=</span> Objeact<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>oldProto<span class="token punctuation">)</span> <span class="token comment">//proto继承原生方法 防止篡改原生方法</span>\n<span class="token comment">//重写数组里的变异方法</span>\n<span class="token punctuation">[</span><span class="token string">&quot;push&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;shift&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    proto<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//加了自己的逻辑</span>\n        oldProto<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span> <span class="token comment">//调用了原来的逻辑</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">observer</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//观察者 观察obj 使obj重写defineProperty的形式</span>\n    <span class="token comment">//变异方法 push pop shift unshift reverse sort splice</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> value<span class="token punctuation">.</span>__proto__<span class="token operator">=</span>proto <span class="token comment">//value的原型链指向自己定义好的proto</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">typeof</span> value<span class="token operator">!==</span><span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> value<span class="token punctuation">}</span> <span class="token comment">//不是对象就返回</span>\n    <span class="token comment">//循环obj 把属性和对象重新定义</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">defineReactive</span><span class="token punctuation">(</span>value <span class="token punctuation">,</span>key <span class="token punctuation">,</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//定义响应式</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj <span class="token punctuation">,</span>key <span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// obj要定义属性的对象。</span>\n    <span class="token comment">//  prop  要定义或修改的属性的名称或 Symbol 。 </span>\n    <span class="token comment">// descriptor   要定义或修改的属性描述符。</span>\n\n    <span class="token comment">//如果是对象，继续增加 setter和getter 递归</span>\n    <span class="token function">observer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> value\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> \n        <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            \n            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token function">observer</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token comment">//深度监控</span>\n                value<span class="token operator">=</span>newValue\n                <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n            \n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">observer</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token comment">//obj.name.n=500 //数据变了需要更新视图</span>\nobj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token punctuation">{</span>n<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">}</span> <span class="token comment">//数据变了需要更新视图 因为这个对象没有getter和setter</span>\nobj<span class="token punctuation">.</span>name<span class="token punctuation">.</span>n<span class="token operator">=</span><span class="token number">100</span>\n</code></pre></div><h2 id="简易的观察者模式"><a class="header-anchor" href="#简易的观察者模式" aria-hidden="true">#</a> 简易的观察者模式</h2><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>\n  observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">observer</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>\n  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">subscribeTo</span><span class="token punctuation">(</span><span class="token parameter">subject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    subject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> \n<span class="token keyword">let</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nobserver<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;observer update&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nobserver<span class="token punctuation">.</span><span class="token function">subscribeTo</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span>  <span class="token comment">//观察者订阅主题</span>\n\nsubject<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="发布订阅模式"><a class="header-anchor" href="#发布订阅模式" aria-hidden="true">#</a> 发布订阅模式</h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Even</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 声明一个空对象，用于存储值;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// on用来监听一个事件，并传入两个参数，一个是事件名，一个是回调函数;</span>\n<span class="token class-name">Even</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">on</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">eventname<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 判断该函数里的事件名是否存在</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventBus<span class="token punctuation">[</span>eventname<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 如果存在则新增一个方法;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus<span class="token punctuation">[</span>eventname<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果不存在则使用数组方式存入一个事件;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus<span class="token punctuation">[</span>eventname<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// emit用来触发一个事件,一个是触发的事件名,第二个是传入的参数;</span>\n<span class="token class-name">Even</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">emit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">eventname<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// emit用来监听一个事件的触发</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventBus<span class="token punctuation">[</span>eventname<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 如果有该事件，则循环该事件并执行该事件</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus<span class="token punctuation">[</span>eventname<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',7);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
