import{o as n,c as s,d as a}from"./app.e9024871.js";const p='{"title":"js-05 函数","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、函数的作用","slug":"一、函数的作用"},{"level":2,"title":"二、函数声明及调用","slug":"二、函数声明及调用"},{"level":3,"title":"函数注意事项","slug":"函数注意事项"},{"level":3,"title":"函数放在其他位置","slug":"函数放在其他位置"},{"level":2,"title":"三、全局函数","slug":"三、全局函数"},{"level":2,"title":"四、封装函数","slug":"四、封装函数"},{"level":2,"title":"五、事件处理函数","slug":"五、事件处理函数"},{"level":2,"title":"六、函数参数的类型：","slug":"六、函数参数的类型："},{"level":2,"title":"七、回调函数","slug":"七、回调函数"},{"level":2,"title":"八、递归函数","slug":"八、递归函数"},{"level":3,"title":"尾递归","slug":"尾递归"},{"level":2,"title":"九、作用域","slug":"九、作用域"},{"level":3,"title":"全局变量的作用域","slug":"全局变量的作用域"},{"level":3,"title":"局部变量","slug":"局部变量"},{"level":3,"title":"块级作用域","slug":"块级作用域"},{"level":3,"title":"隐式全局变量","slug":"隐式全局变量"},{"level":3,"title":"[[scope]]","slug":"scope"},{"level":2,"title":"十、作用域链：","slug":"十、作用域链："},{"level":2,"title":"十一、预解析（变量提升）","slug":"十一、预解析（变量提升）"},{"level":2,"title":"十二、this","slug":"十二、this"},{"level":3,"title":"this定义","slug":"this定义"},{"level":3,"title":"this指向","slug":"this指向"},{"level":2,"title":"十三、函数返回值","slug":"十三、函数返回值"},{"level":2,"title":"十四、函数注释","slug":"十四、函数注释"},{"level":2,"title":"其他函数调用方式","slug":"其他函数调用方式"},{"level":2,"title":"高频面试题","slug":"高频面试题"}],"relativePath":"src/frontend/Javascript/js-05 函数.md","lastUpdated":1620544431742}',t={},o=a('<h1 id="js-05-函数"><a class="header-anchor" href="#js-05-函数" aria-hidden="true">#</a> js-05 函数</h1><h2 id="一、函数的作用"><a class="header-anchor" href="#一、函数的作用" aria-hidden="true">#</a> 一、函数的作用</h2><ol><li><p>主要用来储存一段代码，</p></li><li><p>代码重复使用，大量减少代码量</p></li></ol><h2 id="二、函数声明及调用"><a class="header-anchor" href="#二、函数声明及调用" aria-hidden="true">#</a> 二、函数声明及调用</h2><ol><li>普通声明：<code>function name(){content}</code></li><li>表达式声明: <code>var fn = function(){countent}</code>，</li><li>函数调用：<code>name()</code>；</li><li>函数的length属性，为形参的个数;</li></ol><h3 id="函数注意事项"><a class="header-anchor" href="#函数注意事项" aria-hidden="true">#</a> 函数注意事项</h3><ul><li><p>函数调用时，是不分先后的；</p></li><li><p>在任何地方给一个已经声明且赋值的变量再重新声明，重新声明都是无效的。</p></li><li><p>函数重复声明时，后面的函数会覆盖前面的函数；</p></li><li><p>如果先用函数表达式声明的，后面声明的普通函数是不能覆盖前面的函数，如果前面是普通声明，后面是表达式声明，则照常执行；</p></li></ul><div class="language-JS"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">x</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1</span>\n<span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//1</span>\n\n\n<span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//3</span>\n<span class="token keyword">var</span> <span class="token function-variable function">x</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1</span>\n</code></pre></div><p>面试题：</p><div class="language-js"><pre><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> n<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\ny <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> n<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\nz <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token operator">=</span>y<span class="token operator">+</span>z<span class="token punctuation">;</span>\n</code></pre></div><p>y和z都是4，后面定义的影响到前面定义的；</p><h3 id="函数放在其他位置"><a class="header-anchor" href="#函数放在其他位置" aria-hidden="true">#</a> 函数放在其他位置</h3><ol><li><p>对象中的函数时</p><div class="language-js"><pre><code><span class="token keyword">var</span> aa <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token function-variable function">fn</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>循环体<span class="token punctuation">}</span><span class="token punctuation">}</span>\naa<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>经常使用于函数过多，变量名重复；</p></li><li><p>数组中的函数时</p><div class="language-js"><pre><code><span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span> \n<span class="token comment">// 调用：ary[3]()</span>\n</code></pre></div></li></ol><h2 id="三、全局函数"><a class="header-anchor" href="#三、全局函数" aria-hidden="true">#</a> 三、全局函数</h2><p>JavaScript 中包含以下 7 个全局函数，用于完成一些常用的功能：</p><p><code>escape( )</code>、<code>eval( )</code>、<code>isFinite( )</code>、<code>isNaN( )</code>、<code>parseFloat( )</code>、<code>parseInt( )</code>、<code>unescape( )</code>。</p><p>注意：<code>setTimeout</code> 不是js的全局函数，是window的全局函数</p><h2 id="四、封装函数"><a class="header-anchor" href="#四、封装函数" aria-hidden="true">#</a> 四、封装函数</h2><ol><li><p>写出主体代码；</p></li><li><p>找出可变的变量，用形参代替；</p></li><li><p>放到函数中；</p></li><li><p>调用函数并检查；</p></li></ol><h2 id="五、事件处理函数"><a class="header-anchor" href="#五、事件处理函数" aria-hidden="true">#</a> 五、事件处理函数</h2><p><code>obox.onclick = aa</code>;</p><p>事件处理函数当中，函数后面不需要跟小括号；</p><h2 id="六、函数参数的类型："><a class="header-anchor" href="#六、函数参数的类型：" aria-hidden="true">#</a> 六、函数参数的类型：</h2><ol><li><p>形参和实参</p><ul><li><p>创建：function 函数名(形参){} 多个形参用逗号隔开；</p></li><li><p>调用：函数名(实参);</p></li></ul><p><strong>注意：</strong></p><ul><li><p>形参比实参多，多出来的形参值为undefined；</p></li><li><p>实参比形参多，多出来的实参不参与计算，等于没有被识别；</p></li></ul></li><li><p>arguments</p><p>它是一个对象，是一个类数组（有长度，可以循环，不能使用数组的方法）；</p><p>类似于数组，数据由实参决定，arguments是函数的内置对象；</p><p>当使用一个函数不知道这个函数可以使用哪些形参时，可以利用arguments获取可以使用的形参；可以使用下标方式取值，比如：arguments[0]；</p><div class="language-js"><pre><code><span class="token comment">//查询map函数有哪些形参可用；</span>\nary<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ol><h2 id="七、回调函数"><a class="header-anchor" href="#七、回调函数" aria-hidden="true">#</a> 七、回调函数</h2><ol><li><p>把函数作为实参传递到另一个函数当中，为回调函数；</p></li><li><p>回调函数是某个操作或某个动作做完以后调用的函数。</p></li></ol><p>回调函数实例：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span>func</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//这里fn用来传入一个函数；</span>\n    <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>add<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里不能使用小括号，因为在fn函数里面已经调用小括号了；</span>\n</code></pre></div><h2 id="八、递归函数"><a class="header-anchor" href="#八、递归函数" aria-hidden="true">#</a> 八、递归函数</h2><ol><li><p>在函数中自己调用自己，也可以是一个for循环；</p></li><li><p>递归一定要有结束条件；</p></li></ol><p>递归： 斐波那契数列第几个数是什么；</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        必须<span class="token keyword">return</span> <span class="token number">1</span>个数值\n\t<span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fn</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 求n个数字的和;   递归函数自己调用自己;</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token function">fn</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 3 + fn(2)</span>\n<span class="token comment">// 3 + (2 + fn(1))</span>\n<span class="token comment">// 3 + (2 + (1))</span>\n</code></pre></div><h3 id="尾递归"><a class="header-anchor" href="#尾递归" aria-hidden="true">#</a> 尾递归</h3><ol><li><p>什么是尾调用：指某个函数的最后一步是调用另一个函数</p><div class="language-js"><pre><code><span class="token comment">// 这种情况叫尾调用</span>\n<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 这种情况不叫尾调用</span>\n<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> y\n    <span class="token comment">// 调用函数g后还有别的操作,不叫尾调用;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 情况二 也不叫尾调用</span>\n<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>  <span class="token comment">//调用后还有操作;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>尾递归：函数调用自身，称为递归，如果尾调用自身，称为尾递归</p><p>递归非常耗费内存，因为需要同时保存成千上百个调用记录，很容易发生栈溢出错误，对于尾递归来说，由于只存在一个调用记录，所以永远不会发生栈溢出错误；</p><p>递归保存n个调用记录，时间复杂度：O(n)</p><p>尾递归只保留一个调用记录，时间复杂度：O(1)</p><div class="language-js"><pre><code><span class="token comment">// 递归写法</span>\n<span class="token keyword">function</span> <span class="token function">fabonacci</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>\n    <span class="token keyword">return</span> <span class="token function">fabonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">fabonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> \n     <span class="token comment">//一直在进行记录,数值过大栈溢出;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 尾递归写法;</span>\n<span class="token keyword">function</span> <span class="token function">fabonacci</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>ac1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>ac2<span class="token operator">=</span><span class="token number">1</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ac2<span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">fabonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ac2<span class="token punctuation">,</span>ac1<span class="token operator">+</span>ac2<span class="token punctuation">)</span> \n<span class="token punctuation">}</span>\n</code></pre></div><p>尾递归斐波那契分析：</p><p>第一个为次数,第二个为保留上一次的结果,第三个用于返回的结果;</p><p>// 假如传入10,第一次为 9 1 2</p><p>// 第二次为 8 2 3</p><p>// 第三次为 7 3 5</p><p>//最后一位依次为: 2 3 5 8</p><p>在es6中，只要使用尾递归，就不会发生栈溢出，相对节省内存；</p></li></ol><h2 id="九、作用域"><a class="header-anchor" href="#九、作用域" aria-hidden="true">#</a> 九、作用域</h2><blockquote><p>每个函数都有自己的执行期上下文，每个执行期上下文都有自己的变量对象；</p></blockquote><h3 id="全局变量的作用域"><a class="header-anchor" href="#全局变量的作用域" aria-hidden="true">#</a> 全局变量的作用域</h3><ol><li><p>用var声明的变量，可以在全局使用；</p></li><li><p>除了在函数内部定义的变量都是全局变量；</p></li><li><p>全局作用域声明的变量、函数会变成window的方法或属性。</p></li><li><p>全局变量如果页面不关闭，全局变量就不会释放，就会占空间，消耗内存，所以尽可能的在函数里面使用局部变量；</p></li></ol><h3 id="局部变量"><a class="header-anchor" href="#局部变量" aria-hidden="true">#</a> 局部变量</h3><p>在函数内部定义的变量是局部变量，</p><h3 id="块级作用域"><a class="header-anchor" href="#块级作用域" aria-hidden="true">#</a> 块级作用域</h3><p>花括号里面声明的变量只能在花括号当中使用，比如：if语句和for循环语句；</p><p>但是在js当中，外面也能使用花括号的变量，因为在js里没有块级作用域，只有函数除外，在es6里面let声明的变量有作用域；</p><h3 id="隐式全局变量"><a class="header-anchor" href="#隐式全局变量" aria-hidden="true">#</a> 隐式全局变量</h3><ol><li><p>声明变量没有var，就叫隐式全局变量；</p></li><li><p>如果在函数里面声明变量没有var，函数执行之后，外面也能拿到函数里面的变量；</p></li></ol><p><strong>注意：</strong></p><ul><li><p>全局变量是不能被删除的，隐式全局变量时可以被删除的；</p></li><li><p>定义变量使用var是不能被删除的，没有var是可以删除的；</p></li></ul><p><code>delete 变量</code> 删除变量。</p><h3 id="scope"><a class="header-anchor" href="#scope" aria-hidden="true">#</a> [[scope]]</h3><p>（这里跳过，建议去看视频，推荐渡一教育的视频，作用域讲的比较详细）</p><p>作用域是因为由函数的产生而产生的作用域；</p><p>每个javascript函数也是一个对象，函数叫类对象，函数可以访问它的name属性和prototype属性，但有些属性是不能访问的，比如<code>[[scope]]</code>，这些属性仅javascript引擎存取；</p><p><code>AO(Active Object)</code>是执行期上下文，记录了该环境中所有声明的参数，变量和函数；</p><p><code>GO(Global Object)</code>是全局产生的执行期上下文；</p><p>全称：<code>VO(variable)</code>，AO是正在执行的VO，GO全局中的VO；</p><p><code>[[scope]]</code>是隐式的属性，不能拿出来，我们不能访问，系统可以用，里面存储了执行期上下文(AO)的集合。</p><p>执行期上下文：</p><p>当一个函数执行时，会创建一个称为执行期上下文(AO)的内部对象，</p><p>一个执行期上下文定义了一个函数执行时的环境，</p><p>函数每次执行时对应的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文，</p><p>当函数执行完毕，它所产生的执行上下文被销毁；</p><p>查找变量，从作用域链的顶端依次向下查找；</p><p>作用域链：<code>[[scope]]</code>中存储的执行期上下文对象的集合，这个集合呈链式链接，我们把这种链式链接叫作用域链；</p><p>每一个函数都有一个执行期上下文的集合，叫作用域链；</p><p>当一个函数被创建时，就可以访问<code>fn.name</code>，<code>fn.[[scope]]</code></p><p><code>fn.[[scope]]</code>里面存放了一个0，0指向GO，global Object；</p><p>一个函数被定义时，可以访问<code>[[scope]]</code>，里面储存的是GO，一个函数执行之后会产生一个新的执行期上下文，存的是AO，GO被压下去了，变成了第1位，AO在第0 位，在最顶端；</p><p>当函数里面还有函数时，子函数可以访问父函数的劳动成果，可以访问父函数的<code>[[scope]]</code>，里面还存有自己的执行期上下文(AO)；</p><p>查找一个变量，scope会从顶端开始查找作用域链，如果顶端查找不到就会查找下一个；</p><p>函数在被调用执行时，会创建一个当前函数的执行期上下文，在该执行期上下文的创建阶段，变量对象、作用域、闭包、this指向会分别被确定，而一个JavaScript程序中一般来说会有多个函数，JavaScript引擎使用调用栈来管理这些函数的调用顺序，函数调用栈的调用顺序与栈数据结构一致；</p><p><strong>例子：</strong></p><p>a定义之后会产生一个scope，scope里面储存的是全局的执行上下文GO，之后a被执行，产生了一个AO，被放到了scope的最顶端，形成了一个新的作用域链，</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span>\n    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> glob <span class="token operator">=</span> <span class="token number">100</span>\n<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p><img src="https://notecdn.heny.vip/images/js-05_%E5%87%BD%E6%95%B0-01.png" alt="image"></p><p>javascript变量的生命周期</p><p>JavaScript 变量生命周期在它声明时初始化。</p><p>局部变量在函数执行完毕后销毁。</p><p>全局变量在页面关闭后销毁。</p><h2 id="十、作用域链："><a class="header-anchor" href="#十、作用域链：" aria-hidden="true">#</a> 十、作用域链：</h2><p>从内到外查找，先找自己局部区域有没有，再往外一层</p><p>作用域链：[[scope]]中所存储的执行期上下文（AO）对象的集合，这个集合呈链式链接，我们把这种链式链接叫作用域链；</p><h2 id="十一、预解析（变量提升）"><a class="header-anchor" href="#十一、预解析（变量提升）" aria-hidden="true">#</a> 十一、预解析（变量提升）</h2><ol><li><p>执行代码前，会先找页面中的（var 和 function），找出来之后并把变量赋值为undefined，<strong>函数永远是最后提升的</strong></p></li><li><p><strong>逐行解析</strong>：遇到赋值表达式时，会将值重新赋值给变量；</p></li><li><p><strong>变量的提升</strong>：只会在当前的作用域中提升，提升到当前的作用域的最上面； 函数中的变量只会提前到函数的作用域最前面，不会提升到外面去；</p></li></ol><p>作用域预解析必背四个步骤</p><ul><li><p>创建AO/GO对象，</p></li><li><p>变量提升并赋值undefined</p></li><li><p>形参实参相统一;</p></li><li><p>函数永远是最后提升的，函数最后提升到最上面；</p></li></ul><div class="language-js"><pre><code><span class="token comment">// 由于函数最后提升,先提升var,赋值undefined,之后提升function,a被赋值函数,因此第一个打印函数;</span>\n<span class="token comment">// 之后a又被赋值,因此之后的值一直是a的,function已经被提升到最上面了;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;aaaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bbbb&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="十二、this"><a class="header-anchor" href="#十二、this" aria-hidden="true">#</a> 十二、this</h2><h3 id="this定义"><a class="header-anchor" href="#this定义" aria-hidden="true">#</a> this定义</h3><ul><li><p>函数中的this指向，不是在定义的时候确定的，而是在调用的时候确定的；</p></li><li><p>当事件放到循环里面时，是拿不到i的，需要用this代替这个，比如：</p></li></ul><div class="language-js"><pre><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>oli<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    oli<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onmouseover</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&quot;block&quot;</span><span class="token punctuation">;</span>    <span class="token comment">//事件里面的i是无法获取到会报错的;这个this代表划过的这个；</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li><p>this可以在js任何地方使用，位置不同指向不同，</p></li><li><p>全局的任何地方都可以调用，window是页面中最大的对象，</p></li></ul><h3 id="this指向"><a class="header-anchor" href="#this指向" aria-hidden="true">#</a> this指向</h3><p>（1）触发当前事件的对象；</p><p>（2）普通函数的this指向window；</p><p>（3）构造函数的this指向实例对象；</p><p>（4）方法中的this指向实例对象；</p><p>（5）原型中的this指向实例对象</p><p>（6）定时器中的this指向window；</p><p>（7）函数作为某个对象的方法时，this指向这个对象；</p><p>（8）函数作为某个数组的数据时，this指向这个数组；</p><p>总结：执行代码前，会把变量的声明提前，变量值为undefined，当遇到变量值时，并给变量赋值；</p><p>面试题2：</p><div class="language-js"><pre><code><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a<span class="token operator">=</span>b<span class="token operator">=</span>c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>解答： 执行完是这样的：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span>\n    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n    c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>     <span class="token comment">//只有b和c没有var，是隐式全局变量，所以外面可以拿到值，a被声明了是局部变量，所以a报错了；</span>\n</code></pre></div><p>相同题：</p><div class="language-js"><pre><code><span class="token keyword">var</span> a<span class="token punctuation">,</span><span class="token function">b</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> a<span class="token operator">=</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>面试题3：</p><div class="language-js"><pre><code><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">f1</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n</code></pre></div><p>解答：</p><div class="language-js"><pre><code><span class="token keyword">var</span> f1<span class="token punctuation">;</span>\n<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function-variable function">f1</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//var声明的函数，函数为表达式，是赋值的，变量名会提前，；f1找不到；</span>\n</code></pre></div><p>面试题4：</p><div class="language-js"><pre><code><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> test4399 <span class="token operator">=</span> <span class="token punctuation">{</span>\n    color<span class="token operator">:</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">getColor</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">;</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> getColor <span class="token operator">=</span> test4399<span class="token punctuation">.</span>getColor<span class="token punctuation">;</span>\n<span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ntest4399<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>解答：</p><p>第一个执行结果是：window.getColor() this指向window，是green；</p><p>第二个执行结果：test4399.getColor()；this指向test4399，是blue；</p><h2 id="十三、函数返回值"><a class="header-anchor" href="#十三、函数返回值" aria-hidden="true">#</a> 十三、函数返回值</h2><ol><li>函数调用以后的结果，就是return后面的值；</li><li>如果没有return，则返回undefined；</li><li>return 后面的代码不会再执行；</li><li>return后面有什么，最终返回结果就是什么；</li><li>直接调用函数，需要使用一个变量接收一下函数；</li><li>如果函数return后面没有任何值，返回结果将会是undefined；</li></ol><p>总结：使用return就必须有返回值，要么就永远不使用；</p><p>return 返回多个值时，只能返回最后一个值，如果需要返回多个值可以放到一个数组当中，或对象中返回；</p><p>返回值的类型可以是js中数据类型中的任何一个；</p><p>面试题：</p><div class="language-js"><pre><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\ny <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nz <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>解答： 两个函数都没有return 返回值，所有x和y都为undefined;</p><h2 id="十四、函数注释"><a class="header-anchor" href="#十四、函数注释" aria-hidden="true">#</a> 十四、函数注释</h2><p><img src="https://notecdn.heny.vip/images/js-05_%E5%87%BD%E6%95%B0-02.png" alt="image"></p><p>实例：</p><div class="language-js"><pre><code><span class="token comment">/**\n*\n*@param num {Number} 数字\n*@param str {String} 名称\n*@return {Boolean} true:成年 false:未成年\n* @type { import(&#39;vite&#39;).UserConfig } // 使用ts类型\n*/</span>\n<span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span>str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="其他函数调用方式"><a class="header-anchor" href="#其他函数调用方式" aria-hidden="true">#</a> 其他函数调用方式</h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&#39;hh&#39;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">&#39;ss&#39;</span>\nfn<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">this a is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and b is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>使用模板字符串调用函数时：</p><ul><li>第一个参数：数组，包含模板字符串分割的字符串</li><li>第二个参数：模板字符串的第一个变量，后面的变量以此类推</li></ul><h2 id="高频面试题"><a class="header-anchor" href="#高频面试题" aria-hidden="true">#</a> 高频面试题</h2><p>● 写一个获取非行间样式的函数</p><p>● 说说你对作用域链的理解？</p><p>● var x = 1, y = z = 0; function add(n) { n = n + 1; }; y = add(x); function add(n) { n = n + 3; }; z = add(x); console.log(x,y,z);</p><p>● 请解释变量提升？</p><p>● 函数声明和函数表达式声明的区别？</p><p>● JavaScript 两种变量范围有什么不同？</p>',139);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
