import{o as n,c as a,d as s}from"./app.b11e2761.js";const t='{"title":"Vue-03 组件、Props","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、组件","slug":"一、组件"},{"level":2,"title":"二、全局和局部注册组件","slug":"二、全局和局部注册组件"},{"level":3,"title":"全局注册","slug":"全局注册"},{"level":3,"title":"局部注册","slug":"局部注册"},{"level":2,"title":"三、组件名的命名方式","slug":"三、组件名的命名方式"},{"level":2,"title":"四、组件的特点","slug":"四、组件的特点"},{"level":3,"title":"单个根元素","slug":"单个根元素"},{"level":3,"title":"data必须是一个函数","slug":"data必须是一个函数"},{"level":2,"title":"五、组件嵌套","slug":"五、组件嵌套"},{"level":2,"title":"六、Prop","slug":"六、prop"},{"level":3,"title":"Props命名","slug":"props命名"},{"level":3,"title":"Props传递","slug":"props传递"},{"level":3,"title":"props类型判断","slug":"props类型判断"},{"level":3,"title":"单向数据流","slug":"单向数据流"},{"level":2,"title":"七、递归组件","slug":"七、递归组件"}],"relativePath":"src\\\\frontend\\\\Vue\\\\vue-03 组件 Prop.md","lastUpdated":1612089669891}',p={},o=s('<h1 id="vue-03-组件、props"><a class="header-anchor" href="#vue-03-组件、props" aria-hidden="true">#</a> Vue-03 组件、Props</h1><h2 id="一、组件"><a class="header-anchor" href="#一、组件" aria-hidden="true">#</a> 一、组件</h2><ol><li>概念：包含了View、Model、Methods等完整的具有独立功能的自定义元素</li><li>组件是vue框架核心内容，是重点</li><li>组件是可利用的Vue实例，所以组件与new Vue接收相同的选项，比如data、computed、methods等</li><li>每个组件都会各自独立维护它自己的变量，每使用一次组件，就会有一个它的新实例被创建 <ul><li>比如：创建一个按钮，点击一次加一，使用多个按钮，它们的计数是不一样的</li></ul></li></ol><h2 id="二、全局和局部注册组件"><a class="header-anchor" href="#二、全局和局部注册组件" aria-hidden="true">#</a> 二、全局和局部注册组件</h2><blockquote><p>创建好的组件名直接作为标签名放在挂载的元素内</p></blockquote><h3 id="全局注册"><a class="header-anchor" href="#全局注册" aria-hidden="true">#</a> 全局注册</h3><ul><li>所有挂载了Vue根实例的标签都可以使用该组件</li></ul><div class="language-js"><pre><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;组件名&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      template<span class="token operator">:</span> <span class="token string">&#39;标签&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="局部注册"><a class="header-anchor" href="#局部注册" aria-hidden="true">#</a> 局部注册</h3><ul><li>只能在当前Vue实例挂载元素内使用</li></ul><div class="language-js"><pre><code><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span>\n    el<span class="token operator">:</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>\n    components<span class="token operator">:</span><span class="token punctuation">{</span>\n        custom<span class="token operator">:</span><span class="token punctuation">{</span>\n            template<span class="token operator">:</span><span class="token string">&#39;&#39;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre></div><h2 id="三、组件名的命名方式"><a class="header-anchor" href="#三、组件名的命名方式" aria-hidden="true">#</a> 三、组件名的命名方式</h2><ol><li>建议使用带中划线的名字，可以避免关键字出错；</li><li>当命名为驼峰命名时，在使用组件时需要转写成中划线，否则报错</li><li>组件名带中划线必须加引号</li><li>强烈推荐遵循w3c规范中的自定义组件名（字母全小写且必须包含一个连字符），会避免html元素相冲突</li></ol><h2 id="四、组件的特点"><a class="header-anchor" href="#四、组件的特点" aria-hidden="true">#</a> 四、组件的特点</h2><h3 id="单个根元素"><a class="header-anchor" href="#单个根元素" aria-hidden="true">#</a> 单个根元素</h3><ol><li>只能有一个根节点，最外层只能是一个标签（对于注释节点、文本节点都不行）</li><li>建议每次创建组件时，可以先写一个div包裹</li></ol><h3 id="data必须是一个函数"><a class="header-anchor" href="#data必须是一个函数" aria-hidden="true">#</a> data必须是一个函数</h3><blockquote><p>创建的组件当中，使用data时，不能像之前那样直接点，因为每个组件返回的数据都应该是独立的，隔离的；</p></blockquote><div class="language-js"><pre><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        count<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="五、组件嵌套"><a class="header-anchor" href="#五、组件嵌套" aria-hidden="true">#</a> 五、组件嵌套</h2><ul><li>可以无穷的套components，组件嵌套需要将子组件放在父组件当中，将父组件放在挂载点中</li></ul><div class="language-js"><pre><code>parent<span class="token operator">:</span><span class="token punctuation">{</span>\n    template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;\n        &lt;child&gt;&lt;/child&gt;\n    &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>\n    components<span class="token operator">:</span><span class="token punctuation">{</span>\n        child<span class="token operator">:</span><span class="token punctuation">{</span>\n            template<span class="token operator">:</span><span class="token string">&#39;&lt;b&gt;&lt;/b&gt;&#39;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>内部组件也可以拿出来写</li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>\n    template<span class="token operator">:</span><span class="token string">&#39;&lt;b&gt;&lt;/b&gt;&#39;</span>\n<span class="token punctuation">}</span>\nparent<span class="token operator">:</span><span class="token punctuation">{</span>\n    template<span class="token operator">:</span>&#39;<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>child<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>&#39;\n    components<span class="token operator">:</span><span class="token punctuation">{</span>\n        child\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="六、prop"><a class="header-anchor" href="#六、prop" aria-hidden="true">#</a> 六、Prop</h2><blockquote><p>在组件当中，数据是不互通的，需要经过prop进行数据传递</p></blockquote><h3 id="props命名"><a class="header-anchor" href="#props命名" aria-hidden="true">#</a> Props命名</h3><ul><li>prop命名使用驼峰命名时，在html中需要转为减号分开</li></ul><div class="language-html"><pre><code>props:[myMessage] ----&gt; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">my-message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>hello<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><ul><li>在声明props的时候，其命名应该始终使用camelCase，而在模板和JSX中应该始终使用kebab-case</li><li>在javascript中更自然的是camelCase，而在html中则是kebab-case</li></ul><h3 id="props传递"><a class="header-anchor" href="#props传递" aria-hidden="true">#</a> Props传递</h3><ul><li>组件可以有任意数量的prop，在template里面像访问data值一样取值</li></ul><div class="language-html"><pre><code>Vue.component(&#39;blog-post&#39;, {\n      props: [&#39;title&#39;],\n      template: &#39;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>&#39;\n})\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>My journey with Vue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><ul><li>动态的props，当使用动态的props时，需要v-bind绑定属性</li></ul><div class="language-html"><pre><code>new Vue({\n  el: &#39;#blog-post-demo&#39;,\n  data: {\n    posts: [\n      { id: 1, title: &#39;My journey with Vue&#39; },\n      { id: 2, title: &#39;Blogging with Vue&#39; },\n      { id: 3, title: &#39;Why Vue is so fun&#39; }\n    ]\n  }\n})\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post in posts<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post.id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post.title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><ul><li>传递一个对象</li></ul><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>post<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>\npost:{name: &#39;hh&#39;,id: 18}\n\n<span class="token comment">&lt;!-- 等价于 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>post.hh<span class="token punctuation">&#39;</span></span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>post.id<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre></div><h3 id="props类型判断"><a class="header-anchor" href="#props类型判断" aria-hidden="true">#</a> props类型判断</h3><ul><li>当props需要限制时，传入的数据需要写成对象形式；如果不需要传入数据，可以写default默认数据，在传入prop也可以给定一个default的值，以防没有传入值，对于公共组件有很大的作用</li></ul><div class="language-js"><pre><code><span class="token comment">// 仅指定类型</span>\nprops<span class="token operator">:</span><span class="token punctuation">{</span>\n    msg<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    title<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    num<span class="token operator">:</span> Number<span class="token punctuation">,</span>\n    propA<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span>Number<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 指定其他</span>\nprop<span class="token operator">:</span><span class="token punctuation">{</span>\n    message<span class="token operator">:</span><span class="token punctuation">{</span>\n        type<span class="token operator">:</span>String<span class="token punctuation">,</span>  <span class="token comment">//检测类型必须是字符串类型</span>\n        required<span class="token operator">:</span><span class="token boolean">true</span>   <span class="token comment">//true为必须传递该属性;</span>\n        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span>  <span class="token comment">//如果没有传入的数据，则使用默认值;</span>\n        <span class="token comment">// 当传入的是对象或数组时</span>\n        <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>message<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 自定义验证</span>\n        <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;warrning&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>如果传入的默认值是对象或数组时，default需要是一个工厂函数</li></ul><div class="language-js"><pre><code><span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">{</span>message<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre></div><h3 id="单向数据流"><a class="header-anchor" href="#单向数据流" aria-hidden="true">#</a> 单向数据流</h3><p>所有的prop都使得其父子prop之间形成了一个单向下行绑定，父级prop的更新会向下流动到子组件上，但是反过来则不行，每次父组件更新时，子组件中所有的prop都将会刷新最新的值；</p><p>注意：在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变这个对象或数组本身<strong>将会</strong>影响到父组件的状态。</p><h2 id="七、递归组件"><a class="header-anchor" href="#七、递归组件" aria-hidden="true">#</a> 七、递归组件</h2><ul><li>组件在它的模板内可以递归的调用自己，只要给组件设置name组件就可以了</li><li>需要注意的是，递归必须有一个条件来限制数量</li><li>常用场景：联级选择器和树形控件</li></ul><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item,index) in treeArr<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> {{index}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tree</span> <span class="token attr-name">:item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.arr<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.flag<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tree</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 必须定义name，组件内部才能递归调用</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;tree&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 接收外部传入的值</span>\n  props<span class="token operator">:</span> <span class="token punctuation">{</span>\n     item<span class="token operator">:</span> <span class="token punctuation">{</span>\n      type<span class="token operator">:</span>Array<span class="token punctuation">,</span>\n      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',48);p.render=function(s,t,p,e,l,c){return n(),a("div",null,[o])};export default p;export{t as __pageData};
