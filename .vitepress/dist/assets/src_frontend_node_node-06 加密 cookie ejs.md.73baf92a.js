import{o as s,c as n,d as a}from"./app.beda3532.js";const e='{"title":"node-06 加密 cookie ejs","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、加密","slug":"一、加密"},{"level":2,"title":"二、cookie","slug":"二、cookie"},{"level":3,"title":"在nodejs使用cookie","slug":"在nodejs使用cookie"},{"level":3,"title":"在express中使用cookie","slug":"在express中使用cookie"},{"level":2,"title":"三、cookie-session","slug":"三、cookie-session"},{"level":3,"title":"cookie和session的区别","slug":"cookie和session的区别"},{"level":3,"title":"session与cookie的联系","slug":"session与cookie的联系"},{"level":2,"title":"四、模板引擎ejs","slug":"四、模板引擎ejs"},{"level":3,"title":"标签含义","slug":"标签含义"},{"level":3,"title":"ejs常用语法","slug":"ejs常用语法"},{"level":3,"title":"class使用变量","slug":"class使用变量"},{"level":3,"title":"ejs声名变量","slug":"ejs声名变量"},{"level":3,"title":"ejs作用域","slug":"ejs作用域"}],"relativePath":"src/frontend/node/node-06 加密 cookie ejs.md","lastUpdated":1615699077472}',o={},p=a('<h1 id="node-06-加密-cookie-ejs"><a class="header-anchor" href="#node-06-加密-cookie-ejs" aria-hidden="true">#</a> node-06 加密 cookie ejs</h1><h2 id="一、加密"><a class="header-anchor" href="#一、加密" aria-hidden="true">#</a> 一、加密</h2><ol><li>引入模板：<code>require(&#39;crypto&#39;)</code>；</li><li>散列算法(哈希)加密：</li></ol><p>散列算法也叫哈希算法，把任意长度的输入变换成固定长度的输出，常见有md5,sha1,sha256等,需要跟一个密钥，密钥随便写；</p><div class="language-js"><pre><code>crypto<span class="token punctuation">.</span><span class="token function">createHmac</span><span class="token punctuation">(</span><span class="token string">&#39;md5&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;hny#@!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&#39;hex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ol start="3"><li>哈希算法：</li></ol><div class="language-js"><pre><code>crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">&#39;md5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&#39;hex&#39;</span><span class="token punctuation">)</span>；\n</code></pre></div><p>加密之后的判断，再用户输入完成之后再次加密，再进行对比；</p><h2 id="二、cookie"><a class="header-anchor" href="#二、cookie" aria-hidden="true">#</a> 二、cookie</h2><p>主要解决http协议无状态问题（没有记忆）；</p><h3 id="在nodejs使用cookie"><a class="header-anchor" href="#在nodejs使用cookie" aria-hidden="true">#</a> 在nodejs使用cookie</h3><ul><li><p>设置：<code>res.setHeader(&#39;Set-Cookie&#39;,[&#39;name=hny&#39;,&#39;age=18&#39;])</code>;</p></li><li><p>获取：<code>req.headers</code>；（也可以使用中间件来获取req.cookie）</p></li></ul><h3 id="在express中使用cookie"><a class="header-anchor" href="#在express中使用cookie" aria-hidden="true">#</a> 在express中使用cookie</h3><p>安装中间件：<code>cookie-parser</code>；</p><div class="language-js"><pre><code><span class="token keyword">const</span> cookieParse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cookie-parser&#39;</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li><p>设置：<code>res.cookie(name,value[,option])</code>；</p><p>可选option：</p><ul><li><p><code>expires</code> : 时间对象 <code>new Date( Date.now() +1*24*60*60*1000 )</code></p></li><li><p><code>maxAge</code>：<code>1*24*60*60*1000</code>；以毫秒为单位；</p></li><li><p><code>httpOnly</code>：布尔值，客户端不能设置cookie；</p></li><li><p><code>path</code>：只允许指定的位置访问；</p></li><li><p><code>domain</code>：只允许指定的域名访问；</p></li></ul><p>修改host文件：C:\\Windows\\System32\\drivers\\etc；ip地址+域名；指定域名为本地域名；</p></li><li><p>获取：req.cookies；</p></li></ul><h2 id="三、cookie-session"><a class="header-anchor" href="#三、cookie-session" aria-hidden="true">#</a> 三、cookie-session</h2><p>安装中间件：<code>cookie-session</code></p><div class="language-js"><pre><code><span class="token keyword">const</span> cookieSession <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cookie-session&#39;</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieSession</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>对象里面</strong></p><ul><li><p>name: cookie名字，默认为session,</p></li><li><p>keys:[]；密钥，随意多个； 必填；需要方括号;</p></li><li><p>maxAge；过期时间，以毫秒为单位；</p></li></ul><p><strong>操作方法</strong></p><ul><li><p>设置cookie：<code>req.session.username = &#39;hny&#39;</code>;</p></li><li><p>获取cookie：<code>req.session.username</code>；</p></li></ul><p>如果需要删除cookie，可以让值等于空；</p><p>当cookie里面存有session id时，需要获取到存的cookie，需要设置相同的name和keys，才能通过req.session拿值；</p><h3 id="cookie和session的区别"><a class="header-anchor" href="#cookie和session的区别" aria-hidden="true">#</a> cookie和session的区别</h3><ul><li>（1）(失效) Session 会在浏览器关闭之后失效，Cookie 则可以在理论上永久有效(设置过期时间)。</li><li>（2）(存放) Cookie 数据存放在客户的浏览器上， Session 数据存放在服务器上。</li><li>（3）(黑客) Cookie 不安全，黑客可以分析本地的 Cookie, 并进行 Cookie 欺骗。 而 Session 保存在远程服务器上，相对安全（重要的信息应该存在session）;</li><li>（4）(限制) Cookie有大小限制，一般是4KB。 域名20-50个以内，Session 则没有这方面的限制。</li><li>（5）(禁用) 浏览器的设置可能禁用 Cookie，这时所有关于 Cookie 的应用都将失败，但是 Session 却永远不会有这个问题；</li></ul><h3 id="session与cookie的联系"><a class="header-anchor" href="#session与cookie的联系" aria-hidden="true">#</a> session与cookie的联系</h3><p>​ Session 依赖 cookie，因为 session id 存在客户端。</p><h2 id="四、模板引擎ejs"><a class="header-anchor" href="#四、模板引擎ejs" aria-hidden="true">#</a> 四、模板引擎ejs</h2><p>渲染页面：新闻列表页中的显示的内容不同，但显示的风格都一样，就可以作为一个模板，实际上就是渲染页面；</p><p>前端渲染：前端渲染都使用的ajax的技术，但不利于seo优化；</p><p>后端渲染：使用模板引擎，有利于seo优化；</p><ol><li>下载ejs包，之后不需要手动引入</li></ol><div class="language-js"><pre><code>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span> <span class="token string">&#39;view engine&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;ejs&#39;</span> <span class="token punctuation">)</span>  <span class="token comment">//设置引擎；</span>\napp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;views&#39;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>__dirname<span class="token operator">+</span><span class="token string">&#39;/views&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;template&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">//按照顺序指定模板目录</span>\napp<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">,</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ejs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__express<span class="token punctuation">)</span>     <span class="token comment">//告诉express html以ejs模板引擎去渲染</span>\n</code></pre></div><ol start="3"><li><code>res.render(&#39;index&#39;,[,data])</code>；使用ejs引擎；</li></ol><p>注意：传入的index文件不需要后缀，会自动去views文件夹中找模板文件，后面传入数据，多个可使用对象，在ejs模板中使用：</p><h3 id="标签含义"><a class="header-anchor" href="#标签含义" aria-hidden="true">#</a> 标签含义</h3><ul><li><code>&lt;%</code> &#39;脚本&#39; 标签，用于流程控制，无输出。</li><li><code>&lt;%_</code> 删除其前面的空格符</li><li><code>&lt;%=</code> 输出数据到模板（输出是转义 HTML 标签）</li><li><code>&lt;%-</code> 输出非转义的数据到模板</li><li><code>&lt;%#</code> 注释标签，不执行、不输出内容</li><li><code>&lt;%%</code> 输出字符串 &#39;&lt;%&#39;</li><li><code>%&gt;</code> 一般结束标签</li><li><code>-%&gt;</code> 删除紧随其后的换行符</li><li><code>_%&gt;</code> 将结束标签后面的空格符删除</li></ul><h3 id="ejs常用语法"><a class="header-anchor" href="#ejs常用语法" aria-hidden="true">#</a> ejs常用语法</h3><div class="language-js"><pre><code><span class="token comment">// 使用变量</span>\n<span class="token operator">&lt;</span><span class="token operator">%=</span> 变量<span class="token operator">%</span><span class="token operator">&gt;</span>\n\n<span class="token comment">// 使用模板</span>\n<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">include</span><span class="token punctuation">(</span><span class="token string">&#39;header&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span>\n    \n<span class="token comment">// 使用循环或判断方式</span>\n<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">%</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">%=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">&gt;</span>\n\n</code></pre></div><h3 id="class使用变量"><a class="header-anchor" href="#class使用变量" aria-hidden="true">#</a> class使用变量</h3><div class="language-ejs"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>fixed<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token delimiter punctuation">%&gt;</span></span> music-player <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">}</span> </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="ejs声名变量"><a class="header-anchor" href="#ejs声名变量" aria-hidden="true">#</a> ejs声名变量</h3><p>ejs还可以在外部声名变量，在内部直接使用，ejs也可以直接写js代码</p><div class="language-ejs"><pre><code><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">\n\t<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;hny&#39;</span>    \n</span><span class="token delimiter punctuation">%&gt;</span></span>\n&lt;div class=&#39;<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>class </span><span class="token delimiter punctuation">%&gt;</span></span>&#39;\n    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> name </span><span class="token delimiter punctuation">%&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="ejs作用域"><a class="header-anchor" href="#ejs作用域" aria-hidden="true">#</a> ejs作用域</h3><p>ejs是有作用域的，在ejs写的代码，必须使用ejs模板</p><div class="language-ejs"><pre><code><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">\n\t<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;hny&#39;</span>    \n</span><span class="token delimiter punctuation">%&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">var</span> curName <span class="token operator">=</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> name </span><span class="token delimiter punctuation">%&gt;</span></span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',49);o.render=function(a,e,o,t,c,l){return s(),n("div",null,[p])};export default o;export{e as __pageData};
