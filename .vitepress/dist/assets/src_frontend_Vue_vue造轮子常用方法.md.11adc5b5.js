import{o as n,c as s,d as a}from"./app.246f1876.js";const p='{"title":"Vue造轮子常用方法","description":"","frontmatter":{},"headers":[{"level":2,"title":"安装脚手脚","slug":"安装脚手脚"},{"level":2,"title":"ctrl+s格式化代码","slug":"ctrl-s格式化代码"},{"level":2,"title":"目录结构","slug":"目录结构"},{"level":2,"title":"配置vue.config.js","slug":"配置vue-config-js"},{"level":2,"title":"配置请求拦截器","slug":"配置请求拦截器"},{"level":2,"title":"环境配置","slug":"环境配置"},{"level":2,"title":"开启gzip压缩","slug":"开启gzip压缩"},{"level":2,"title":"封装Vuex","slug":"封装vuex"},{"level":2,"title":"Vuex数据持久化","slug":"vuex数据持久化"},{"level":2,"title":"创建全局的scss变量","slug":"创建全局的scss变量"},{"level":2,"title":"脚手架中使用全局过滤器","slug":"脚手架中使用全局过滤器"},{"level":2,"title":"全局Vue.directive","slug":"全局vue-directive"},{"level":2,"title":"注册全局组件","slug":"注册全局组件"},{"level":2,"title":"路由懒加载","slug":"路由懒加载"},{"level":2,"title":"拆分路由","slug":"拆分路由"},{"level":2,"title":"Vue路由 按需 keep-alive","slug":"vue路由-按需-keep-alive"},{"level":2,"title":"Mixin","slug":"mixin"},{"level":2,"title":"模块html里面调用console","slug":"模块html里面调用console"},{"level":2,"title":"配置svg","slug":"配置svg"},{"level":2,"title":"配置postcss插件","slug":"配置postcss插件"},{"level":2,"title":"配置mock","slug":"配置mock"}],"relativePath":"src/frontend/Vue/vue造轮子常用方法.md","lastUpdated":1615699077432}',t={},o=a('<h1 id="vue造轮子常用方法"><a class="header-anchor" href="#vue造轮子常用方法" aria-hidden="true">#</a> Vue造轮子常用方法</h1><h2 id="安装脚手脚"><a class="header-anchor" href="#安装脚手脚" aria-hidden="true">#</a> 安装脚手脚</h2><p>全局安装vue-cli</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli\n// or\n<span class="token function">yarn</span> global <span class="token function">add</span> @vue/cli\n\n// 安装之后就可以vue --version\n</code></pre></div><ol><li>生成脚手架：vue create demo or vue ui （使用图形化界面创建）</li><li>进入脚手架并安装：yarn add element-ui axios</li><li>关闭console：npm install terser-webpack-plugin -D</li><li>开启gzip压缩：npm install compression-webpack-plugin -D</li></ol><p>配置main.js</p><div class="language-js"><pre><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>\n<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;./router&#39;</span>\n<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span>\n<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n<span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">&#39;element-ui&#39;</span>\n<span class="token keyword">import</span> <span class="token string">&#39;element-ui/lib/theme-chalk/index.css&#39;</span>\n\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span>\nVue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    router<span class="token punctuation">,</span>\n    store<span class="token punctuation">,</span>\n    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="ctrl-s格式化代码"><a class="header-anchor" href="#ctrl-s格式化代码" aria-hidden="true">#</a> ctrl+s格式化代码</h2><p>将以下代码配置到vscode里，或者给单独项目放置：</p><p>在项目根目录创建.vscode/settings.json里；</p><p>需要的插件，在vscode添加：vetur、eslint</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;vetur.format.defaultFormatter.html&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;vetur.format.defaultFormatter.js&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;vetur.format.defaultFormatterOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;prettier&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;bracketSpacing&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;eslintIntegration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;eslint.validate&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;javascript&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;javascriptreact&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;language&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;autoFix&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;eslint.autoFixOnSave&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="目录结构"><a class="header-anchor" href="#目录结构" aria-hidden="true">#</a> 目录结构</h2><ul><li>dist</li><li>src <ul><li>api 接口请求</li><li>assets 静态资源</li><li>components 组件</li><li>router 路由</li><li>styles 样式</li><li>views 页面单文件</li><li>store 状态管理</li><li>utils 公共方法</li><li>config 全局配置</li></ul></li></ul><h2 id="配置vue-config-js"><a class="header-anchor" href="#配置vue-config-js" aria-hidden="true">#</a> 配置vue.config.js</h2><div class="language-js"><pre><code><span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token parameter">dir</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span>dir<span class="token punctuation">)</span> <span class="token comment">// 设置绝对路径;</span>\n<span class="token keyword">const</span> env <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    publicPath<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 部署路径 以当前目录</span>\n    outputDir<span class="token operator">:</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件目录(默认值dist)</span>\n    lintOnSave<span class="token operator">:</span> <span class="token string">&#39;warning&#39;</span><span class="token punctuation">,</span> <span class="token comment">// eslint是否在保存的时候检查</span>\n    <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 配置别名</span>\n        config<span class="token punctuation">.</span>resolve<span class="token punctuation">.</span>alias\n            <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;components&#39;</span><span class="token punctuation">,</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;@/components&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;assets&#39;</span><span class="token punctuation">,</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;@/assets&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;api&#39;</span><span class="token punctuation">,</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;@/api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">configureWebpack</span><span class="token operator">:</span> <span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        config<span class="token punctuation">.</span>devtool <span class="token operator">=</span> <span class="token string">&#39;#eval-source-map&#39;</span> <span class="token comment">// 开启debugger调试</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>env <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// 为生产环境修改配置...</span>\n            config<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token string">&#39;production&#39;</span>\n            <span class="token comment">// 生产环境关闭console</span>\n            config<span class="token punctuation">.</span>optimization<span class="token punctuation">.</span>minimizer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>terserOptions<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>drop_console <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token comment">// 配置gzip压缩</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$|\\.html$|\\.css</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 匹配文件名</span>\n                    threshold<span class="token operator">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>  <span class="token comment">// 对超过10k的数据进行压缩</span>\n                    deleteOriginalAssets<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 是否删除原文件</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 为开发环境修改配置...</span>\n            config<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token string">&#39;development&#39;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    productionSourceMap<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 生产环境是否生成sourceMap 文件,false提高构建速度</span>\n    devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n        host<span class="token operator">:</span> <span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 允许外部ip访问</span>\n        port<span class="token operator">:</span> <span class="token number">8022</span><span class="token punctuation">,</span> <span class="token comment">// 端口</span>\n        overlay<span class="token operator">:</span> <span class="token punctuation">{</span>\n            warnings<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            errors<span class="token operator">:</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        proxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token string">&#39;/api&#39;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>\n                target<span class="token operator">:</span> <span class="token string">&#39;http://www.baidu.com/api&#39;</span><span class="token punctuation">,</span>\n                changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//允许websockets跨域</span>\n                pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">&#39;^/api&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 第三方插件配置</span>\n    pluginOptions<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>sourceMap介绍</p><ul><li><p>是一个.map的文件，里面储存着位置信息，这个文件里保存的是转换后代码的位置，和对应的转换前的位置，有了它，出错的时候通过断点工具可以直接显示原始代码，而不是转换后的代码；</p></li><li><p>每个js文件对应一个.map文件，里面的基本信息如下</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n    version <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">//SourceMap的版本，目前为3</span>\n    sources<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;foo.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//转换前的文件，该项是一个数组，表示可能存在多个文件合并</span>\n    names<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;maps&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;are&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fun&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//转换前的所有变量名和属性名</span>\n    mappings<span class="token operator">:</span> <span class="token string">&quot;AACvB,gBAAgB,EAAE;AAClB;&quot;</span><span class="token punctuation">,</span> <span class="token comment">//记录位置信息的字符串</span>\n    file<span class="token operator">:</span> <span class="token string">&quot;out.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">//转换后的文件名</span>\n    sourcesContent<span class="token operator">:</span> <span class="token string">&quot; \\t// The module cache\\n&quot;</span><span class="token punctuation">,</span> <span class="token comment">//转换后的代码</span>\n    sourceRoot <span class="token operator">:</span> <span class="token string">&quot;&quot;</span> <span class="token comment">//转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><h2 id="配置请求拦截器"><a class="header-anchor" href="#配置请求拦截器" aria-hidden="true">#</a> 配置请求拦截器</h2><ol><li><p>创建src/api/index</p><div class="language-js"><pre><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Loading<span class="token punctuation">,</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;element-ui&#39;</span> <span class="token comment">// 请求loading可以自已更换</span>\n\n<span class="token comment">// 新建一个实例, 避免全局axios被污染;</span>\n<span class="token comment">// 如果这里不是create创建的axios, 当axios被添加一次路由拦截器之后, 项目任意地方再次引入axios, 会同样使用该拦截器;</span>\n<span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    timeout<span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token comment">// 超时</span>\n    withCredentials<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许cookie跨域</span>\n    baseURL<span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// 配置请求host</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> loading <span class="token operator">=</span> <span class="token keyword">null</span>\n<span class="token comment">// 配置请求</span>\nservice<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n    <span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        loading <span class="token operator">=</span> Loading<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">{</span>text<span class="token operator">:</span> <span class="token string">&#39;正在加载中....&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n        config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> localStorage<span class="token punctuation">[</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 给请求添加token</span>\n        <span class="token keyword">return</span> config\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token parameter">error</span> <span class="token operator">=&gt;</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n<span class="token comment">// 配置响应</span>\nservice<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n    <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>loading<span class="token punctuation">)</span> loading<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token comment">// ... 在这里处理统一code问题</span>\n        <span class="token keyword">return</span> response<span class="token punctuation">.</span>data\n\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>loading<span class="token punctuation">)</span> loading<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;timeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;请求超时, 请检查网络是否连接正常&#39;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;请求失败,请检查网络是否已连接&#39;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// 切换页面时候,取消上个页面的请求的方法，需要则打开</span>\n<span class="token comment">// Vue.$httpRequestList = []</span>\n<span class="token comment">// const cancelToken = () =&gt; {</span>\n<span class="token comment">//   return new axios.CancelToken(cancel =&gt; {</span>\n<span class="token comment">//     // cancel就是取消请求的方法</span>\n<span class="token comment">//     Vue.$httpRequestList.push({</span>\n<span class="token comment">//       cancel</span>\n<span class="token comment">//     })</span>\n<span class="token comment">//   })</span>\n<span class="token comment">// }</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> getData <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> headers<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n        url<span class="token punctuation">,</span>\n        method<span class="token operator">:</span> method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token comment">// cancelToken: cancelToken(),</span>\n        headers\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;get&#39;</span> <span class="token operator">||</span> method <span class="token operator">===</span> <span class="token string">&#39;delete&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 处理get请求防止IE缓存</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>window<span class="token punctuation">.</span>ActiveXObject <span class="token operator">||</span> <span class="token string">&#39;ActiveXObject&#39;</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            data<span class="token punctuation">.</span>t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 处理get请求的传参方式, get参数需要放在params下</span>\n        config<span class="token punctuation">.</span>params <span class="token operator">=</span> data\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        config<span class="token punctuation">.</span>data <span class="token operator">=</span> data\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">service</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>调接口方法，在api创建一个js文件，针对某个页面创建，如login.js</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>getData<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./index&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">login</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span>\n  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&#39;/auth/login&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>如果需要配置取消拦截器：在路由文件里面处理接口请求</p><div class="language-js"><pre><code><span class="token comment">// 路由切换检测是否强行中断</span>\nrouter<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>$httpRequestList <span class="token operator">&amp;&amp;</span> Vue<span class="token punctuation">.</span>$httpRequestList<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    Vue<span class="token punctuation">.</span>$httpRequestList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">request</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 取消没有响应的请求</span>\n      request<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">// 请求取消响应的数据</span>\n    Vue<span class="token punctuation">.</span>$httpRequestList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>在组件里面引入该请求的方法，直接调用传入参数即可</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> login <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;api/login&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span>\n    method<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token keyword">async</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment">// 处理成功之后的方法</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ol><h2 id="环境配置"><a class="header-anchor" href="#环境配置" aria-hidden="true">#</a> 环境配置</h2><ol><li><p>创建config/index.js</p><div class="language-js"><pre><code><span class="token comment">// 填写对应的网址</span>\n<span class="token keyword">const</span> globals <span class="token operator">=</span> <span class="token punctuation">{</span>\n    mock<span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>\n    host<span class="token operator">:</span> <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token string">&#39;https://test.heny.vip&#39;</span><span class="token punctuation">,</span>\n        pre<span class="token operator">:</span> <span class="token string">&#39;https://pre.heny.vip&#39;</span><span class="token punctuation">,</span>\n        prod<span class="token operator">:</span> <span class="token string">&#39;https://prod.heny.vip&#39;</span><span class="token punctuation">,</span>\n        uat<span class="token operator">:</span> <span class="token string">&#39;https://uat.heny.vip&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 在下面也可以写其他的全局配置</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> globals\n</code></pre></div></li><li><p>创建utils/common.js，里面放公共的方法</p><div class="language-js"><pre><code><span class="token keyword">import</span> Cookies <span class="token keyword">from</span> <span class="token string">&#39;js-cookie&#39;</span> <span class="token comment">// 用于存token的cookie</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>globals<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../globals&#39;</span>\n<span class="token comment">/**\n*    根据页面url, 返回对应的运行环境\n*/</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getCurrentEnv</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token punctuation">{</span>hostname<span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>location\n    <span class="token keyword">if</span><span class="token punctuation">(</span>\n        hostname<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n        hostname<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;10.105&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n        hostname<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;192.168&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> globals<span class="token punctuation">.</span>mock\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getHost</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> globals<span class="token punctuation">.</span>host<span class="token punctuation">[</span><span class="token function">getCurrentEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>在配置拦截路由里面引入common.js</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>getHost<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;utils/common&#39;</span>\naxios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div></li></ol><h2 id="开启gzip压缩"><a class="header-anchor" href="#开启gzip压缩" aria-hidden="true">#</a> 开启gzip压缩</h2><ol><li><p>安装：npm install compression-webpack-plugin -D</p></li><li><p>配置vue.config.js</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>export <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$|\\.html$|\\.css</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 匹配文件名</span>\n            threshold<span class="token operator">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>  <span class="token comment">// 对超过10k的数据进行压缩</span>\n            deleteOriginalAssets<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 是否删除原文件</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>要使服务器返回.gz文件，还需要对服务器进行配置，根据Request Headers的Accept-Encoding标签进行鉴别，如果支持gzip就返回.gz文件。</p></li><li><p>需要nginx配置，其实也可以不用配置，宝塔面板的nginx默认就已经配置好了</p><div class="language-bash"><pre><code>    <span class="token comment">#开启和关闭gzip模式</span>\n    <span class="token function">gzip</span> on<span class="token punctuation">;</span>\n    <span class="token comment">#gizp压缩起点，文件大于1k才进行压缩</span>\n    gzip_min_length 1k<span class="token punctuation">;</span>\n    <span class="token comment"># gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间</span>\n    gzip_comp_level <span class="token number">6</span><span class="token punctuation">;</span>\n    <span class="token comment"># 进行压缩的文件类型。</span>\n    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript <span class="token punctuation">;</span>\n    <span class="token comment">#nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩</span>\n    gzip_static on\n    <span class="token comment"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span>\n    gzip_vary on<span class="token punctuation">;</span>\n    <span class="token comment"># 设置gzip压缩针对的HTTP协议版本</span>\n    gzip_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>\n</code></pre></div></li></ol><h2 id="封装vuex"><a class="header-anchor" href="#封装vuex" aria-hidden="true">#</a> 封装Vuex</h2><ol><li><p>创建目录结构：</p><div class="language-"><pre><code>store\n --modules\n    --login.js\n --index.js\n --types.js\n</code></pre></div></li><li><p>在store/index.js写入</p><div class="language-js"><pre><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;Vuex&#39;</span>\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>\n<span class="token keyword">let</span> modules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> context <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">&#39;./modules&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>\ncontext<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.\\/(.*?)\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">context</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span>default\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    modules\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>配置好第二步之后就可以直接在modules里面创建单文件js了，不能再创建文件夹，因为不能找到里面的js文件，不能在自动引入了</p></li><li><p>modules里面的单文件js配置结构，和普通配置是一样的</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> types <span class="token keyword">from</span> <span class="token string">&#39;../types&#39;</span>\n<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">,</span>\n    mutations<span class="token punctuation">,</span>\n    actions<span class="token punctuation">,</span>\n    getters\n<span class="token punctuation">}</span>\n</code></pre></div></li></ol><h2 id="vuex数据持久化"><a class="header-anchor" href="#vuex数据持久化" aria-hidden="true">#</a> Vuex数据持久化</h2><ol><li><p>安装：npm i vuex-persistedstate</p></li><li><p>修改store</p><div class="language-js"><pre><code><span class="token keyword">import</span> createPersistedState <span class="token keyword">from</span> <span class="token string">&#39;vuex-persistedstate&#39;</span>\n<span class="token keyword">const</span> persistedStateOpt <span class="token operator">=</span> <span class="token punctuation">{</span>\n    storage<span class="token operator">:</span> window<span class="token punctuation">.</span>localStorage\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">createPersistedState</span><span class="token punctuation">(</span>persistedStateOpt<span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ol><h2 id="创建全局的scss变量"><a class="header-anchor" href="#创建全局的scss变量" aria-hidden="true">#</a> 创建全局的scss变量</h2><p>配置vue.config.js</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    css<span class="token operator">:</span> <span class="token punctuation">{</span>\n        loaderOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n            scss<span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 根据自己的路径设置</span>\n                prependData<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@import &quot;@/styles/variable.scss&quot;;</span><span class="token template-punctuation string">`</span></span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 如果上面的不行，将scss换成sass</span>\nsass<span class="token operator">:</span> <span class="token punctuation">{</span>\n    data<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@import &quot;@/styles/variable.scss&quot;;</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="脚手架中使用全局过滤器"><a class="header-anchor" href="#脚手架中使用全局过滤器" aria-hidden="true">#</a> 脚手架中使用全局过滤器</h2><p>需要引入Vue，之后定制全局filter</p><div class="language-js"><pre><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\nVue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">&#39;money&#39;</span><span class="token punctuation">,</span><span class="token parameter">val</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 需要返回;</span>\n<span class="token comment">// 在main.js里</span>\n<span class="token keyword">import</span> <span class="token string">&#39;./filters&#39;</span>\n</code></pre></div><h2 id="全局vue-directive"><a class="header-anchor" href="#全局vue-directive" aria-hidden="true">#</a> 全局Vue.directive</h2><div class="language-js"><pre><code><span class="token comment">// 全局自定义</span>\nVue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&quot;change-color&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding<span class="token punctuation">,</span>vnode</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  el<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 使用</span>\n<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>div v<span class="token operator">-</span>change<span class="token operator">-</span>color<span class="token operator">=</span>“color”<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n  <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>\n    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span><span class="token punctuation">{</span>\n        color<span class="token operator">:</span><span class="token string">&#39;green&#39;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre></div><h2 id="注册全局组件"><a class="header-anchor" href="#注册全局组件" aria-hidden="true">#</a> 注册全局组件</h2><ol><li>创建：./components/global/index.js，并写入以下代码，之后在main.js引入：import &#39;./components/global&#39;即可；</li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> <span class="token function-variable function">requireAll</span> <span class="token operator">=</span> <span class="token parameter">context</span> <span class="token operator">=&gt;</span> context<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n<span class="token keyword">let</span> context <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>\n<span class="token function">requireAll</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> item <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 第一个小括号匹配文件夹名 第二个小括号匹配文件名</span>\n  <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/(\\w+)\\/(\\w+).vue$</span><span class="token regex-delimiter">/</span></span>\n  <span class="token comment">// 引入组件时, 默认取组件里面的name属性, 如果没有name属性则取文件名, 如果文件名是index则取文件夹名, 注册的全局组件以my-[name]使用;</span>\n  <span class="token keyword">let</span> name <span class="token operator">=</span> item<span class="token punctuation">.</span>name <span class="token operator">||</span> item<span class="token punctuation">.</span>__file<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span>\n  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">my-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><ol start="2"><li>之后在global文件夹下面创建文件即可；</li></ol><h2 id="路由懒加载"><a class="header-anchor" href="#路由懒加载" aria-hidden="true">#</a> 路由懒加载</h2><p>使用import可以懒加载</p><div class="language-js"><pre><code>path<span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span>\nname<span class="token operator">:</span> <span class="token string">&#39;home&#39;</span><span class="token punctuation">,</span>\n<span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;src/views/home&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>修改懒加载引入的名字</p><ol><li><p>使用webpackChunkName定义懒加载的名字</p><div class="language-js"><pre><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: home*/</span> <span class="token string">&#39;src/views/home&#39;</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>使用[request]变量，可以解决循环import的找不到名字</p><div class="language-js"><pre><code>routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> route<span class="token punctuation">.</span>path<span class="token punctuation">,</span>\n    name<span class="token operator">:</span> route<span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;[request]&quot; */</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">src/views/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>route<span class="token punctuation">.</span>filePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ol><h2 id="拆分路由"><a class="header-anchor" href="#拆分路由" aria-hidden="true">#</a> 拆分路由</h2><ol><li><p>创建src/router/index.js文件</p><div class="language-js"><pre><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>\n\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span>\n<span class="token keyword">let</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> routerContext <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">index\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>\nrouterContext<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">route</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token comment">// 处理路由根目录的index.js</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;./index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n    <span class="token keyword">const</span> routerModule <span class="token operator">=</span> <span class="token function">routerContext</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>\n    <span class="token comment">// 兼容import export 和 require module.export 两种规范</span>\n    routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>routes<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>routerModule<span class="token punctuation">.</span>default <span class="token operator">||</span> routerModule<span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    mode<span class="token operator">:</span> <span class="token string">&#39;history&#39;</span><span class="token punctuation">,</span>\n    base<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">,</span>\n    routes\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>之后在router文件夹下面以 下面的方式创建文件路由</p><div class="language-js"><pre><code><span class="token comment">// Home/index.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n        path<span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span>\n        name<span class="token operator">:</span> <span class="token string">&#39;Home&#39;</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">components</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/views/Home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        meta<span class="token operator">:</span> <span class="token punctuation">{</span>\n            title<span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// 页面标题;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div></li></ol><h2 id="vue路由-按需-keep-alive"><a class="header-anchor" href="#vue路由-按需-keep-alive" aria-hidden="true">#</a> Vue路由 按需 keep-alive</h2><ol><li><p>测试方法，如果有keep-alive的路由；</p><p><img src="https://notecdn.heny.vip/images/Vue%E9%80%A0%E8%BD%AE%E5%AD%90_01.png" alt="image-20200406224427526"></p><p><img src="https://notecdn.heny.vip/images/Vue%E9%80%A0%E8%BD%AE%E5%AD%90_02.png" alt="image-20200406224453979"></p></li><li><p>将需要缓存和不需要缓存的视图组件区分开</p><ol><li><p>写2个router-view出口</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 需要缓存的视图组件 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>$route.meta.keepAlive<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">&lt;!-- 不需要缓存的视图组件 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>!$route.meta.keepAlive<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre></div></li><li><p>在router里定义好需要缓存的视图组件，deepth是深度，比如，index是0.5，list是1，detail是2，层级关系；</p><div class="language-js"><pre><code><span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    routes<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>\n            name<span class="token operator">:</span> <span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./views/keep-alive/index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            meta<span class="token operator">:</span> <span class="token punctuation">{</span> deepth<span class="token operator">:</span> <span class="token number">0.5</span> <span class="token punctuation">}</span> <span class="token comment">// 不需要缓存的直接不传入即可;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            path<span class="token operator">:</span> <span class="token string">&#39;/list&#39;</span><span class="token punctuation">,</span>\n            name<span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./views/keep-alive/list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            meta<span class="token operator">:</span> <span class="token punctuation">{</span> keepAlive<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> deepth<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token comment">// 需要缓存</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            path<span class="token operator">:</span> <span class="token string">&#39;/detail&#39;</span><span class="token punctuation">,</span>\n            name<span class="token operator">:</span> <span class="token string">&#39;detail&#39;</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token parameter">_</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./views/keep-alive/detail&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            meta<span class="token operator">:</span> <span class="token punctuation">{</span> deepth<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token comment">// 深度为2</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ol></li><li><p>按需加载keep-alive，include属性是当包括相同name属性时才保留，当是返回的时候，则删除，从index到list页再到详情页</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>include<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 需要缓存的视图组件 --&gt;</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$route.meta.keepAlive<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token comment">&lt;!-- 不需要缓存的视图组件 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>!$route.meta.keepAlive<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;app&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token parameter">_</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    watch<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">$route</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// 需要是缓存的组件</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>keepAlive<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment">// include里面没有之后再push</span>\n                <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>include<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>include<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// 查看深度关系，如果是大于要去的页面，则删除上一个页面；</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>keepAlive <span class="token operator">&amp;&amp;</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>deepth <span class="token operator">&lt;</span> <span class="token keyword">from</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>deepth<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment">// 查询的是从哪里来的页面</span>\n                <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>include<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n                index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>include<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>注意：keep-alive要求被包裹到的组件都有自己的名字，上面push和splice的是router的name名字，建议把router的name名字和组件的name名字设成一样的；</p><p><img src="https://notecdn.heny.vip/images/Vue%E9%80%A0%E8%BD%AE%E5%AD%90_03.png" alt="image-20200406224653969"></p></li></ol><h2 id="mixin"><a class="header-anchor" href="#mixin" aria-hidden="true">#</a> Mixin</h2><blockquote><p>主要是解决逻辑复用的问题的</p></blockquote><div class="language-js"><pre><code><span class="token comment">// news-mixin.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mixin被插入了111&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;add函数被执行&#39;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 复用的逻辑都可以写在new-mixin里面使用;</span>\n<span class="token comment">// home.vue</span>\n<span class="token keyword">import</span> newMixin <span class="token keyword">from</span> <span class="token string">&#39;./news-mixin&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;home&#39;</span><span class="token punctuation">,</span>\n    mixins<span class="token operator">:</span> <span class="token punctuation">[</span>newMixin<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="模块html里面调用console"><a class="header-anchor" href="#模块html里面调用console" aria-hidden="true">#</a> 模块html里面调用console</h2><ol><li><p>在main.js入口文件，绑定以下代码即可；</p><div class="language-vue"><pre><code>Vue.prototype.$log = window.console.log\n// 之后就可以在html里面打印了\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{$log(&#39;this is message&#39;)}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li></ol><h2 id="配置svg"><a class="header-anchor" href="#配置svg" aria-hidden="true">#</a> 配置svg</h2><ol><li><p>安装：npm i svg-sprite-loader</p></li><li><p>修改vue.config.js</p><div class="language-js"><pre><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token parameter">dir</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> dir<span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 解决默认svg不处理src/assets文件夹</span>\n        config<span class="token punctuation">.</span>module\n            <span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">&#39;svg&#39;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span>exclude<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src/assets&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        \n        config<span class="token punctuation">.</span>module\n            <span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">&#39;icons&#39;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span>include<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src/assets&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 处理svg目录</span>\n            <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;svg-sprite-loader&#39;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">&#39;svg-sprite-loader&#39;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                symbolId<span class="token operator">:</span> <span class="token string">&#39;icon-[name]&#39;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>在components下新建SvgIcon.vue</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>svgClass<span class="token punctuation">&quot;</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name">:xlink:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>iconName<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;SvgIcon&#39;</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> String<span class="token punctuation">,</span>\n      required<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    className<span class="token operator">:</span> <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> String<span class="token punctuation">,</span>\n      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  computed<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">iconName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#icon-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">svgClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>className<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&#39;svg-icon &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>className\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&#39;svg-icon&#39;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n<span class="token selector">.svg-icon</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>\n  <span class="token property">vertical-align</span><span class="token punctuation">:</span> -0.15em<span class="token punctuation">;</span>\n  <span class="token property">fill</span><span class="token punctuation">:</span> currentColor<span class="token punctuation">;</span>\n  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li><li><p>在assets目录下新建index.js</p><div class="language-js"><pre><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> SvgIcon <span class="token keyword">from</span> <span class="token string">&#39;@/components/SvgIcon&#39;</span><span class="token comment">// svg组件</span>\n\n<span class="token comment">// register globally</span>\nVue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;svg-icon&#39;</span><span class="token punctuation">,</span> SvgIcon<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">requireAll</span> <span class="token operator">=</span> <span class="token parameter">requireContext</span> <span class="token operator">=&gt;</span> requireContext<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>requireContext<span class="token punctuation">)</span>\n<span class="token keyword">const</span> req <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>\n<span class="token function">requireAll</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>\n</code></pre></div></li><li><p>将assets/index.js引入到main.js</p></li><li><p>接下来将需要使用svg的图片放入到assets/icons下面即可，会自动注册</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg-icon</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>文件名<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li></ol><h2 id="配置postcss插件"><a class="header-anchor" href="#配置postcss插件" aria-hidden="true">#</a> 配置postcss插件</h2><ol><li><p>在项目根目录创建postcss.config.js，postcss-pxtorem是自动转换rem；</p><p>配置样式官网教程： <a href="https://cli.vuejs.org/zh/guide/css.html" target="_blank" rel="noopener noreferrer">https://cli.vuejs.org/zh/guide/css.html</a></p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">{</span>\n        autoprefixer<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 浏览器自动前缀</span>\n        <span class="token comment">// 自动转rem布局的插件</span>\n        <span class="token string">&#39;postcss-pxtorem&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            rootValue<span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token comment">// 根大小</span>\n            propList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 属性选择器, *表示通用;</span>\n            selectorBlackList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;weui&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;mu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;no-&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 忽略选择器, 正则匹配,选择器有数组的都不转换;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>如果在创建项目时，没有选择postcss.config.js、babel、ESLint...单文件，选择了package.json，则需要在vue.config.js配置</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    css<span class="token operator">:</span> <span class="token punctuation">{</span>\n        loaderOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n            postcss<span class="token operator">:</span> <span class="token punctuation">{</span>\n                plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n                    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;postcss-pxtorem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                        rootValue<span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>\n                        <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>其他的插件<span class="token punctuation">;</span>\n                <span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ol><h2 id="配置mock"><a class="header-anchor" href="#配置mock" aria-hidden="true">#</a> 配置mock</h2><ol><li><p>安装mock：<code>npm i mockjs mocker-api -S</code></p></li><li><p>对修改vue.config.js：</p><div class="language-js"><pre><code><span class="token keyword">var</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> apiMocker <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mocker-api&#39;</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">before</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">apiMocker</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./mock/index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                proxy<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 需要设置代理的话</span>\n                changeHost<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>在项目根目录创建mock/index.js</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 支持值为 Object 和 Array</span>\n  <span class="token string">&#39;GET /api/users&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> users<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// GET 可忽略</span>\n  <span class="token string">&#39;/api/users/1&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 支持自定义函数，API 参考 express@4</span>\n  <span class="token string">&#39;POST /api/users/create&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 添加跨域请求头</span>\n    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>mock基本例子：</p><div class="language-js"><pre><code>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;data|80-100&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n          id<span class="token operator">:</span> <span class="token string">&#39;@id&#39;</span><span class="token punctuation">,</span>\n          name<span class="token operator">:</span> <span class="token string">&#39;@name&#39;</span><span class="token punctuation">,</span>\n          nicName<span class="token operator">:</span> <span class="token string">&#39;@last&#39;</span><span class="token punctuation">,</span>\n          phone<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[345678]\\d{9}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n          <span class="token string">&#39;age|11-99&#39;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          address<span class="token operator">:</span> <span class="token string">&#39;@county(true)&#39;</span><span class="token punctuation">,</span>\n          isMale<span class="token operator">:</span> <span class="token string">&#39;@boolean&#39;</span><span class="token punctuation">,</span>\n          email<span class="token operator">:</span> <span class="token string">&#39;@email&#39;</span><span class="token punctuation">,</span>\n          createTime<span class="token operator">:</span> <span class="token string">&#39;@datetime&#39;</span><span class="token punctuation">,</span>\n          <span class="token function">avatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> Mock<span class="token punctuation">.</span>Random<span class="token punctuation">.</span><span class="token function">image</span><span class="token punctuation">(</span><span class="token string">&#39;200*100&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;#894FC4&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;#FFF&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;png&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ol>',60);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
