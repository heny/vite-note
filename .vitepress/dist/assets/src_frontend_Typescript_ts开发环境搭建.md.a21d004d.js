import{o as s,c as n,d as a}from"./app.f5909e71.js";const t='{"title":"ts-01 开发环境搭建","description":"","frontmatter":{},"headers":[{"level":2,"title":"为什么要使用TS","slug":"为什么要使用ts"},{"level":2,"title":"TS大纲","slug":"ts大纲"},{"level":2,"title":"Typescript与Javascript的区别","slug":"typescript与javascript的区别"},{"level":2,"title":"开发环境搭建","slug":"开发环境搭建"},{"level":2,"title":"搭建环境","slug":"搭建环境"},{"level":3,"title":"全局安装typescript","slug":"全局安装typescript"},{"level":3,"title":"安装webpack打包","slug":"安装webpack打包"},{"level":3,"title":"配置webpack","slug":"配置webpack"},{"level":3,"title":"配置package.json","slug":"配置package-json"}],"relativePath":"src\\\\frontend\\\\Typescript\\\\ts开发环境搭建.md","lastUpdated":1615699077420}',e={},p=a('<h1 id="ts-01-开发环境搭建"><a class="header-anchor" href="#ts-01-开发环境搭建" aria-hidden="true">#</a> ts-01 开发环境搭建</h1><h2 id="为什么要使用ts"><a class="header-anchor" href="#为什么要使用ts" aria-hidden="true">#</a> 为什么要使用TS</h2><ol><li>维护项目时，你会发现ts非常的方便 比如：后端修改了一个字段，此时前端也需要更改，但是由于不知道哪些地方用到了该字段，这时就会出问题了； 如果你的项目是使用了ts，那么你只需要修改interface定义的类型字段，此时所有取该值的地方都会报错了，此时再去修改即可；</li></ol><h2 id="ts大纲"><a class="header-anchor" href="#ts大纲" aria-hidden="true">#</a> TS大纲</h2><p><img src="https://notecdn.heny.vip/images/image-20200602223954793.png" alt="image-20200602223954793"></p><h2 id="typescript与javascript的区别"><a class="header-anchor" href="#typescript与javascript的区别" aria-hidden="true">#</a> Typescript与Javascript的区别</h2><table><thead><tr><th style="text-align:center;">TypeScript</th><th style="text-align:center;">JavaScript</th></tr></thead><tbody><tr><td style="text-align:center;">JavaScript 的超集用于解决大型项目的代码复杂性</td><td style="text-align:center;">一种脚本语言，用于创建动态网页。</td></tr><tr><td style="text-align:center;">可以在编译期间发现并纠正错误</td><td style="text-align:center;">作为一种解释型语言，只能在运行时发现错误</td></tr><tr><td style="text-align:center;">强类型，支持静态和动态类型</td><td style="text-align:center;">弱类型，没有静态类型选项</td></tr><tr><td style="text-align:center;">最终被编译成 JavaScript 代码，使浏览器可以理解</td><td style="text-align:center;">可以直接在浏览器中使用</td></tr><tr><td style="text-align:center;">支持模块、泛型和接口</td><td style="text-align:center;">不支持模块，泛型或接口</td></tr><tr><td style="text-align:center;">支持 ES3，ES4，ES5 和 ES6 等</td><td style="text-align:center;">不支持编译其他 ES3，ES4，ES5 或 ES6 功能</td></tr><tr><td style="text-align:center;">社区的支持仍在增长，而且还不是很大</td><td style="text-align:center;">大量的社区支持以及大量文档和解决问题的支持</td></tr></tbody></table><h2 id="开发环境搭建"><a class="header-anchor" href="#开发环境搭建" aria-hidden="true">#</a> 开发环境搭建</h2><p>ts在线编辑器：<a href="https://www.typescriptlang.org/play/" target="_blank" rel="noopener noreferrer">https://www.typescriptlang.org/play/</a></p><p>TS不能直接运行在浏览器环境，需要先编译成js（依赖node环境）</p><p>安装：npm i typescript -g；</p><p>运行ts：tsc xxx.ts 即可编译为js</p><h2 id="搭建环境"><a class="header-anchor" href="#搭建环境" aria-hidden="true">#</a> 搭建环境</h2><ul><li><p>初始化项目：<code>npm init -y</code></p></li><li><p>vscode安装插件：<code>tslint、tslint(deprecated)</code></p></li></ul><h3 id="全局安装typescript"><a class="header-anchor" href="#全局安装typescript" aria-hidden="true">#</a> 全局安装typescript</h3><p><code>npm i typescript tslint -g</code></p><p>安装全局typescript之后，在项目根目录执行<code>tsc --init</code>生成<code>tsconfig.json</code>文件</p><h3 id="安装webpack打包"><a class="header-anchor" href="#安装webpack打包" aria-hidden="true">#</a> 安装webpack打包</h3><ul><li><p><code>npm install webpack webpack-cli webpack-dev-server -D</code></p></li><li><p><code>npm install ts-loader cross-env html-webpack-plugin clean-webpack-plugin -D</code></p><ul><li><code>cross-env</code> 传输环境</li></ul></li></ul><h3 id="配置webpack"><a class="header-anchor" href="#配置webpack" aria-hidden="true">#</a> 配置webpack</h3><div class="language-js"><pre><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    entry<span class="token operator">:</span> <span class="token string">&#39;./src/index.ts&#39;</span><span class="token punctuation">,</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span>\n        filename<span class="token operator">:</span> <span class="token string">&#39;main.js&#39;</span><span class="token punctuation">,</span>\n        path<span class="token operator">:</span> <span class="token string">&#39;dist&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    module<span class="token operator">:</span> <span class="token punctuation">{</span>\n        roles<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.tsx?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n            use<span class="token operator">:</span> <span class="token string">&#39;ts-loader&#39;</span><span class="token punctuation">,</span>\n            exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_module</span><span class="token regex-delimiter">/</span></span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n        extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.ts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.tsx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.json&#39;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n        contentBase<span class="token operator">:</span> <span class="token string">&#39;./dist&#39;</span><span class="token punctuation">,</span>\n        compress<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        host<span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>\n        stats<span class="token operator">:</span> <span class="token string">&#39;errors-only&#39;</span><span class="token punctuation">,</span>\n        port<span class="token operator">:</span> <span class="token number">8089</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    devtool<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token string">&#39;inline-source-map&#39;</span><span class="token punctuation">,</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            cleanOnceBeforeBuildPatterns<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./dist&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 打包时清除dist目录</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            template<span class="token operator">:</span> <span class="token string">&#39;./src/template/index.html&#39;</span> <span class="token comment">// 放入模板文件</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="配置package-json"><a class="header-anchor" href="#配置package-json" aria-hidden="true">#</a> 配置package.json</h3><div class="language-json"><pre><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=development webpack-dev-server --config ./build/webpac.config.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=production webpack --config ./build/webpack.config.js&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',23);e.render=function(a,t,e,o,c,l){return s(),n("div",null,[p])};export default e;export{t as __pageData};
