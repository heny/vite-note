import{o as n,c as s,d as a}from"./app.beda3532.js";const p='{"title":"js-07 字符串、对象","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、字符串","slug":"一、字符串"},{"level":3,"title":"查找 indexof","slug":"查找-indexof"},{"level":3,"title":"截取 slice","slug":"截取-slice"},{"level":3,"title":"分割 split","slug":"分割-split"},{"level":3,"title":"替换 replace","slug":"替换-replace"},{"level":3,"title":"比较 localeCompare","slug":"比较-localecompare"},{"level":3,"title":"转换 Unicode码","slug":"转换-unicode码"},{"level":3,"title":"大小写","slug":"大小写"},{"level":3,"title":"trim","slug":"trim"},{"level":2,"title":"二、字符串扩展","slug":"二、字符串扩展"},{"level":3,"title":"padStart、 padEnd","slug":"padstart、-padend"},{"level":2,"title":"三、字符串的html方法","slug":"三、字符串的html方法"},{"level":2,"title":"四、URI编码","slug":"四、uri编码"},{"level":2,"title":"五、对象方法","slug":"五、对象方法"},{"level":3,"title":"原型对象","slug":"原型对象"},{"level":3,"title":"其他方法","slug":"其他方法"},{"level":2,"title":"高频面试题","slug":"高频面试题"}],"relativePath":"src/frontend/Javascript/js-07 字符串、对象.md","lastUpdated":1615699077384}',t={},o=a('<h1 id="js-07-字符串、对象"><a class="header-anchor" href="#js-07-字符串、对象" aria-hidden="true">#</a> js-07 字符串、对象</h1><h2 id="一、字符串"><a class="header-anchor" href="#一、字符串" aria-hidden="true">#</a> 一、字符串</h2><h3 id="查找-indexof"><a class="header-anchor" href="#查找-indexof" aria-hidden="true">#</a> 查找 indexof</h3><ol><li><p><code>变量.charAt(n)</code> 返回指定下标对应的字符，</p><p>用中括号的形式使用比较多：变量[n]: IE7及以下不支持；</p></li><li><p><code>s.indexOf(value,[,num])</code>;</p><ul><li><p>一个参数：返回指定字符第一次出现的位置对应下标，没有时返回-1；</p></li><li><p>两个参数：指定位置开始查找前面的字符，传入负数，默认为0；</p><p>如果需要查找是否有敏感词，可以判断是否不等于-1</p></li></ul></li><li><p><code>s.lastindexOf(&quot;w&quot;)</code>; 从后往左找，返回指定字符或字符串最后一次出现的位置；不影响下标，还是一样的，从左到右；</p></li></ol><h3 id="截取-slice"><a class="header-anchor" href="#截取-slice" aria-hidden="true">#</a> 截取 slice</h3><ol><li><p><code>slice([n],[m])</code>；</p><div class="language-js"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;abcdefg&#39;</span>\nstr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; abcdefg    不填参数，返回全部；</span>\nstr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; bcdefg    只有n时，从n开始截取到结束</span>\nstr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; bc      n,m时, 从n截取到m, 不包括m</span>\nstr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; empty  n&gt;m时, 返回空字符串</span>\nstr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; g        负数从后面开始截取指定的负值数量</span>\n</code></pre></div></li><li><p><code>substring([n],[m])</code>；</p><p>与slice区别为：n&gt;m自动转换下标，负数从0开始</p><div class="language-js"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;abcdefg&#39;</span>\nstr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; bc     n&gt;m时, 自动转换下标</span>\nstr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; abcdefg  负数从0开始</span>\n</code></pre></div></li><li><p><code>substr(index，num)</code>；</p><p>与前两个区别从下标截取多少个；</p><div class="language-js"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;abcdefg&#39;</span>\nstr<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; bcd     n,m时, 从n截取m个</span>\nstr<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// =&gt; g        负数时, 从后面截取</span>\n</code></pre></div></li></ol><h3 id="分割-split"><a class="header-anchor" href="#分割-split" aria-hidden="true">#</a> 分割 split</h3><p><code>split(str,m)</code>；</p><p>以指定字符分割成数组，可以规定分割多少个，其余被省略；</p><ul><li><p>不填参数时：一个数组；</p></li><li><p>一对引号：分割每个字符；</p></li></ul><p>数组的方法：</p><p>字符串变数组：<code>split()</code>;</p><p>数组变字符串：<code>join()</code>;</p><h3 id="替换-replace"><a class="header-anchor" href="#替换-replace" aria-hidden="true">#</a> 替换 replace</h3><p><code>变量.replace(被替换的字符，新字符)</code>；</p><p>如果需要多个可以：<code>变量.replace().replace()</code>;</p><p>返回被替换的字符，只能替换一次；</p><h3 id="比较-localecompare"><a class="header-anchor" href="#比较-localecompare" aria-hidden="true">#</a> 比较 localeCompare</h3><p>字符串是一位一位的比较，比如a=&quot;18&quot;,b=&quot;2&quot;，则b&gt;a;</p><ul><li><p>如果字符串在字母表中应该排在字符串参数之前，返回负数</p></li><li><p>如果相等，返回0</p></li><li><p>如果在参数之后，返回正数；</p></li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> stringV <span class="token operator">=</span> <span class="token string">&#39;yellow&#39;</span>\nstringV<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span><span class="token string">&#39;brick&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\nstringV<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span><span class="token string">&#39;yellow&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>\nstringV<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span><span class="token string">&#39;zoo&#39;</span><span class="token punctuation">)</span> <span class="token comment">// -1</span>\n</code></pre></div><h3 id="转换-unicode码"><a class="header-anchor" href="#转换-unicode码" aria-hidden="true">#</a> 转换 Unicode码</h3><p>将字符串转换成Unicode码：<code>charCodeAt</code>（传入下标）</p><p>将Unicode码转换成字符串：<code>String.fromChartCode</code></p><div class="language-js"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>\nstr<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 104</span>\nstr<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 111</span>\nString<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">)</span> <span class="token comment">// hello</span>\n</code></pre></div><h3 id="大小写"><a class="header-anchor" href="#大小写" aria-hidden="true">#</a> 大小写</h3><ul><li><p><code>toLowerCase()</code>;直接转变小写；</p></li><li><p><code>toUpperCase()</code>; 转换成大写；</p></li><li><p><code>toLocaleLowerCase()</code>; 本地转换小写；</p></li><li><p><code>toLocaleUpperCase()</code>; 本地转换成大写；</p></li></ul><h3 id="trim"><a class="header-anchor" href="#trim" aria-hidden="true">#</a> trim</h3><p>清除左右空格；</p><p><code>str.trim()</code></p><h2 id="二、字符串扩展"><a class="header-anchor" href="#二、字符串扩展" aria-hidden="true">#</a> 二、字符串扩展</h2><ul><li><p><code>includes(str)</code> : 判断是否包含指定的字符串 true|false === indexOf</p><p>也可以用于数组；仅适用于普通类型的数组，不包含对象的数组；</p></li><li><p><code>startsWith(str)</code> : 判断是否以指定字符串开头</p></li><li><p><code>endsWith(str)</code> : 判断是否以指定字符串结尾</p></li><li><p><code>repeat(count)</code> : 重复指定次数 返回一个新的字符串</p></li></ul><h3 id="padstart、-padend"><a class="header-anchor" href="#padstart、-padend" aria-hidden="true">#</a> padStart、 padEnd</h3><ol><li><p>接收两个参数，第一个参数为最小长度，第二个参数为补全字符串；</p><p><code>&#39;1&#39;.padStart(2,&#39;0&#39;)</code> //返回 &#39;01&#39;</p><p><code>&#39;1&#39;.padEnd(2,&#39;0&#39;)</code> //返回 &#39;10&#39;</p></li><li><p>如果原字符串等于或大于指定的最小长度，则返回原字符串；</p><p><code>&#39;10&#39;.padStart(2,&#39;0&#39;)</code> //返回 &#39;10&#39;</p></li><li><p>如果原字符串的长度小于补全字符串的长度，则截去超出位数的补全字符串；</p><p><code>&#39;09-12&#39;.padStart(10, &#39;YYYY-MM-DD&#39;)</code> // &quot;YYYY-09-12&quot;</p><p><code>&#39;09-12&#39;.padEnd(10, &#39;YYYY-MM-DD&#39;)</code> // &quot;09-12YYYY-&quot;</p></li></ol><p>字符串的练习：</p><div class="language-js"><pre><code><span class="token comment">//网站常用</span>\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;?user=18788889999&amp;psd=abcdefgg123&amp;code=Z4dCU4&amp;message=&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span>     <span class="token comment">//先以?号拆再以&amp;拆</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//声明一个对象 保留数据</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> ss <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;user&quot;</span> <span class="token operator">||</span> ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;psd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//如果是user或psd就保留</span>\n        obj<span class="token punctuation">[</span>ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>将字符串倒过来：</p><div class="language-js"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello Word!&quot;</span>\nstr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="三、字符串的html方法"><a class="header-anchor" href="#三、字符串的html方法" aria-hidden="true">#</a> 三、字符串的html方法</h2><p>不建议使用这些方法，因为它们创建的标签通常无法表达语义；</p><ul><li>big标签：<code>big()</code></li><li>b标签：<code>bold()</code></li><li>i标签：<code>italics()</code></li><li>tt标签：<code>fixed()</code></li><li>font color标签：<code>fontcolor(color)</code></li><li>font size标签：<code>fontsize(size)</code></li><li>a标签：<code>link(url)</code></li><li>a name标签：<code>anchor(name)</code>；</li><li>small标签：<code>small()</code></li><li>strike标签：<code>strike()</code></li><li>sub标签：<code>sub()</code></li><li>sup标签：<code>sup()</code></li></ul><div class="language-js"><pre><code><span class="token string">&#39;wyy&#39;</span><span class="token punctuation">.</span><span class="token function">link</span><span class="token punctuation">(</span><span class="token string">&#39;http://wyy.heny.vip&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &lt;a href=&#39;http://wyy.heny.vip&#39;&gt;wyy&lt;/a&gt;</span>\n<span class="token string">&#39;str&#39;</span><span class="token punctuation">.</span><span class="token function">fontcolor</span><span class="token punctuation">(</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &lt;font color=&#39;red&#39;&gt;str&lt;/font&gt;</span>\n</code></pre></div><h2 id="四、uri编码"><a class="header-anchor" href="#四、uri编码" aria-hidden="true">#</a> 四、URI编码</h2><ul><li><code>encodeURI</code>：主要是针对整体URI进行编码，不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号；</li><li><code>encodeURIComponent</code>：主要针对URI的某一段进行编码</li><li><code>decodeURI</code>：对encodeURI进行解码</li><li><code>decodeURIComponent</code>：对encodeURIComponent进行解码</li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> uri <span class="token operator">=</span> <span class="token string">&#39;http://www.wrox.com/illegal value.html#start&#39;</span>\n<span class="token function">encodeURI</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span> <span class="token comment">//http://www.wrox.com/illegal%20value.html#start</span>\n<span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span> <span class="token comment">// http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.html%23start</span>\n</code></pre></div><p>实践中常用<code>encodeURIComponent</code>；</p><h2 id="五、对象方法"><a class="header-anchor" href="#五、对象方法" aria-hidden="true">#</a> 五、对象方法</h2><h3 id="原型对象"><a class="header-anchor" href="#原型对象" aria-hidden="true">#</a> 原型对象</h3><ol><li><p><code>Object.defineProperty(obj,attr,descriptor)</code></p><p>修改或添加一个属性，通过defineProperty可以劫持一个对象的修改；</p><p>每个对象值都有三个属性：configurable、writable、enumerable；</p><p>如果直接用defineProperty创建的属性，将默认三个属性均为false，直接创建的对象三个属性默认为true</p><div class="language-js"><pre><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    configurable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// configurable只能设置一次，再次设置将报错</span>\n    writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token string">&#39;hny&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p><code>Object.defineProperties(obj,props)</code></p><p>添加或修改多个新属性；</p><div class="language-js"><pre><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    edition<span class="token operator">:</span> <span class="token punctuation">{</span>\n        writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        value<span class="token operator">:</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token punctuation">{</span>\n        writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        value<span class="token operator">:</span> <span class="token number">18</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p><code>Object.getOwnPropertyDescriptor(obj, props)</code></p><p>取得给定属性的描述符；</p></li><li><p><code>obj.isPrototypeOf</code></p><p>检测对象是否是另一个对象的原型</p><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;haha&#39;</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\nobj<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n\n<span class="token comment">// 构造函数使用原型去对比;</span>\n<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n</code></pre></div></li><li><p><code>Object.getPrototypeOf()</code></p><p>获取一个对象的原型；</p></li><li><p><code>Object.setPrototypeOf(obj1,obj2)</code></p><p>将obj2作为原型放到obj1身上，会直接修改obj1返回一个obj2；</p></li><li><p><code>obj.hasOwnProperty()</code></p><p>判断某个属性是否存在于某个对象当中，也可以使用in</p><p>hasOwnProperty不会判断到原型去，</p><p><code>in</code> 操作符判断对象能否访问给定属性时返回true，否则返回false；</p><p>判断一个对象是原型的属性：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">hasPrototypeProperty</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 不是实例身上的，in操作符判断能否获取到值;</span>\n    <span class="token keyword">return</span> <span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> name <span class="token keyword">in</span> obj\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p><code>Object.create</code></p><p>返回一个新对象，将传入的对象放到新对象的原型上，可以直接通过；</p><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;hhh&#39;</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">// {}</span>\nobj2<span class="token punctuation">.</span>name  <span class="token comment">// hhh</span>\n</code></pre></div></li><li><p><code>Object.getOwnpropertyNames()</code></p><p>返回对象自身的全部属性名称；</p></li></ol><h3 id="其他方法"><a class="header-anchor" href="#其他方法" aria-hidden="true">#</a> 其他方法</h3><ol><li><p><code>Object.is(value1,value2)</code></p><p>判断两个值是否相等，通过Object.is判断，两个NaN是相等的；</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>\n</code></pre></div></li><li><p><code>Object.assign(target,source.......)</code></p><p>合并对象，返回一个新对象，将多个source对象组合到target对象身上；</p></li><li><p><code>Object.keys</code></p><p>以数组的形式返回对象所有的key值，通过遍历返回的数组，再次调用原来的对象，取得所有的value值;</p><p>该方法不会返回不可枚举的属性；</p><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>d<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> objArr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">:</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// [{a:1},{b:2}....]</span>\n</code></pre></div></li><li><p><code>Object.values</code></p><p>以数组的形式返回对象所有的value值;</p></li><li><p><code>Object.entries</code></p><p>以二维数组的形式返回传入的对象，相当于es6里面的map对象；</p></li><li><p><code>Object.fromEntries</code></p><p>以对象的形式返回传入的二维数组对象；</p></li><li><p><code>Object.freeze(obj)</code></p><p>冻结一个对象，一个被冻结的对象不能被修改;（只是冻结值，引用不会被冻结）</p><p>不能被修改是不能直接修改对象的基本类型的值，如果对象被重新赋值，还是可以被修改的；</p><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;hhh&#39;</span><span class="token punctuation">}</span>\nObject<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\nobj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;sss&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// {name: &#39;hhh&#39;}</span>\n\nobj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;sss&#39;</span><span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;hny&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// {name: &#39;hny&#39;}</span>\n</code></pre></div></li><li><p><code>Object.isFrozen(obj)</code></p><p>判断一个对象是否是冻结状态</p></li></ol><h2 id="高频面试题"><a class="header-anchor" href="#高频面试题" aria-hidden="true">#</a> 高频面试题</h2><p>● js 有哪些内置对象？</p><p>● 把下面的字符串去重，并去除掉特殊字符按照数字在前字母在后的顺序排序字符串</p><p>如下：“1233fddfd&amp;3434fdsaff&amp;454545&amp;4545444rfdsfds&amp;545gdsgs”</p><p>● 截取字符串“abcdefg”中的 def。</p><p>● 有这样一个 url：<a href="http://item.taobo.com/item.html?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e" target="_blank" rel="noopener noreferrer">http://item.taobo.com/item.html?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e</a>, 请写 一段 js 程序提取 url 中各个 get 参数 ( 参数名和参数个数不确定 )，将其 key-value 形式返回到一个 json 结构中，如 {a:“1”,b:“2”，c:“”，d：“xxx”，e:undefined}</p><p>● 判断一个字符串中出现次数最多的字符，并且统计次数。</p>',58);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
