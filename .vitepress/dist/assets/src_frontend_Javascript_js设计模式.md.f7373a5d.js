import{o as n,c as s,d as a}from"./app.1237ae02.js";const p='{"title":"JS设计模式","description":"","frontmatter":{},"headers":[{"level":2,"title":"设计原则","slug":"设计原则"},{"level":2,"title":"什么是设计模式","slug":"什么是设计模式"},{"level":2,"title":"单例模式","slug":"单例模式"},{"level":2,"title":"策略模式","slug":"策略模式"},{"level":2,"title":"代理模式","slug":"代理模式"},{"level":2,"title":"Object.defineProperty实现深度监听 （观察者模式）","slug":"object-defineproperty实现深度监听-（观察者模式）"},{"level":2,"title":"简易的观察者模式","slug":"简易的观察者模式"},{"level":2,"title":"发布订阅模式","slug":"发布订阅模式"}],"relativePath":"src/frontend/Javascript/js设计模式.md","lastUpdated":1626625987708}',t={},o=a('<h1 id="js设计模式"><a class="header-anchor" href="#js设计模式" aria-hidden="true">#</a> JS设计模式</h1><p>参考地址：<a href="https://www.cnblogs.com/imwtr/p/9451129.html#o1" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/imwtr/p/9451129.html#o1</a></p><h2 id="设计原则"><a class="header-anchor" href="#设计原则" aria-hidden="true">#</a> 设计原则</h2><p><strong>单一职责原则（SRP）</strong></p><p>一个对象或方法只做一件事情。如果一个方法承担了过多的职责，那么在需求的变迁过程中，需要改写这个方法的可能性就越大。</p><p>应该把对象或方法划分成较小的粒度</p><p><strong>最少知识原则（LKP）</strong></p><p>一个软件实体应当 尽可能少地与其他实体发生相互作用</p><p>应当尽量减少对象之间的交互。如果两个对象之间不必彼此直接通信，那么这两个对象就不要发生直接的 相互联系，可以转交给第三方进行处理</p><p><strong>开放-封闭原则（OCP）</strong></p><p>软件实体（类、模块、函数）等应该是可以 扩展的，但是不可修改</p><p>当需要改变一个程序的功能或者给这个程序增加新功能的时候，可以使用增加代码的方式，尽量避免改动程序的源代码，防止影响原系统的稳定</p><h2 id="什么是设计模式"><a class="header-anchor" href="#什么是设计模式" aria-hidden="true">#</a> 什么是设计模式</h2><blockquote><p>假设有一个空房间，我们要日复一日地往里 面放一些东西。最简单的办法当然是把这些东西 直接扔进去，但是时间久了，就会发现很难从这 个房子里找到自己想要的东西，要调整某几样东 西的位置也不容易。所以在房间里做一些柜子也 许是个更好的选择，虽然柜子会增加我们的成 本，但它可以在维护阶段为我们带来好处。使用 这些柜子存放东西的规则，或许就是一种模式</p></blockquote><p>学习设计模式，有助于写出可复用和可维护性高的程序</p><p>设计模式的原则是“找出 程序中变化的地方，并将变化封装起来”，它的关键是意图，而不是结构。</p><p>不过要注意，使用不当的话，可能会事倍功半。</p><h2 id="单例模式"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h2><p>定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">SetManager</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">SetManager</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            instance <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> instance\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> single <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SetManager</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> manager<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="策略模式"><a class="header-anchor" href="#策略模式" aria-hidden="true">#</a> 策略模式</h2><p>定义：定义一系列的算法，把它们封装起来，并且使他们可以相互替换</p><p>策略模式可以用于组合一系列算法，也可用于组合一系列业务规则</p><p>策略模式的程序至少由两个部分组成</p><p>第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程</p><p>第二部分是环境类，接受客户的请求，随后把请求委托给某一个策略类</p><div class="language-js"><pre><code><span class="token comment">// 加权映射关系</span>\n<span class="token keyword">var</span> levelMap <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token constant">S</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    <span class="token constant">A</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>\n    <span class="token constant">B</span><span class="token operator">:</span> <span class="token number">6</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 组策略</span>\n<span class="token keyword">var</span> scoreLevel <span class="token operator">=</span> <span class="token punctuation">{</span>\n    basicScore<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">S</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>basicScore <span class="token operator">+</span> levelMap<span class="token punctuation">[</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">A</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>basicScore <span class="token operator">+</span> levelMap<span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">B</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>basicScore <span class="token operator">+</span> levelMap<span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 调用</span>\n<span class="token keyword">function</span> <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token parameter">level</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> scoreLevel<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">?</span> scoreLevel<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n\t<span class="token function">getScore</span><span class="token punctuation">(</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 90</span>\n    <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 88</span>\n    <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 86</span>\n<span class="token punctuation">)</span>\n</code></pre></div><h2 id="代理模式"><a class="header-anchor" href="#代理模式" aria-hidden="true">#</a> 代理模式</h2><p>定义：为一个对象提供一个代用品或点位符，以便控制对它的访问</p><p>代理模式主要有三种：保护代理、虚拟代理、缓存代理</p><p>保护代理主要实现访问主体的限制</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">proxyMsg</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> msg <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;deny&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 有消息，进行过滤</span>\n    msg <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">泥\\s*煤</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n    <span class="token function">sendMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>虚拟代理在控制对主体的访问时，加入了一些额外的操作，比如为了避免频繁触发滚动事件，函数防抖是一种虚拟代理的实现</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>wait<span class="token operator">=</span><span class="token number">500</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment">// 通过闭包定义一个空的定时器;</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 必须返回一个函数，否则不成功;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n            <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;防抖成功&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// 可以传入一个函数执行</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>wait<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 主体</span>\n<span class="token keyword">function</span> <span class="token function">scrollHandle</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">,</span> <span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// scroll</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 代理</span>\n<span class="token keyword">var</span> proxyScrollHandle <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>scrollHandle<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwindow<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> proxyScrollHandle<span class="token punctuation">;</span>\n</code></pre></div><p>缓存代理可以为一些开销大的运算结果提供暂时的缓存，提升效率</p><div class="language-js"><pre><code>\n</code></pre></div><h2 id="object-defineproperty实现深度监听-（观察者模式）"><a class="header-anchor" href="#object-defineproperty实现深度监听-（观察者模式）" aria-hidden="true">#</a> Object.defineProperty实现深度监听 （观察者模式）</h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;更新视图&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>\n    name<span class="token operator">:</span><span class="token punctuation">{</span>n<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> oldProto<span class="token operator">=</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype\n<span class="token comment">//获取原有的数组方法</span>\n<span class="token keyword">let</span> proto <span class="token operator">=</span> Objeact<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>oldProto<span class="token punctuation">)</span> <span class="token comment">//proto继承原生方法 防止篡改原生方法</span>\n<span class="token comment">//重写数组里的变异方法</span>\n<span class="token punctuation">[</span><span class="token string">&quot;push&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;shift&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    proto<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//加了自己的逻辑</span>\n        oldProto<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span> <span class="token comment">//调用了原来的逻辑</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">observer</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//观察者 观察obj 使obj重写defineProperty的形式</span>\n    <span class="token comment">//变异方法 push pop shift unshift reverse sort splice</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> value<span class="token punctuation">.</span>__proto__<span class="token operator">=</span>proto <span class="token comment">//value的原型链指向自己定义好的proto</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">typeof</span> value<span class="token operator">!==</span><span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> value<span class="token punctuation">}</span> <span class="token comment">//不是对象就返回</span>\n    <span class="token comment">//循环obj 把属性和对象重新定义</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">defineReactive</span><span class="token punctuation">(</span>value <span class="token punctuation">,</span>key <span class="token punctuation">,</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//定义响应式</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj <span class="token punctuation">,</span>key <span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// obj要定义属性的对象。</span>\n    <span class="token comment">//  prop  要定义或修改的属性的名称或 Symbol 。 </span>\n    <span class="token comment">// descriptor   要定义或修改的属性描述符。</span>\n\n    <span class="token comment">//如果是对象，继续增加 setter和getter 递归</span>\n    <span class="token function">observer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> value\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> \n        <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            \n            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token function">observer</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token comment">//深度监控</span>\n                value<span class="token operator">=</span>newValue\n                <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n            \n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">observer</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token comment">//obj.name.n=500 //数据变了需要更新视图</span>\nobj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token punctuation">{</span>n<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">}</span> <span class="token comment">//数据变了需要更新视图 因为这个对象没有getter和setter</span>\nobj<span class="token punctuation">.</span>name<span class="token punctuation">.</span>n<span class="token operator">=</span><span class="token number">100</span>\n</code></pre></div><h2 id="简易的观察者模式"><a class="header-anchor" href="#简易的观察者模式" aria-hidden="true">#</a> 简易的观察者模式</h2><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>\n  observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">observer</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>\n  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">subscribeTo</span><span class="token punctuation">(</span><span class="token parameter">subject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    subject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> \n<span class="token keyword">let</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nobserver<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;observer update&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nobserver<span class="token punctuation">.</span><span class="token function">subscribeTo</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span>  <span class="token comment">//观察者订阅主题</span>\n\nsubject<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="发布订阅模式"><a class="header-anchor" href="#发布订阅模式" aria-hidden="true">#</a> 发布订阅模式</h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Even</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 声明一个空对象，用于存储值;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// on用来监听一个事件，并传入两个参数，一个是事件名，一个是回调函数;</span>\n<span class="token class-name">Even</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">on</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">eventname<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 判断该函数里的事件名是否存在</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventBus<span class="token punctuation">[</span>eventname<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 如果存在则新增一个方法;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus<span class="token punctuation">[</span>eventname<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果不存在则使用数组方式存入一个事件;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus<span class="token punctuation">[</span>eventname<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// emit用来触发一个事件,一个是触发的事件名,第二个是传入的参数;</span>\n<span class="token class-name">Even</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">emit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">eventname<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// emit用来监听一个事件的触发</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventBus<span class="token punctuation">[</span>eventname<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 如果有该事件，则循环该事件并执行该事件</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus<span class="token punctuation">[</span>eventname<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',42);t.render=function(a,p,t,e,c,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
