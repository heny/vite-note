import{o as n,c as s,d as a}from"./app.246f1876.js";const p='{"title":"Immutable.js","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、介绍","slug":"一、介绍"},{"level":3,"title":"什么是Immutable.js","slug":"什么是immutable-js"},{"level":3,"title":"优缺点","slug":"优缺点"},{"level":2,"title":"二、Immutable.js 的几种数据类型","slug":"二、immutable-js-的几种数据类型"},{"level":2,"title":"三、Immutable常用API","slug":"三、immutable常用api"},{"level":3,"title":"fromJS","slug":"fromjs"},{"level":3,"title":"toJS()","slug":"tojs"},{"level":3,"title":"is()","slug":"is"},{"level":3,"title":"List() 和 Map()","slug":"list-和-map"},{"level":3,"title":"List.isList() 和 Map.isMap()","slug":"list-islist-和-map-ismap"},{"level":3,"title":"size","slug":"size"},{"level":3,"title":"get() 、 getIn()","slug":"get-、-getin"},{"level":3,"title":"has() 、 hasIn()","slug":"has-、-hasin"},{"level":3,"title":"includes()","slug":"includes"},{"level":3,"title":"first() 、 last()","slug":"first-、-last"},{"level":2,"title":"Immutable数据修改","slug":"immutable数据修改"},{"level":3,"title":"设置 set()","slug":"设置-set"},{"level":3,"title":"setIn()","slug":"setin"},{"level":3,"title":"删除 delete","slug":"删除-delete"},{"level":3,"title":"deleteIn()","slug":"deletein"},{"level":3,"title":"deleteAll() (Map独有，List没有)","slug":"deleteall-map独有，list没有"},{"level":3,"title":"更新 update()","slug":"更新-update"},{"level":3,"title":"updateIn()","slug":"updatein"},{"level":3,"title":"清除 clear()","slug":"清除-clear"},{"level":3,"title":"merge","slug":"merge"},{"level":3,"title":"concat()","slug":"concat"},{"level":3,"title":"map()","slug":"map"},{"level":3,"title":"mapKey()","slug":"mapkey"},{"level":3,"title":"mapEntries()","slug":"mapentries"},{"level":3,"title":"过滤 filter","slug":"过滤-filter"},{"level":3,"title":"反转 reverse","slug":"反转-reverse"},{"level":3,"title":"排序 sort & sortBy","slug":"排序-sort-sortby"},{"level":3,"title":"分组 groupBy","slug":"分组-groupby"},{"level":3,"title":"查找数据 indexOf() 、 lastIndexOf","slug":"查找数据-indexof-、-lastindexof"},{"level":3,"title":"findIndex() 、 findLastIndex()","slug":"findindex-、-findlastindex"},{"level":3,"title":"find() 、 findLast()","slug":"find-、-findlast"},{"level":3,"title":"findKey() 、 findLastKey()","slug":"findkey-、-findlastkey"},{"level":3,"title":"findEntry() 、 findLastEntry()","slug":"findentry-、-findlastentry"},{"level":3,"title":"keyOf() lastKeyOf()","slug":"keyof-lastkeyof"},{"level":3,"title":"max() 、 maxBy()","slug":"max-、-maxby"},{"level":3,"title":"min() 、 minBy()","slug":"min-、-minby"},{"level":3,"title":"创建子集 slice()","slug":"创建子集-slice"},{"level":3,"title":"rest()","slug":"rest"},{"level":3,"title":"butLast()","slug":"butlast"},{"level":3,"title":"skip()","slug":"skip"},{"level":3,"title":"skipLast()","slug":"skiplast"},{"level":3,"title":"skipWhile()","slug":"skipwhile"},{"level":3,"title":"skipUntil()","slug":"skipuntil"},{"level":3,"title":"take()","slug":"take"},{"level":3,"title":"takeLast()","slug":"takelast"},{"level":3,"title":"takeWhile()","slug":"takewhile"},{"level":3,"title":"takeUntil()","slug":"takeuntil"},{"level":3,"title":"处理数据 reduce()","slug":"处理数据-reduce"},{"level":3,"title":"reduceRight()","slug":"reduceright"},{"level":3,"title":"every()","slug":"every"},{"level":3,"title":"some()","slug":"some"},{"level":3,"title":"join()","slug":"join"},{"level":3,"title":"isEmpty()","slug":"isempty"},{"level":3,"title":"count()","slug":"count"},{"level":3,"title":"countBy()","slug":"countby"}],"relativePath":"src/frontend/other-note/Immutable.md","lastUpdated":1615699077476}',t={},o=a('<h1 id="immutable-js"><a class="header-anchor" href="#immutable-js" aria-hidden="true">#</a> Immutable.js</h1><h2 id="一、介绍"><a class="header-anchor" href="#一、介绍" aria-hidden="true">#</a> 一、介绍</h2><h3 id="什么是immutable-js"><a class="header-anchor" href="#什么是immutable-js" aria-hidden="true">#</a> 什么是Immutable.js</h3><p>Immutable Data 就是一旦创建，就不能再被更改的数据。对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象。Immutable实现的原理是持久化的数据结构；</p><h3 id="优缺点"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h3><p>优点：</p><ul><li>降低 Mutable 带来的复杂度</li><li>节省内存空间</li><li>Undo/Redo，Copy/Paste，随意穿越！</li><li>拥抱函数式编程</li></ul><p>缺点：</p><ul><li>容易与原生对象混用；（建议使用fromJS创建，建议所有的immutable的变量都以$$开头）</li><li>每次返回新对象，容易忘记赋值</li><li>学习成本高</li><li>需要额外引入资源文件</li></ul><h2 id="二、immutable-js-的几种数据类型"><a class="header-anchor" href="#二、immutable-js-的几种数据类型" aria-hidden="true">#</a> 二、Immutable.js 的几种数据类型</h2><ul><li><code>List</code>: 有序索引集，类似JavaScript中的Array。</li><li><code>Map</code>: 无序索引集，类似JavaScript中的Object。</li><li><code>ArraySet</code>：无序且不可重复的列表；</li><li><code>OrderedMap</code>: 有序的Map，根据数据的set()进行排序。</li><li><code>Set</code>: 没有重复值的集合。</li><li><code>OrderedSet</code>: 有序的Set，根据数据的add进行排序。</li><li><code>Stack</code>: 有序集合，支持使用unshift()和shift()添加和删除。</li><li><code>Record</code>: 一个用于生成Record实例的类。类似于JavaScript的Object，但是只接收特定字符串为key，具有默认值。</li><li><code>Seq</code>: 序列，但是可能不能由具体的数据结构支持。</li><li><code>Collection</code>: 是构建所有数据结构的基类，不可以直接构建。</li></ul><p>最多使用List和Map；</p><h2 id="三、immutable常用api"><a class="header-anchor" href="#三、immutable常用api" aria-hidden="true">#</a> 三、Immutable常用API</h2><h3 id="fromjs"><a class="header-anchor" href="#fromjs" aria-hidden="true">#</a> fromJS</h3><p>作用：将一个js数据转换为Immutable类型的数据 用法：<code>fromJS(value, converter)</code></p><h3 id="tojs"><a class="header-anchor" href="#tojs" aria-hidden="true">#</a> toJS()</h3><p>作用：将一个Immutable数据转换为JS类型的数据 用法：<code>value.toJS()</code></p><h3 id="is"><a class="header-anchor" href="#is" aria-hidden="true">#</a> is()</h3><p>作用：对两个对象进行比较 用法：<code>Immutable.is(map1,map2)</code></p><h3 id="list-和-map"><a class="header-anchor" href="#list-和-map" aria-hidden="true">#</a> List() 和 Map()</h3><p>作用：用来创建一个新的List/Map对象</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nImmutable<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="list-islist-和-map-ismap"><a class="header-anchor" href="#list-islist-和-map-ismap" aria-hidden="true">#</a> List.isList() 和 Map.isMap()</h3><p>作用：判断一个数据结构是不是List/Map类型</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">isList</span><span class="token punctuation">(</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nImmutable<span class="token punctuation">.</span>Map<span class="token punctuation">.</span><span class="token function">isMap</span><span class="token punctuation">(</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="size"><a class="header-anchor" href="#size" aria-hidden="true">#</a> size</h3><p>作用：属性，获取List/Map的长度，等同于<code>ImmutableData.count()</code>;</p><h3 id="get-、-getin"><a class="header-anchor" href="#get-、-getin" aria-hidden="true">#</a> get() 、 getIn()</h3><p>作用：获取数据结构中的数据</p><div class="language-js"><pre><code>ImmutableData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//获取List索引的元素</span>\nImmutableData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 获取Map对应key的value</span>\nImmutableData<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 获取嵌套数组中的数据</span>\nImmutableData<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 获取嵌套map的数据 比如：a下面的b</span>\n</code></pre></div><h3 id="has-、-hasin"><a class="header-anchor" href="#has-、-hasin" aria-hidden="true">#</a> has() 、 hasIn()</h3><p>作用：判断是否存在某一个key</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//true</span>\n</code></pre></div><h3 id="includes"><a class="header-anchor" href="#includes" aria-hidden="true">#</a> includes()</h3><p>作用：判断是否存在某一个value</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false 不包含字符2</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false </span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//false</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//true</span>\n</code></pre></div><h3 id="first-、-last"><a class="header-anchor" href="#first-、-last" aria-hidden="true">#</a> first() 、 last()</h3><p>作用：用来获取第一个元素或者最后一个元素，若没有则返回undefined</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//1</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//{a:4,b:5}</span>\n\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">:</span><span class="token punctuation">{</span>d<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>e<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//1</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">:</span><span class="token punctuation">{</span>d<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>e<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//{d:3,e:4}</span>\n</code></pre></div><h2 id="immutable数据修改"><a class="header-anchor" href="#immutable数据修改" aria-hidden="true">#</a> Immutable数据修改</h2><p>这里对于数据的修改，是对原数据进行操作后的值赋值给一个新的数据，并不会对原数据进行修改，因为Immutable是不可变的数据类型。</p><h3 id="设置-set"><a class="header-anchor" href="#设置-set" aria-hidden="true">#</a> 设置 set()</h3><p>作用：设置第一层key、index的值</p><div class="language-js"><pre><code><span class="token keyword">const</span> originaList <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// List [0]</span>\noriginaList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// List [0, 1]</span>\noriginaList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;overwrittten&#39;</span><span class="token punctuation">)</span> <span class="token comment">// List [&#39;overwritten&#39;]</span>\noriginaList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// List [0, undefined, 2]</span>\n\n<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment">// 50001</span>\n\n<span class="token keyword">const</span> originMap <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Map {}</span>\n<span class="token keyword">const</span> newerMap <span class="token operator">=</span> originMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Map {key: &#39;value&#39;}</span>\n<span class="token keyword">const</span> newestMap <span class="token operator">=</span> newerMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;newer value&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Map {key: &#39;newer value&#39;}</span>\n</code></pre></div><h3 id="setin"><a class="header-anchor" href="#setin" aria-hidden="true">#</a> setIn()</h3><p>作用：设置深层结构中某属性的值</p><div class="language-js"><pre><code><span class="token keyword">const</span> originalMap <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  subObject<span class="token operator">:</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    subKey<span class="token operator">:</span> <span class="token string">&#39;subvalue&#39;</span><span class="token punctuation">,</span>\n    subSubObject<span class="token operator">:</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      subSubKey<span class="token operator">:</span> <span class="token string">&#39;subSubValue&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> newMap <span class="token operator">=</span> originalMap<span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;subObject&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;subKey&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;ha ha!&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// Map {</span>\n<span class="token comment">//   &quot;subObject&quot;: Map {</span>\n<span class="token comment">//     &quot;subKey&quot;: &quot;ha ha!&quot;,</span>\n<span class="token comment">//     &quot;subSubObject&quot;: Map { &quot;subSubKey&quot;: &quot;subSubValue&quot; }</span>\n<span class="token comment">//   }</span>\n<span class="token comment">// }</span>\n<span class="token keyword">const</span> newerMap <span class="token operator">=</span> originalMap<span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>\n  <span class="token punctuation">[</span><span class="token string">&#39;subObject&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;subSubObject&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;subSubKey&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;ha ha ha!&#39;</span>\n<span class="token punctuation">)</span>\n<span class="token comment">// Map {</span>\n<span class="token comment">//   &quot;subObject&quot;: Map {</span>\n<span class="token comment">//     &quot;subKey&quot;: &quot;subvalue&quot;,</span>\n<span class="token comment">//     &quot;subSubObject&quot;: Map { &quot;subSubKey&quot;: &quot;ha ha ha!&quot; }</span>\n<span class="token comment">//   }</span>\n<span class="token comment">// }</span>\n</code></pre></div><p>用法与set()一样，只是第一个参数是一个数组，代表要设置的属性所在的位置</p><h3 id="删除-delete"><a class="header-anchor" href="#删除-delete" aria-hidden="true">#</a> 删除 delete</h3><p>作用：用来删除第一层结构中的属性</p><div class="language-js"><pre><code><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// List [ 1, 2, 3, 4 ]</span>\n<span class="token keyword">const</span> originalMap <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  key<span class="token operator">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span>\n  otherKey<span class="token operator">:</span> <span class="token string">&#39;other value&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\noriginalMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;otherKey&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Map { &quot;key&quot;: &quot;value&quot; }</span>\n</code></pre></div><h3 id="deletein"><a class="header-anchor" href="#deletein" aria-hidden="true">#</a> deleteIn()</h3><p>用来删除深层数据，用法参考setIn</p><h3 id="deleteall-map独有，list没有"><a class="header-anchor" href="#deleteall-map独有，list没有" aria-hidden="true">#</a> deleteAll() (Map独有，List没有)</h3><p>作用：用来删除Map中的多个key</p><div class="language-js"><pre><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token string">&quot;Aaron&quot;</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token string">&quot;Barry&quot;</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token string">&quot;Connor&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\nnames<span class="token punctuation">.</span><span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">// Map { &quot;b&quot;: &quot;Barry&quot; }</span>\n</code></pre></div><h3 id="更新-update"><a class="header-anchor" href="#更新-update" aria-hidden="true">#</a> 更新 update()</h3><p>作用：对 对象中的某个属性进行更新，可对原数据进行相关操作</p><div class="language-js"><pre><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> val<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> aMap <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token operator">:</span> <span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> newMap <span class="token operator">=</span> aMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> value <span class="token operator">+</span> value<span class="token punctuation">)</span>\n</code></pre></div><h3 id="updatein"><a class="header-anchor" href="#updatein" aria-hidden="true">#</a> updateIn()</h3><p>同setIn；</p><h3 id="清除-clear"><a class="header-anchor" href="#清除-clear" aria-hidden="true">#</a> 清除 clear()</h3><p>作用：清除所有数据</p><div class="language-js"><pre><code><span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token operator">:</span> <span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//Map</span>\n<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// List</span>\n</code></pre></div><p>List中的<code>push</code>、<code>pop</code>、<code>unshift</code>、<code>shift</code>、<code>insert</code></p><div class="language-js"><pre><code><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> \n<span class="token comment">//List [ 0, 1, 2, 3, 4, 5 ]</span>\n<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n<span class="token comment">// List [ 1, 2, 3, 4, 5 ]</span>\n<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// List[ 1, 2, 3 ]</span>\n<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// List [ 1, 2, 3, 4 ]</span>\n<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// List [ 1, 2, 3, 4 ]</span>\n</code></pre></div><h3 id="merge"><a class="header-anchor" href="#merge" aria-hidden="true">#</a> merge</h3><ul><li><p><code>merge</code>：浅合并，新数据与旧数据对比，旧数据中不存在的属性直接添加，旧数据中已存在的属性用新数据中的覆盖</p></li><li><p><code>mergrWith</code>：自定义浅合并，可自行设置某些属性的值</p></li><li><p><code>mergeIn</code>：对深层数据进行浅合并</p></li><li><p><code>mergeDeep</code>：深合并，新旧数据中同时存在的的属性为新旧数据合并之后的数据</p></li><li><p><code>mergeDeepIn</code>：对深层数据进行深合并</p></li><li><p><code>mergrDeepWith</code>：自定义深合并，可自行设置某些属性的值</p></li></ul><div class="language-js"><pre><code> <span class="token keyword">const</span> Map1 <span class="token operator">=</span> Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">111</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">222</span><span class="token punctuation">,</span>c<span class="token operator">:</span><span class="token punctuation">{</span>d<span class="token operator">:</span><span class="token number">333</span><span class="token punctuation">,</span>e<span class="token operator">:</span><span class="token number">444</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token keyword">const</span> Map2 <span class="token operator">=</span> Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">111</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">222</span><span class="token punctuation">,</span>c<span class="token operator">:</span><span class="token punctuation">{</span>e<span class="token operator">:</span><span class="token number">444</span><span class="token punctuation">,</span>f<span class="token operator">:</span><span class="token number">555</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n <span class="token keyword">const</span> Map3 <span class="token operator">=</span> Map1<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>Map2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//Map {a:111,b:222,c:{e:444,f:555}}</span>\n <span class="token keyword">const</span> Map4 <span class="token operator">=</span> Map1<span class="token punctuation">.</span><span class="token function">mergeDeep</span><span class="token punctuation">(</span>Map2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//Map {a:111,b:222,c:{d:333,e:444,f:555}}</span>\n <span class="token keyword">const</span> Map5 <span class="token operator">=</span> Map1<span class="token punctuation">.</span><span class="token function">mergeWith</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">oldData<span class="token punctuation">,</span>newData<span class="token punctuation">,</span>key</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">666</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> newData\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>Map2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//Map {a:666,b:222,c:{e:444,f:555}}</span>\n</code></pre></div><h3 id="concat"><a class="header-anchor" href="#concat" aria-hidden="true">#</a> concat()</h3><p>对象的拼接，用法与js数组中的concat()相同，返回一个新的对象。</p><div class="language-js"><pre><code><span class="token keyword">const</span> List <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>\n</code></pre></div><h3 id="map"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map()</h3><p>作用：遍历整个对象，对Map/List元素进行操作，返回一个新的对象。</p><div class="language-js"><pre><code><span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token operator">=&gt;</span><span class="token number">10</span><span class="token operator">*</span>val<span class="token punctuation">)</span>\n<span class="token comment">//Map{a:10,b:20}</span>\n</code></pre></div><h3 id="mapkey"><a class="header-anchor" href="#mapkey" aria-hidden="true">#</a> mapKey()</h3><p>作用：Map特有的mapKey，遍历整个对象，对Map元素的key进行操作，返回一个新的对象。</p><div class="language-js"><pre><code><span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapKey</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token operator">=&gt;</span>val<span class="token operator">+</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">//Map{al:10,bl:20}</span>\n</code></pre></div><h3 id="mapentries"><a class="header-anchor" href="#mapentries" aria-hidden="true">#</a> mapEntries()</h3><p>作用：Map特有的mapEntries()，遍历整个对象，对Map元素的key和value同时进行操作，返回一个新的对象。Map的map()也可实现此功能。</p><div class="language-js"><pre><code><span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>val</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>key<span class="token operator">+</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span>val<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//Map{al:10,bl:20}</span>\n</code></pre></div><h3 id="过滤-filter"><a class="header-anchor" href="#过滤-filter" aria-hidden="true">#</a> 过滤 filter</h3><p>作用：返回一个新的对象，包括所有满足过滤条件的元素</p><div class="language-js"><pre><code><span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>val</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> val <span class="token operator">==</span> <span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//Map{b:2}</span>\n</code></pre></div><h3 id="反转-reverse"><a class="header-anchor" href="#反转-reverse" aria-hidden="true">#</a> 反转 reverse</h3><p>作用：将数据的结构进行反转</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// List [5,4,3,2,1]</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token punctuation">{</span>c<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>d<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>e<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">recerse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//Map {e:4,b:{c:2,d:3},a:1}</span>\n</code></pre></div><h3 id="排序-sort-sortby"><a class="header-anchor" href="#排序-sort-sortby" aria-hidden="true">#</a> 排序 sort &amp; sortBy</h3><p>作用：对数据结构进行排序</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// List [1,2,3,4,5,6]</span>\n\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// List [1,2,3,4,5,6]</span>\n\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span>index<span class="token punctuation">,</span>obj</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// List  [ {a:3}, {a:2}, {a:4}, {a:1} ]</span>\n\n<span class="token comment">//Map</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span> <span class="token punctuation">{</span>b<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> d<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">//Map {b: 1, c: 2, a: 3, d: 5}</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span> <span class="token punctuation">{</span>b<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> d<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//Map {b: 1, c: 2, a: 3, d: 5}</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span> <span class="token punctuation">{</span>b<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> d<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//Map {b: 1, c: 2, a: 3, d: 5}</span>\n</code></pre></div><h3 id="分组-groupby"><a class="header-anchor" href="#分组-groupby" aria-hidden="true">#</a> 分组 groupBy</h3><p>作用：对数据进行分组</p><div class="language-js"><pre><code><span class="token keyword">const</span> listOfMaps <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> v<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> v<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> v<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> v<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> v<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> groupsOfMaps <span class="token operator">=</span> listOfMaps<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;v&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// Map {</span>\n<span class="token comment">//   0: List [ Map{ &quot;v&quot;: 0 }, Map { &quot;v&quot;: 0 } ],</span>\n<span class="token comment">//   1: List [ Map{ &quot;v&quot;: 1 }, Map { &quot;v&quot;: 1 } ],</span>\n<span class="token comment">//   2: List [ Map{ &quot;v&quot;: 2 } ],</span>\n<span class="token comment">// }</span>\n</code></pre></div><h3 id="查找数据-indexof-、-lastindexof"><a class="header-anchor" href="#查找数据-indexof-、-lastindexof" aria-hidden="true">#</a> 查找数据 indexOf() 、 lastIndexOf</h3><p>Map不存在此方法 作用：和js数组中的方法相同，查找第一个或者最后一个value的index值，找不到则返回-1</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexof</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//2</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexof</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//2</span>\n</code></pre></div><h3 id="findindex-、-findlastindex"><a class="header-anchor" href="#findindex-、-findlastindex" aria-hidden="true">#</a> findIndex() 、 findLastIndex()</h3><p>作用：Map不存在此方法，查找满足要求的元素的index值</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">// 1</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findLastIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> index<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 3</span>\n</code></pre></div><h3 id="find-、-findlast"><a class="header-anchor" href="#find-、-findlast" aria-hidden="true">#</a> find() 、 findLast()</h3><p>作用：查找满足条件的元素的value值</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 2</span>\n\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findLast</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 4</span>\n</code></pre></div><h3 id="findkey-、-findlastkey"><a class="header-anchor" href="#findkey-、-findlastkey" aria-hidden="true">#</a> findKey() 、 findLastKey()</h3><p>作用：查找满足条件的元素的key值</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findKey</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>\n\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findLastKey</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 3</span>\n</code></pre></div><h3 id="findentry-、-findlastentry"><a class="header-anchor" href="#findentry-、-findlastentry" aria-hidden="true">#</a> findEntry() 、 findLastEntry()</h3><p>作用：查找满足条件的元素的键值对 key:value</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findEntry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// [1,2]</span>\n\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findLastEntry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// [3,4]</span>\n</code></pre></div><h3 id="keyof-lastkeyof"><a class="header-anchor" href="#keyof-lastkeyof" aria-hidden="true">#</a> keyOf() lastKeyOf()</h3><p>作用：查找某一个value对应的key值</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keyOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//1</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastKeyOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//1</span>\n</code></pre></div><h3 id="max-、-maxby"><a class="header-anchor" href="#max-、-maxby" aria-hidden="true">#</a> max() 、 maxBy()</h3><p>作用：查找最大值</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//4</span>\n\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>a<span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">//{a:4}</span>\n</code></pre></div><h3 id="min-、-minby"><a class="header-anchor" href="#min-、-minby" aria-hidden="true">#</a> min() 、 minBy()</h3><p>参考max用法；</p><h3 id="创建子集-slice"><a class="header-anchor" href="#创建子集-slice" aria-hidden="true">#</a> 创建子集 slice()</h3><p>作用：和原生js中数组的slice数组一样，包含两个参数，start和end，</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[1,2,3,4]</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[1,2]</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[3,4]</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[1,2]</span>\n</code></pre></div><h3 id="rest"><a class="header-anchor" href="#rest" aria-hidden="true">#</a> rest()</h3><p>作用：返回除第一个元素之外的所有元素</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//[2,3,4]</span>\n</code></pre></div><h3 id="butlast"><a class="header-anchor" href="#butlast" aria-hidden="true">#</a> butLast()</h3><p>作用：返回除最后一个元素之外的所有元素</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//[1,2,3]</span>\n</code></pre></div><h3 id="skip"><a class="header-anchor" href="#skip" aria-hidden="true">#</a> skip()</h3><p>作用：有一个参数n, 返回截掉前n个元素之后剩下的所有元素</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//[2,3,4]</span>\n</code></pre></div><h3 id="skiplast"><a class="header-anchor" href="#skiplast" aria-hidden="true">#</a> skipLast()</h3><p>作用：有一个参数n, 返回截掉最后n个元素之后剩下的所有元素</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//[1,2,3]</span>\n</code></pre></div><h3 id="skipwhile"><a class="header-anchor" href="#skipwhile" aria-hidden="true">#</a> skipWhile()</h3><p>作用：返回从第一次返回false之后的所有元素</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skipWhile</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">skipWhile</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>list</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// [1,2,3,4]</span>\n</code></pre></div><h3 id="skipuntil"><a class="header-anchor" href="#skipuntil" aria-hidden="true">#</a> skipUntil()</h3><p>作用：返回从第一次返回true之后的所有元素</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skipUntil</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">skipWhile</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>list</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// [3,4]</span>\n</code></pre></div><h3 id="take"><a class="header-anchor" href="#take" aria-hidden="true">#</a> take()</h3><p>作用：有一个参数n, 返回前n个元素</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//[1,2]</span>\n</code></pre></div><h3 id="takelast"><a class="header-anchor" href="#takelast" aria-hidden="true">#</a> takeLast()</h3><p>作用：有一个参数n, 返回最后n个元素</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">takeLast</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//[3,4]</span>\n</code></pre></div><h3 id="takewhile"><a class="header-anchor" href="#takewhile" aria-hidden="true">#</a> takeWhile()</h3><p>作用：返回从第一次返回false之前的所有元素</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skipWhile</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>list</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// []</span>\n</code></pre></div><h3 id="takeuntil"><a class="header-anchor" href="#takeuntil" aria-hidden="true">#</a> takeUntil()</h3><p>作用：返回从第一次返回true之前的所有元素</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skipUntil</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">takeUntil</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>list</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// [1,2]</span>\n</code></pre></div><h3 id="处理数据-reduce"><a class="header-anchor" href="#处理数据-reduce" aria-hidden="true">#</a> 处理数据 reduce()</h3><p>作用：和js中数组中的reduce相同,按索引升序的顺序处理元素</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>next<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pre<span class="token operator">+</span>next<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> pre<span class="token operator">+</span>next<span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 3 6 10</span>\n</code></pre></div><h3 id="reduceright"><a class="header-anchor" href="#reduceright" aria-hidden="true">#</a> reduceRight()</h3><p>作用：和js中数组中的reduce相同,按索引降序的顺序处理元素</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>next<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pre<span class="token operator">+</span>next<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> pre<span class="token operator">+</span>next<span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 7 9 10</span>\n</code></pre></div><h3 id="every"><a class="header-anchor" href="#every" aria-hidden="true">#</a> every()</h3><p>作用：判断整个对象总中所有的元素是不是都满足某一个条件，都满足返回true，反之返回false。</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value <span class="token operator">&gt;</span> <span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h3 id="some"><a class="header-anchor" href="#some" aria-hidden="true">#</a> some()</h3><p>作用：判断整个对象总中所有的元素是不是存在满足某一个条件的元素，若存在返回true，反之返回false。</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value <span class="token operator">&gt;</span> <span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="join"><a class="header-anchor" href="#join" aria-hidden="true">#</a> join()</h3><p>作用：同js中数组的join方法。把准换为字符串</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token comment">//1,2,3,4</span>\n</code></pre></div><h3 id="isempty"><a class="header-anchor" href="#isempty" aria-hidden="true">#</a> isEmpty()</h3><p>作用：判断是否为空</p><div class="language-js"><pre><code>Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nImmutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="count"><a class="header-anchor" href="#count" aria-hidden="true">#</a> count()</h3><p>作用：返回元素个数，可自定义条件，返回满足条件的个数</p><div class="language-js"><pre><code><span class="token keyword">const</span> list <span class="token operator">=</span> Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> map <span class="token operator">=</span> Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>d<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nlist<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>list</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//2</span>\n\nmap<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>list</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//2</span>\n</code></pre></div><h3 id="countby"><a class="header-anchor" href="#countby" aria-hidden="true">#</a> countBy()</h3><p>作用：与count不同的是，countBy返回一个对象</p><div class="language-js"><pre><code><span class="token keyword">const</span> list <span class="token operator">=</span> Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> map <span class="token operator">=</span> Immutable<span class="token punctuation">.</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>d<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nlist<span class="token punctuation">.</span><span class="token function">countBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>list</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token comment">//{false: 2, true: 2}</span>\n\nmap<span class="token punctuation">.</span><span class="token function">countBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>list</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token comment">//{false: 2, true: 2}</span>\n</code></pre></div>',173);t.render=function(a,p,t,e,c,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
