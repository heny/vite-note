import{o as n,c as s,d as a}from"./app.e9024871.js";const t='{"title":"React-06 Redux","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、安装redux","slug":"一、安装redux"},{"level":2,"title":"二、创建store","slug":"二、创建store"},{"level":2,"title":"三、组件获得store中的数据","slug":"三、组件获得store中的数据"},{"level":3,"title":"直接调用store","slug":"直接调用store"},{"level":3,"title":"使用connect连接","slug":"使用connect连接"},{"level":2,"title":"四、store拆分处理","slug":"四、store拆分处理"},{"level":2,"title":"五、拆分reducer","slug":"五、拆分reducer"},{"level":2,"title":"六、redux异步处理方案","slug":"六、redux异步处理方案"},{"level":2,"title":"七、hook API","slug":"七、hook-api"},{"level":2,"title":"八、配置redux dev tools，谷歌工具","slug":"八、配置redux-dev-tools，谷歌工具"},{"level":2,"title":"九、解决redux刷新问题","slug":"九、解决redux刷新问题"},{"level":2,"title":"十一、redux添加操作日志","slug":"十一、redux添加操作日志"},{"level":2,"title":"十二、dva","slug":"十二、dva"},{"level":3,"title":"为什么需要使用dva","slug":"为什么需要使用dva"},{"level":3,"title":"使用dva","slug":"使用dva"},{"level":3,"title":"创建model的参数","slug":"创建model的参数"},{"level":3,"title":"连接到数据库","slug":"连接到数据库"},{"level":3,"title":"app可配置属性","slug":"app可配置属性"},{"level":3,"title":"dva提供的路由跳转","slug":"dva提供的路由跳转"},{"level":3,"title":"mock","slug":"mock"},{"level":2,"title":"十三、Rematch","slug":"十三、rematch"},{"level":3,"title":"创建Rematch","slug":"创建rematch"},{"level":3,"title":"触发dispatch方法","slug":"触发dispatch方法"},{"level":3,"title":"在一个model的reducer触发另一个model的reducer","slug":"在一个model的reducer触发另一个model的reducer"},{"level":3,"title":"中间件配置方法","slug":"中间件配置方法"},{"level":3,"title":"rematch插件","slug":"rematch插件"}],"relativePath":"src/frontend/React/react-06 Redux.md","lastUpdated":1615699077401}',p={},o=a('<h1 id="react-06-redux"><a class="header-anchor" href="#react-06-redux" aria-hidden="true">#</a> React-06 Redux</h1><h2 id="一、安装redux"><a class="header-anchor" href="#一、安装redux" aria-hidden="true">#</a> 一、安装redux</h2><p><code>yarn add redux react-redux</code></p><p>为什么装redux了，还要装react-redux：</p><p>redux才是真正的状态管理库，是区别于react的一个独立的状态管理插件，在vue项目中也可以使用redux；</p><p>使用react-redux主要是做两点</p><ul><li><p>将redux数据注册进Provider中，用于隔代传值；</p></li><li><p>使用connect连接到组件中，将redux数据作为props传入；</p></li></ul><p>react-redux主要是给我们做了自动更新重新渲染组件的一个逻辑，当然不安装react-redux也是可以的，但是项目中状态发生改变，需要自己去重新调用<code>this.forceUpdate()</code>更新组件；</p><h2 id="二、创建store"><a class="header-anchor" href="#二、创建store" aria-hidden="true">#</a> 二、创建store</h2><ol><li>添加store/index.js 使用<code>createStore</code>传入一个reducer来创建一个store</li></ol><div class="language-jsx"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span>\n<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>\n    count<span class="token operator">:</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// state仓库的值, action是传递的状态</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token string">&#39;add&#39;</span> <span class="token operator">:</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            <span class="token operator">...</span>state<span class="token punctuation">,</span>\n            count<span class="token operator">:</span> action<span class="token punctuation">.</span>count\n        <span class="token punctuation">}</span>\n        <span class="token keyword">default</span> <span class="token operator">:</span> <span class="token keyword">return</span> state\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> store\n</code></pre></div><ol start="2"><li>创建好之后的store，一共有四个参数，</li></ol><div class="language-jsx"><pre><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">//通过传入一个对象,触发修改方法</span>\n    <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">//通过传入一个函数,在dispatch之后都会触发</span>\n    <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">//调用即获取store仓库</span>\n    <span class="token function">replaceReducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">//</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="3"><li>监听store的数据变化</li></ol><p><code>store.subscribe</code>可以监听store的数据变化，该方法返回一个函数，调用该函数又可以解除监听（当store的值发生改变时，再重新render组件即可让组件获取最新的值）</p><div class="language-jsx"><pre><code><span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前state值：&#39;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="三、组件获得store中的数据"><a class="header-anchor" href="#三、组件获得store中的数据" aria-hidden="true">#</a> 三、组件获得store中的数据</h2><h3 id="直接调用store"><a class="header-anchor" href="#直接调用store" aria-hidden="true">#</a> 直接调用store</h3><div class="language-jsx"><pre><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span>\n<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> Son\n</code></pre></div><h3 id="使用connect连接"><a class="header-anchor" href="#使用connect连接" aria-hidden="true">#</a> 使用connect连接</h3><p>使用connect是借助Provider实现的，需要修改index.js入口文件;</p><ol><li>修改src/index.js入口文件</li></ol><div class="language-jsx"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>\n<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span>\n    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n</code></pre></div><ol start="2"><li>connect使用方法 <ul><li>第一个小括号接收参数，有四个参数 <ul><li><code>mapStateToProps</code>：是一个函数，用来获取store数据的； <ul><li>该函数第一个参数是state，该函数返回一个对象，将该对象以props的形式注入到组件中</li></ul></li><li><code>mapDispatchToProps</code>：值可以是一个函数，也可以是一个对象，用来获取action方法的； <ul><li>当值是函数第一个参数是dispatch，第二个参数是ownProps，该函数需要返回一个对象；</li></ul></li><li><code>mergeProps</code>：值是一个函数</li><li><code>options</code>：选项</li></ul></li><li>第二个小括号接收组件</li></ul></li></ol><div class="language-jsx"><pre><code><span class="token comment">// 一般使用前两个参数即足够了；</span>\n<span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">[</span>mapStateToProps<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>mapDispatchToProps<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>mergeProps<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><p>组件中使用connect连接到store</p><ul><li>第一种方式，使用装饰器</li></ul><div class="language-jsx"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>connect<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>\n\n<span class="token comment">// 一般add的函数都是写在外面，使用简写形式即可;</span>\n@<span class="token function">connect</span><span class="token punctuation">(</span>\n\t<span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token operator">:</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span>\n        <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">&#39;add&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App\n</code></pre></div><ul><li>第二种方式</li></ul><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\nfucntion <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">dispatch<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> payload<span class="token operator">:</span> val<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token operator">:</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dispatch<span class="token punctuation">,</span> ownProps</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token function-variable function">handleChange</span><span class="token operator">:</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token function">handleChange</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>\n    mapStateToProps<span class="token punctuation">,</span>\n    mapDispatchToProps\n<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>\n</code></pre></div><ul><li>当不传入<code>mapDispatchToProps</code>时，dispatch会被注入组件中，使用<code>this.props.dispatch</code>可以直接派发修改</li><li>当mapDispatchToProps和mapStateToProps都不传递时，则不会监听store的任何变化</li><li>当redux的数据更新，都会触发mapStateToProps函数重新执行</li></ul><p>注意：每次store有数据更新时，我们需要对相关得到的数据正确进行渲染，需要两次调用ReactDOM.render方法，可以写一个render函数，每次store发生改变即调用</p><div class="language-jsx"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nstore<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 第一次挂载执行</span>\n</code></pre></div><p>通过store.subscribe方法订阅store的变化，并且响应此变化，触发相关组件重新渲染；</p><h2 id="四、store拆分处理"><a class="header-anchor" href="#四、store拆分处理" aria-hidden="true">#</a> 四、store拆分处理</h2><ol><li>创建store/index.js</li></ol><div class="language-jsx"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span>\n<span class="token keyword">import</span> rootReducer <span class="token keyword">from</span> <span class="token string">&#39;./reducer.js&#39;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>rootReducer<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> store\n</code></pre></div><ol start="2"><li>创建store/type.js</li></ol><div class="language-jsx"><pre><code><span class="token comment">// 统一管理type名字</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">ADD</span> <span class="token operator">=</span> <span class="token string">&#39;ADD&#39;</span>\n</code></pre></div><ol start="3"><li>创建store/reducer.js</li></ol><div class="language-jsx"><pre><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> types <span class="token keyword">from</span> <span class="token string">&#39;./type.js&#39;</span>\n<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>\n    count<span class="token operator">:</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// state仓库的值, action是传递的状态</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> types<span class="token punctuation">.</span><span class="token constant">ADD</span> <span class="token operator">:</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            <span class="token operator">...</span>state<span class="token punctuation">,</span>\n            count<span class="token operator">:</span> action<span class="token punctuation">.</span>count\n        <span class="token punctuation">}</span>\n        <span class="token keyword">default</span> <span class="token operator">:</span> <span class="token keyword">return</span> state\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> reducer\n</code></pre></div><p>注意事项</p><ul><li>store必须是唯一的，只能有一个store空间，</li><li>只有store能改变自己的内容，reducer不能改变</li><li>reducer必须是纯函数；</li></ul><ol start="4"><li>创建store/action.js</li></ol><div class="language-jsx"><pre><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> types <span class="token keyword">from</span> <span class="token string">&#39;./type.js&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        type<span class="token operator">:</span> types<span class="token punctuation">.</span><span class="token constant">ADD</span><span class="token punctuation">,</span>\n        count\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="五、拆分reducer"><a class="header-anchor" href="#五、拆分reducer" aria-hidden="true">#</a> 五、拆分reducer</h2><ol><li>使用redux提供的函数，combineReducers可以将每个reducer写成独立的一个文件,每一块独立负责管理state的一部分</li></ol><div class="language-jsx"><pre><code><span class="token comment">// reducers/index.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span>  <span class="token comment">//引入拆分</span>\n\n<span class="token comment">// 引入两个拆分的js reducer文件</span>\n<span class="token keyword">import</span> login <span class="token string">&#39;./login&#39;</span>\n<span class="token keyword">import</span> bread <span class="token keyword">from</span> <span class="token string">&#39;./bread&#39;</span>\n\n<span class="token keyword">const</span> rootReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    login<span class="token punctuation">,</span>\n    bread\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> rootReducer\n</code></pre></div><h2 id="六、redux异步处理方案"><a class="header-anchor" href="#六、redux异步处理方案" aria-hidden="true">#</a> 六、redux异步处理方案</h2><ol><li><code>redux-thunk</code>中间件</li></ol><p>thunk可以看做store的dispatch()方法的封装器，使用thunk可以帮助我们在redux里面实现异步性，如果没有thunk默认是同步派遣的；</p><ol start="2"><li><p>安装：<code>npm i redux-thunk -S</code></p></li><li><p>注册redux-thunk中间件</p></li></ol><p>applyMiddleware可以让我们为redux注册中间件</p><div class="language-jsx"><pre><code><span class="token comment">// store.js</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">&#39;redux-thunk&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> rootReducer <span class="token keyword">from</span> <span class="token string">&#39;./reducer.js&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">store</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">createStore</span><span class="token punctuation">(</span>rootReducer<span class="token punctuation">,</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span>\n</code></pre></div><ol start="4"><li>使用异步处理dispatch，异步的dispatch返回的是一个函数，函数的第一个参数是dispatch；</li></ol><div class="language-jsx"><pre><code><span class="token comment">// action.js</span>\n\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> types <span class="token keyword">from</span> <span class="token string">&#39;./type.js&#39;</span>\n<span class="token comment">// 同步处理</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token parameter">count</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    type<span class="token operator">:</span> types<span class="token punctuation">.</span><span class="token constant">ADD</span><span class="token punctuation">,</span>\n    count\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 异步处理</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token parameter">count</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">dispatch<span class="token punctuation">,</span> getState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前state值: &#39;</span><span class="token punctuation">,</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">:</span> types<span class="token punctuation">.</span><span class="token constant">ADD</span><span class="token punctuation">,</span> count<span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">// 或  可以直接调用函数</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>code<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>无法触发问题：</p><ol><li>检查是否写法有误</li><li>查看方法是否是从props里面取的，不是直接从方法里面拿的；</li></ol><h2 id="七、hook-api"><a class="header-anchor" href="#七、hook-api" aria-hidden="true">#</a> 七、hook API</h2><p>使用hook API必须在react-redux @7.1版本之后；</p><ol><li><p>useSelector()</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> shallowEqual<span class="token punctuation">,</span> useSelector<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>\n\n<span class="token comment">// later</span>\n<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>title<span class="token operator">:</span> state<span class="token punctuation">.</span>title<span class="token punctuation">,</span> content<span class="token operator">:</span> state<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shallowEqual<span class="token punctuation">)</span>\n<span class="token comment">// 第二个参数也可以不使用;</span>\n<span class="token comment">// shallowEqual是比较函数,也可以使用lodash.isEqual;</span>\n</code></pre></div><p>复杂的state提取：</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>useSelector<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;reselect&#39;</span>\n\n<span class="token keyword">const</span> selectNumOfDoneTodos <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span>\n    <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">,</span>\n    <span class="token parameter">todos</span> <span class="token operator">=&gt;</span> todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">DoneTodosCounter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> NumOfDoneTodos <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span>selectNumOfDoneTodos<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>NumOfDoneTodos<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span>useSelector<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>createSelector<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;reselect&#39;</span>\n<span class="token keyword">const</span> selectNumOfTodoWithIsDoneValue <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span>\n    <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> isDone</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> isDone<span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token parameter">todos<span class="token punctuation">,</span> isDone</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>isDone <span class="token operator">===</span> isDone<span class="token punctuation">)</span><span class="token punctuation">.</span>length\n<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">TodoCounterForIsDoneValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>isDone<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> NumOfTodosWithIsDoneValue <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=&gt;</span> \n        <span class="token function">selectNumOfTodoWithIsDoneValue</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> isDone<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>NumOfTodosWithIsDoneValue<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span><span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>Number <span class="token keyword">of</span> done todos<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>TodoCounterForIsDoneValue isDone<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span>useSelector<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>createSelector<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;reselect&#39;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">makeNumOfTodosWithIsDoneSelector</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    <span class="token function">createSelector</span><span class="token punctuation">(</span>\n        <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">,</span>\n        <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> isDone</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> isDone<span class="token punctuation">,</span>\n        <span class="token punctuation">(</span><span class="token parameter">todos<span class="token punctuation">,</span> isDone</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>isDone <span class="token operator">===</span> isDone<span class="token punctuation">)</span><span class="token punctuation">.</span>length\n    <span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">TodoCounterForIsDoneValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>isDone<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> selectNumOfTodosWithIsDone <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span>makeNumOfTodosWithIsDoneSelector<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> numOfTodosWithIsDoneValue <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token function">selectNumOfTodosWithIsDone</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> isDone<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>numOfTodosWithIsDoneValue<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>useDispatch</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>useDispatch<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>\n\n<span class="token comment">// later</span>\n<span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 性能优化</span>\n<span class="token keyword">const</span> handlerIncrement <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">,</span><span class="token punctuation">[</span>dispatch<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>useStore()</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>\n\n<span class="token comment">// later</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nstore<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ol><h2 id="八、配置redux-dev-tools，谷歌工具"><a class="header-anchor" href="#八、配置redux-dev-tools，谷歌工具" aria-hidden="true">#</a> 八、配置redux dev tools，谷歌工具</h2><ol><li>修改store下的index.js文件，将以下代码传递给store</li></ol><div class="language-jsx"><pre><code>window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION__ <span class="token operator">&amp;&amp;</span>\nwindow<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>意思是查看window有没有该方法，有则执行；</p><div class="language-jsx"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span>\n<span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">&#39;./reducer&#39;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span>\nwindow<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION__ <span class="token operator">&amp;&amp;</span>\nwindow<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> store\n</code></pre></div><ol start="2"><li>使用谷歌插件同时使用thunk</li></ol><div class="language-jsx"><pre><code>npm i redux<span class="token operator">-</span>thunk redux<span class="token operator">-</span>devtools<span class="token operator">-</span>extension\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span>applyMiddleware<span class="token punctuation">,</span> createStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>composeWithDevTools<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux-devtools-extension&#39;</span>\n<span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">&#39;redux-thunk&#39;</span> \n<span class="token keyword">export</span> <span class="token keyword">default</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span>\n    <span class="token function">composeWithDevTools</span><span class="token punctuation">(</span>\n        <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n</code></pre></div><h2 id="九、解决redux刷新问题"><a class="header-anchor" href="#九、解决redux刷新问题" aria-hidden="true">#</a> 九、解决redux刷新问题</h2><ol><li><p>下载redux-persist持久化数据存储的工具：<code>yarn add redux-persist</code></p><p>redux-persist，它结合redux，将store中的数据缓存到浏览器的sessionStorage或者localStorage中</p></li><li><p>在store.js里面，</p></li></ol><div class="language-jsx"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">&#39;../reducer&#39;</span><span class="token punctuation">;</span><span class="token comment">//引入deducer文件</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>persistStore<span class="token punctuation">,</span> persistReducer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux-persist&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">//  存储机制，可换成其他机制，当前使用sessionStorage机制</span>\n<span class="token keyword">import</span> storageSession <span class="token keyword">from</span> <span class="token string">&#39;redux-persist/lib/storage/session&#39;</span>\n<span class="token comment">// import storage from &#39;redux-persist/lib/storage&#39;; //localStorage机制</span>\n\n<span class="token comment">// 数据对象</span>\n<span class="token keyword">const</span> storageConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n    key<span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 必须有的</span>\n    storage<span class="token operator">:</span>storageSession<span class="token punctuation">,</span> <span class="token comment">// sessionStorage缓存机制,或者放入sotrage,localStorage机制</span>\n    blacklist<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span> <span class="token comment">// reducer 里不持久化的数据,除此外均为持久化数据</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 第一个形参传入配置好的数据对象,第二个为数据reducer数据;</span>\n<span class="token keyword">const</span> myPersistReducer <span class="token operator">=</span> <span class="token function">persistReducer</span><span class="token punctuation">(</span>storageConfig<span class="token punctuation">,</span> reducer<span class="token punctuation">)</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>myPersistReducer<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> persistor <span class="token operator">=</span> <span class="token function">persistStore</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> store\n</code></pre></div><ol start="3"><li>如果是单文件的reducer处理方式</li></ol><div class="language-jsx"><pre><code><span class="token comment">// reducers/index.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span>  <span class="token comment">//引入拆分</span>\n\n<span class="token comment">// 引入两个拆分的js reducer文件</span>\n<span class="token keyword">import</span> login <span class="token string">&#39;./login&#39;</span>\n<span class="token keyword">import</span> bread <span class="token keyword">from</span> <span class="token string">&#39;./bread&#39;</span>\n\n<span class="token comment">// 如果有持久化的工具</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> persistReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux-persist&#39;</span>\n<span class="token keyword">import</span> storage <span class="token keyword">from</span> <span class="token string">&#39;redux-persist/lib/storage&#39;</span>\n<span class="token keyword">const</span> loginPersistConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n    key<span class="token operator">:</span> <span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span>\n    storage<span class="token punctuation">,</span>\n    blacklist<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">]</span> <span class="token comment">//password不用持久化; 加了不持久化需要在store.js里面加入名字</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> rootReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    login<span class="token operator">:</span> <span class="token function">persistReducer</span><span class="token punctuation">(</span>loginPersistConfig<span class="token punctuation">,</span> login<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 有不持久化的需要在store.js里面加入名字</span>\n    bread\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> rootReducer\n</code></pre></div><ol start="4"><li>在入口文件index.js里面将PersistGate标签作为父标签</li></ol><div class="language-jsx"><pre><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">&#39;./router&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>Provider<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>PersistGate<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux-persist/lib/integration/react&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> configStore<span class="token punctuation">,</span> <span class="token punctuation">{</span>persistor<span class="token punctuation">}</span>  <span class="token keyword">from</span> <span class="token string">&#39;./redux/store&#39;</span><span class="token punctuation">;</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>configStore<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PersistGate</span></span> <span class="token attr-name">loading</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">}</span></span> <span class="token attr-name">persistor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>persistor<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Router</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">PersistGate</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>\n    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ol start="5"><li>接下来打开浏览器调试工具，就可以查看到浏览器缓存的数据</li></ol><p><img src="https://notecdn.heny.vip/images/react-04_%E5%85%B6%E4%BB%96Api%EF%BC%8C%E5%8A%A8%E7%94%BB-03.png" alt="image"></p><h2 id="十一、redux添加操作日志"><a class="header-anchor" href="#十一、redux添加操作日志" aria-hidden="true">#</a> 十一、redux添加操作日志</h2><p>安装插件：<code>cnpm i redux-logger</code>；</p><p>安装到项目中：</p><div class="language-js"><pre><code><span class="token keyword">import</span> logger <span class="token keyword">from</span> <span class="token string">&#39;redux-logger&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>\n\t<span class="token function">composeWithDevTools</span><span class="token punctuation">(</span>\n    \t<span class="token function">applyMiddleware</span><span class="token punctuation">(</span>\n        \tlogger\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n</code></pre></div><p>当即有logger，又有thunk时，logger需要放在前面，有个先后顺序；</p><h2 id="十二、dva"><a class="header-anchor" href="#十二、dva" aria-hidden="true">#</a> 十二、dva</h2><p>官网：<a href="https://dvajs.com/" target="_blank" rel="noopener noreferrer">dvajs</a>，了解即可，目前没有更新；</p><h3 id="为什么需要使用dva"><a class="header-anchor" href="#为什么需要使用dva" aria-hidden="true">#</a> 为什么需要使用dva</h3><p>dva是一个基于redux和redux-saga的数据流方案，为了简化开发体验，dva还额外内置了react-router和fetch，可以理解为一个轻量级应用框架</p><p>dva不需要手动添加谷歌工具，有默认给添加；</p><h3 id="使用dva"><a class="header-anchor" href="#使用dva" aria-hidden="true">#</a> 使用dva</h3><p>使用dva需要安装dva的脚手架；</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> dva-cli -g\ndva new dva-quickstart\n<span class="token builtin class-name">cd</span> dva-quickstart\n<span class="token function">npm</span> start\n</code></pre></div><p>基于dva创建新应用</p><h3 id="创建model的参数"><a class="header-anchor" href="#创建model的参数" aria-hidden="true">#</a> 创建model的参数</h3><p>创建models/list.js</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    namespace<span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>\n    state<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    reducers<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token keyword">delete</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// ...</span>\n            <span class="token keyword">return</span> state\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    effects<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token operator">*</span><span class="token function">deleteList</span><span class="token punctuation">(</span><span class="token parameter">payload<span class="token punctuation">,</span> <span class="token punctuation">{</span>put<span class="token punctuation">,</span> call<span class="token punctuation">,</span> select<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>list<span class="token punctuation">)</span>\n            <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>addTodo<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>\n            <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">&#39;delete&#39;</span><span class="token punctuation">,</span> payload<span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    subscriptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 每次触发都会走该对象中的所有函数，函数名字可以是任意的</span>\n        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>dispatch<span class="token punctuation">,</span> history<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            history<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">location</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li><code>namespace</code>：模块命名</li><li><code>state</code>：初始值</li><li><code>reducers</code>：等同于redux中的reducers</li><li><code>subscriptions</code>：监听改变，也可以放在入口文件写；</li><li><code>effects</code>：异步处理方式，其中第二个对象的参数如下： <ul><li><code>put</code>：触发reducers，</li><li><code>call</code>：异步请求，第一个参数为promise，第二个参数为要发送的参数；</li><li><code>select</code>：用于从state中取数据</li></ul></li></ul><p>创建之后需要在入口文件index.js注册该模块</p><div class="language-js"><pre><code>app<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./models/list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">)</span>\n</code></pre></div><p>其中的default是由于require进来的就是有一个对象，其他default对象为导出的内容；</p><p><strong>解决每次需要在app.js引入</strong></p><ol><li><p>创建models/index.js</p><div class="language-js"><pre><code><span class="token keyword">const</span> context <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^index]\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">requireAll</span> <span class="token operator">=</span> <span class="token parameter">context</span> <span class="token operator">=&gt;</span> context<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">requireAll</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n</code></pre></div></li><li><p>修改入口页面index.js</p><div class="language-js"><pre><code><span class="token keyword">import</span> models <span class="token keyword">from</span> <span class="token string">&#39;./models&#39;</span>\nmodels<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">model</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    app<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>default<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ol><h3 id="连接到数据库"><a class="header-anchor" href="#连接到数据库" aria-hidden="true">#</a> 连接到数据库</h3><p>连接没有作任何修改，和redux本身是一样的连接方式</p><div class="language-jsx"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>connect<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dva&#39;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Products</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>dispatch<span class="token punctuation">,</span> list<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span>  <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    list<span class="token operator">:</span> state<span class="token punctuation">.</span>list\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Products<span class="token punctuation">)</span>\n</code></pre></div><h3 id="app可配置属性"><a class="header-anchor" href="#app可配置属性" aria-hidden="true">#</a> app可配置属性</h3><div class="language-js"><pre><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">dva</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  history<span class="token punctuation">,</span> <span class="token comment">// 更改路由模式</span>\n  initialState<span class="token punctuation">,</span> <span class="token comment">// 初始化model</span>\n  onError<span class="token punctuation">,</span> <span class="token comment">// redux错误捕获</span>\n  onAction<span class="token punctuation">,</span> <span class="token comment">// 注册中间件</span>\n  onStateChange<span class="token punctuation">,</span>\n  onReducer<span class="token punctuation">,</span>\n  onEffect<span class="token punctuation">,</span>\n  onHmr<span class="token punctuation">,</span> <span class="token comment">// 热替换相关</span>\n  extraReducers<span class="token punctuation">,</span> <span class="token comment">// 可以添加redux-persit，数据保持</span>\n  extraEnhancers<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="dva提供的路由跳转"><a class="header-anchor" href="#dva提供的路由跳转" aria-hidden="true">#</a> dva提供的路由跳转</h3><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> routerRedux <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dva/router&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Inside Effects</span>\n<span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span>routerRedux<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/logout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Outside Effects</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span>routerRedux<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/logout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// With query</span>\nrouterRedux<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  pathname<span class="token operator">:</span> <span class="token string">&#39;/logout&#39;</span><span class="token punctuation">,</span>\n  query<span class="token operator">:</span> <span class="token punctuation">{</span>\n    page<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="mock"><a class="header-anchor" href="#mock" aria-hidden="true">#</a> mock</h3><p>dva内置给我们添加了mock，可以用于模拟本地数据</p><ol><li><p>在mock文件夹创建js文件：list.js</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;GET /api/list&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;GET /api/delete&#39;</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \tres<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>修改根目录下的.roadhogrc.mock.js，下面代码可以自动引入api，以后新建不需要再引入了；</p><div class="language-js"><pre><code><span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> mockPath<span class="token operator">=</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token operator">+</span><span class="token string">&#39;/mock&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token keyword">const</span> mock<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nfs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>mockPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>mock<span class="token punctuation">,</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./mock/&#39;</span><span class="token operator">+</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \nmodule<span class="token punctuation">.</span>exports<span class="token operator">=</span>mock<span class="token punctuation">;</span>\n</code></pre></div></li></ol><h2 id="十三、rematch"><a class="header-anchor" href="#十三、rematch" aria-hidden="true">#</a> 十三、Rematch</h2><p>写过vuex的都会写rematch</p><p>rematch也支持四个属性：<code>state</code>、<code>reducers</code>、<code>effects</code></p><p>Rematch不需要脚手架安装，直接在项目中安装即可，不需要处理谷歌浏览器插件；</p><p>连接方式直接引用<code>react-redux</code>中的<code>connect</code>连接即可；</p><p>安装：<code>npm install react-redux @rematch/core@next</code></p><p>开发文档：<a href="https://rematch.netlify.app/" target="_blank" rel="noopener noreferrer">https://rematch.netlify.app/</a></p><h3 id="创建rematch"><a class="header-anchor" href="#创建rematch" aria-hidden="true">#</a> 创建Rematch</h3><ol><li><p>创建demo.js</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    state<span class="token operator">:</span> <span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    reducers<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 从第二个变量开始为传入参数</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                <span class="token operator">...</span>state<span class="token punctuation">,</span>\n                num<span class="token operator">:</span> num1\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">effects</span><span class="token operator">:</span> <span class="token parameter">dispatch</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token keyword">async</span> <span class="token function">incrementAsync</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> rootState<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// state为当前state</span>\n            <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token comment">// 直接调用reducers</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>创建index.js</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> init <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@rematch/core&#39;</span>\n<span class="token keyword">import</span> demo <span class="token keyword">from</span> <span class="token string">&#39;./demo&#39;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    models<span class="token operator">:</span> <span class="token punctuation">{</span>\n        demo\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> store\n</code></pre></div></li><li><p>注册在组件中，修改入口文件</p><div class="language-jsx"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>\n    window<span class="token punctuation">.</span>root\n<span class="token punctuation">)</span>\n</code></pre></div></li></ol><h3 id="触发dispatch方法"><a class="header-anchor" href="#触发dispatch方法" aria-hidden="true">#</a> 触发dispatch方法</h3><ol><li><p>使用react-redux中的connect连接</p></li><li><p>引入rematch插件里的dispatch和getState</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@rematch/core&#39;</span>\n</code></pre></div></li></ol><p>dispatch的使用方法：</p><div class="language-js"><pre><code><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">&#39;count/increment&#39;</span><span class="token punctuation">,</span> payload<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\ndispatch<span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="在一个model的reducer触发另一个model的reducer"><a class="header-anchor" href="#在一个model的reducer触发另一个model的reducer" aria-hidden="true">#</a> 在一个model的reducer触发另一个model的reducer</h3><div class="language-js"><pre><code><span class="token comment">// count模块</span>\n<span class="token punctuation">{</span>\n    reducers<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">[</span><span class="token string">&#39;info/addAge&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// payLoad的值为addAge传入的值10</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                <span class="token operator">...</span>state<span class="token punctuation">,</span>\n                num<span class="token operator">:</span> <span class="token number">10</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// info模块</span>\n<span class="token punctuation">{</span>\n    reducers<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">addAge</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                age<span class="token operator">:</span> state<span class="token punctuation">.</span>age <span class="token operator">+</span> num\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="中间件配置方法"><a class="header-anchor" href="#中间件配置方法" aria-hidden="true">#</a> 中间件配置方法</h3><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>init<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@rematch/core&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    redux<span class="token operator">:</span> <span class="token punctuation">{</span>\n        initialState<span class="token operator">:</span> <span class="token punctuation">{</span>example<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        reducers<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function">someReducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">default</span><span class="token operator">:</span>\n                        <span class="token keyword">return</span> state\n                <span class="token punctuation">}</span>\n           <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        enhancers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">customEnhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        middlewares<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">customMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        rootReducers<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function-variable function">RESET</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        combineReducers<span class="token operator">:</span> customCombineReducers<span class="token punctuation">,</span>\n        createStore<span class="token operator">:</span> customCreateStore<span class="token punctuation">,</span>\n        devtoolOptions<span class="token operator">:</span> customDevtoolOptions<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="rematch插件"><a class="header-anchor" href="#rematch插件" aria-hidden="true">#</a> rematch插件</h3><h4 id="数据持久化persist"><a class="header-anchor" href="#数据持久化persist" aria-hidden="true">#</a> 数据持久化persist</h4><p>安装<code>npm i @rematch/persist@next</code></p><ol><li>修改store.js文件，并添加插件</li></ol><div class="language-js"><pre><code><span class="token keyword">import</span> createRematchPersist <span class="token keyword">from</span> <span class="token string">&#39;@rematch/persist&#39;</span>\n<span class="token keyword">const</span> persistPlugin <span class="token operator">=</span> <span class="token function">createRematchPersist</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  key<span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// whitelist: [&#39;list&#39;], // 需要保留的数据;</span>\n  <span class="token comment">// blacklist: [], // 不想保留的数据;</span>\n  throttle<span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>\n  version<span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    models<span class="token punctuation">,</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span> persistPlugin <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><ol start="2"><li>修改入口文件</li></ol><div class="language-jsx"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getPersistor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@rematch/persist&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> PersistGate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux-persist/lib/integration/react&#39;</span>\n<span class="token function">render</span><span class="token punctuation">(</span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PersistGate</span></span> <span class="token attr-name">persistor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>persistor<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">PersistGate</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">)</span>\n</code></pre></div><h4 id="更简单的处理数据immer"><a class="header-anchor" href="#更简单的处理数据immer" aria-hidden="true">#</a> 更简单的处理数据immer</h4><p>让操作redux更简单，不再通过返回store状态了；</p><div class="language-js"><pre><code><span class="token comment">// 不使用immer更新状态之前：</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    state<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    reducers<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 需要返回整个store状态</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                <span class="token operator">...</span>state<span class="token punctuation">,</span>\n                count<span class="token operator">:</span> payload<span class="token punctuation">.</span>count\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用immer之后：</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    state<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    reducers<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 直接修改即可</span>\n            state<span class="token punctuation">.</span>count <span class="token operator">=</span> payload<span class="token punctuation">.</span>count\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在初始化store中添加插件</p><div class="language-js"><pre><code><span class="token keyword">import</span> immerPlugin <span class="token keyword">from</span> <span class="token string">&#39;@rematch/immer&#39;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">immerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="加载loading"><a class="header-anchor" href="#加载loading" aria-hidden="true">#</a> 加载loading</h4><p>自动处理redux中异步加载的loading状态；</p><p>安装：<code>yarn add @rematch/loading@next</code></p><ol><li><p>在初始化store中添加插件</p><div class="language-js"><pre><code><span class="token keyword">import</span> loadingPlugin <span class="token keyword">from</span> <span class="token string">&#39;@rematch/loading&#39;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">loadingPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>使用方法：</p><ul><li><p>通过<code>state.loading.global</code>取入全局异步加载的loading;</p></li><li><p>通过<code>state.loading.models.list</code>，取入list整个模块的加载loading</p></li><li><p>通过<code>state.loading.effects.list[异步函数名]</code>,取入list某个函数名的loading;.</p></li></ul><p>以上都是在组件获取state状态时，直接绑定到props上的，例如：</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    loading<span class="token operator">:</span> state<span class="token punctuation">.</span>loading<span class="token punctuation">.</span>global\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ol><h4 id="最后更新updated"><a class="header-anchor" href="#最后更新updated" aria-hidden="true">#</a> 最后更新updated</h4><p>获取最后更新时间</p><p>安装：<code>yarn add @rematch/updated@next</code></p><ol><li><p>在初始化store中添加插件</p><div class="language-js"><pre><code><span class="token keyword">import</span> updatedPlugin <span class="token keyword">from</span> <span class="token string">&#39;@rematch/updated&#39;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">updatedPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>使用方法：</p><ul><li>通过<code>state.updated.list[异步函数名]</code>获取最后更新时间；</li></ul></li></ol>',147);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
