import{o as n,c as s,d as a}from"./app.beda3532.js";const t='{"title":"TS-06 模块、命名空间、声明合并","description":"","frontmatter":{},"headers":[{"level":2,"title":"模块","slug":"模块"},{"level":3,"title":"模块的三种引入方式","slug":"模块的三种引入方式"},{"level":2,"title":"命名空间","slug":"命名空间"},{"level":2,"title":"命名空间别名","slug":"命名空间别名"},{"level":2,"title":"声明合并","slug":"声明合并"},{"level":3,"title":"接口的合并","slug":"接口的合并"},{"level":3,"title":"命名空间的合并","slug":"命名空间的合并"},{"level":3,"title":"类和命名空间的合并","slug":"类和命名空间的合并"},{"level":3,"title":"函数和命名空间的合并","slug":"函数和命名空间的合并"},{"level":3,"title":"枚举和命名空间的合并","slug":"枚举和命名空间的合并"}],"relativePath":"src/frontend/Typescript/ts-06 命名空间、声明合并.md","lastUpdated":1615699077418}',e={},p=a('<h1 id="ts-06-模块、命名空间、声明合并"><a class="header-anchor" href="#ts-06-模块、命名空间、声明合并" aria-hidden="true">#</a> TS-06 模块、命名空间、声明合并</h1><h2 id="模块"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h2><p>ts1.5版本之后，内部模块称作命名空间，外部模块改称为模块；</p><p>ts中的模块都是使用es6的模块语法的，在es6模块中的基础上，ts还新增了其他的模块方法：</p><div class="language-ts"><pre><code><span class="token comment">// a.ts</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;info&#39;</span>\n<span class="token keyword">export</span> <span class="token operator">=</span> name <span class="token comment">// 默认导出</span>\n\n<span class="token comment">// b.ts</span>\n<span class="token keyword">import</span> name <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./b.ts&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 引入</span>\n</code></pre></div><h3 id="模块的三种引入方式"><a class="header-anchor" href="#模块的三种引入方式" aria-hidden="true">#</a> 模块的三种引入方式</h3><div class="language-ts"><pre><code><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">&#39;moment&#39;</span> <span class="token comment">// 导入了一个函数</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> moment <span class="token keyword">from</span> <span class="token string">&#39;moment&#39;</span> <span class="token comment">// 将所有的方法导入</span>\n<span class="token keyword">import</span> moment <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;moment&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 导入了一个函数</span>\n</code></pre></div><h2 id="命名空间"><a class="header-anchor" href="#命名空间" aria-hidden="true">#</a> 命名空间</h2><p>使用<code>namespace</code>定义命名空间，命名空间内部使用<code>export</code>导出，没有使用<code>export</code>导出的在外面拿不到；</p><p>在命名空间内部使用<code>export</code>导出的内容实际是命名空间的属性名，可以输出之后查看编译<code>js</code>后的结果；</p><div class="language-ts"><pre><code><span class="token comment">// a.ts</span>\n<span class="token keyword">namespace</span> validation <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> isLetterReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z]+$</span><span class="token regex-delimiter">/</span></span>\n    <span class="token keyword">export</span> <span class="token keyword">const</span> isNumber <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span>\n    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkLetter</span> <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> isLetterReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n    \n<span class="token comment">// b.ts</span>\n<span class="token comment">// 使用三斜杠加reference引入a.ts文件</span>\n<span class="token comment">/// &lt;reference path=&#39;./a.ts&#39;/&gt;</span>\n<span class="token keyword">var</span> isLetter <span class="token operator">=</span> validation<span class="token punctuation">.</span><span class="token function">checkLetter</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>输出js文件</strong></p><p>在命令行执行<code>tsc --outFile src/b.js src/b.ts</code>，执行输出<code>js</code>文件</p><p>命名空间能够实现的东西，<code>import</code>都能够实现，建议使用<code>import</code>而不是使用命名空间；</p><h2 id="命名空间别名"><a class="header-anchor" href="#命名空间别名" aria-hidden="true">#</a> 命名空间别名</h2><p>使用<code>import</code>关键字定义别名，使用别名可以很方便的解决深层次的嵌套</p><div class="language-ts"><pre><code><span class="token keyword">namespace</span> Shape <span class="token punctuation">{</span>\n    <span class="token keyword">export</span> <span class="token keyword">namespace</span> Polygons <span class="token punctuation">{</span>\n        <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Trggler</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n        <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">import</span> polygons <span class="token operator">=</span> Shape<span class="token punctuation">.</span>Polygons\n<span class="token keyword">let</span> trggler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">polygons</span><span class="token punctuation">.</span><span class="token function">Trggler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="声明合并"><a class="header-anchor" href="#声明合并" aria-hidden="true">#</a> 声明合并</h2><p>在<code>ts</code>中，接口是可以多次声明的，声明同样的接口和命名空间，最后<code>ts</code>会将多个同名声明，合并为一个</p><h3 id="接口的合并"><a class="header-anchor" href="#接口的合并" aria-hidden="true">#</a> 接口的合并</h3><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>\n    age<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> info<span class="token operator">:</span> Info<span class="token punctuation">;</span>\ninfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;hhh&#39;</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">18</span> <span class="token comment">// 需要同时拥有这两个字段</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在<code>ts</code>中，所有的声明概况起来会创建三种实体之一，</p><p><strong>命名空间</strong>： 实际是创建一个对象，属性是命名空间导出的内容</p><p><strong>类型声明：</strong> 创建一个类型，并且赋值给一个名字；</p><p><strong>值声明</strong>： 在<code>ts</code>中创建了一个值</p><table><thead><tr><th>声明类型</th><th style="text-align:center;">创建了命名空间</th><th style="text-align:center;">创建了类型</th><th style="text-align:center;">创建了值</th></tr></thead><tbody><tr><td>NameSpace</td><td style="text-align:center;">√</td><td style="text-align:center;"></td><td style="text-align:center;">√</td></tr><tr><td>Class</td><td style="text-align:center;"></td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td>Enum</td><td style="text-align:center;"></td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td>Interface</td><td style="text-align:center;"></td><td style="text-align:center;">√</td><td style="text-align:center;"></td></tr><tr><td>Type Alias类型别名</td><td style="text-align:center;"></td><td style="text-align:center;">√</td><td style="text-align:center;"></td></tr><tr><td>Function</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">√</td></tr><tr><td>Variable</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">√</td></tr></tbody></table><p><strong>注意：</strong> 定义的非函数成员，属性必须是不同的，如果是相同的，那么类型必须是相同的，对于函数成员，都会被当作是函数的重载，后面的接口拥有更高的优先级</p><h3 id="命名空间的合并"><a class="header-anchor" href="#命名空间的合并" aria-hidden="true">#</a> 命名空间的合并</h3><p>命名空间中定义的属性名没有<code>export</code>导出，在同名的命名空间也无法取到</p><div class="language-ts"><pre><code><span class="token keyword">namespace</span> Validate <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> isLenth <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span>\n    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkLength</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">namespace</span> Validate <span class="token punctuation">{</span>\n    <span class="token comment">// 这里是取不到isLength的</span>\n    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkLetter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 相当于</span>\n<span class="token keyword">namespace</span> Validate <span class="token punctuation">{</span>\n    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkLength</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkLetter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="类和命名空间的合并"><a class="header-anchor" href="#类和命名空间的合并" aria-hidden="true">#</a> 类和命名空间的合并</h3><p>类一定要在命名空间前面才行</p><div class="language-ts"><pre><code><span class="token keyword">class</span> <span class="token class-name">Validations</span> <span class="token punctuation">{</span>\n    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token function">checkType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">namespace</span> Validations <span class="token punctuation">{</span>\n    <span class="token keyword">export</span> <span class="token keyword">const</span> numberReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span>\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Validations<span class="token punctuation">)</span>\n</code></pre></div><p>上面例子，将<code>Validations</code>实例化之后就可以调用类上面的方法了；</p><h3 id="函数和命名空间的合并"><a class="header-anchor" href="#函数和命名空间的合并" aria-hidden="true">#</a> 函数和命名空间的合并</h3><p>函数和命名空间合并也必须在命名空间前面</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">countUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    countUp<span class="token punctuation">.</span>count<span class="token operator">++</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">namespace</span> countUp <span class="token punctuation">{</span>\n    <span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="枚举和命名空间的合并"><a class="header-anchor" href="#枚举和命名空间的合并" aria-hidden="true">#</a> 枚举和命名空间的合并</h3><p>枚举和命名空间不区分先后顺序，可以随意</p><div class="language-ts"><pre><code><span class="token keyword">enum</span> Colors <span class="token punctuation">{</span>\n    red<span class="token punctuation">,</span>\n    green<span class="token punctuation">,</span>\n    blue\n<span class="token punctuation">}</span>\n<span class="token keyword">namespace</span> Colors <span class="token punctuation">{</span>\n    <span class="token keyword">export</span> <span class="token keyword">const</span> yellow <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Colors<span class="token punctuation">)</span>\n</code></pre></div>',40);e.render=function(a,t,e,o,c,l){return n(),s("div",null,[p])};export default e;export{t as __pageData};
