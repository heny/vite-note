import{o as n,c as s,d as a}from"./app.f5909e71.js";const t='{"title":"js-17 拖拽API、文件上传、下载","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、文件对象-FileReader读取文件","slug":"一、文件对象-filereader读取文件"},{"level":2,"title":"二、接收input上传事件","slug":"二、接收input上传事件"},{"level":3,"title":"拖拽上传","slug":"拖拽上传"},{"level":3,"title":"粘贴上传","slug":"粘贴上传"},{"level":3,"title":"文件切片","slug":"文件切片"},{"level":3,"title":"切片上传","slug":"切片上传"},{"level":3,"title":"断点续传","slug":"断点续传"},{"level":3,"title":"通过blob获取url地址","slug":"通过blob获取url地址"},{"level":3,"title":"文章地址","slug":"文章地址"},{"level":2,"title":"三、好玩的blob对象","slug":"三、好玩的blob对象"},{"level":2,"title":"四、拖拽API","slug":"四、拖拽api"},{"level":2,"title":"五、下载","slug":"五、下载"},{"level":2,"title":"六、复制","slug":"六、复制"},{"level":3,"title":"使用原生","slug":"使用原生"},{"level":3,"title":"使用插件","slug":"使用插件"},{"level":2,"title":"七、图片压缩","slug":"七、图片压缩"},{"level":2,"title":"八、图片预览插件","slug":"八、图片预览插件"},{"level":2,"title":"九、h5唤起客户端","slug":"九、h5唤起客户端"}],"relativePath":"src\\\\frontend\\\\Javascript\\\\js-17 拖拽API、文件上传、下载.md","lastUpdated":1615699077388}',p={},o=a('<h1 id="js-17-拖拽api、文件上传、下载"><a class="header-anchor" href="#js-17-拖拽api、文件上传、下载" aria-hidden="true">#</a> js-17 拖拽API、文件上传、下载</h1><h2 id="一、文件对象-filereader读取文件"><a class="header-anchor" href="#一、文件对象-filereader读取文件" aria-hidden="true">#</a> 一、文件对象-FileReader读取文件</h2><ol><li>回调方法：</li></ol><p><code>onload</code>：文件读取完成</p><p><code>onabort</code>：中断时触发</p><p><code>onerror</code>：出错时触发</p><p><code>onloadstart</code>：文件上传开始</p><p><code>onloadend</code>：读取结束时，不论成功或失败</p><p><code>onprogress</code>：读取中</p><ol start="2"><li>读取操作：传入参数是file对象；</li></ol><p><code>readAsArrayBuffer</code></p><p><code>readAsDataURL</code>：从文件读取URL数据</p><p><code>readAsBinaryString</code>：将文件读取为二进制码</p><p><code>readAsText</code>：从文件读取字符串</p><p><code>abort()</code>：终止读取操作</p><div class="language-js"><pre><code><span class="token comment">// 读取图片并显示到页面上</span>\nfiles<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> files <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target\n    <span class="token keyword">var</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    fr<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    fr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fr<span class="token punctuation">.</span>result<span class="token punctuation">)</span> <span class="token comment">// 拿到图片的base64</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 读取大文件并显示进度</span>\nfiles<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> files <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> file <span class="token keyword">of</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        fr<span class="token punctuation">.</span><span class="token function-variable function">onprogress</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// lengthComputable表示过程是否可以测量,需要进行判断</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token keyword">return</span>\n            <span class="token comment">// 四舍五入计算百分比</span>\n            <span class="token keyword">let</span> percent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>loaded <span class="token operator">/</span> e<span class="token punctuation">.</span>total<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,progress is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>percent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        fr<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n</code></pre></div><ol start="3"><li>大文件分片读取</li></ol><p>由于file是blob的一个特例，blob上有一个slice方法，和字符串slice方法一样用法</p><p>写好hello world内容的txt文件，截取hello五个字符，代码中每个英文字母占1个字节，通过file.size可以获取到所有的字节</p><div class="language-js"><pre><code>files<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token punctuation">{</span>files<span class="token punctuation">}</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>target\n  <span class="token keyword">let</span> blob <span class="token operator">=</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  fr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>\n  fr<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="二、接收input上传事件"><a class="header-anchor" href="#二、接收input上传事件" aria-hidden="true">#</a> 二、接收input上传事件</h2><ol><li>使用input标签的type类型为file；</li></ol><div class="language-js"><pre><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&#39;file&#39;</span> id<span class="token operator">=</span><span class="token string">&#39;files&#39;</span> multiple <span class="token operator">/</span><span class="token operator">&gt;</span>\n\n<span class="token comment">// 判断兼容</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>File <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>FileReader <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>FileList <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>Blob<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;当前浏览器对FileAPI的支持不完善&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="2"><li>监听文件的选择，选择文件之后会触发change事件，input事件file保存在event.target.files对象里面，是一个伪数组；</li></ol><div class="language-js"><pre><code>files<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> files <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;上传的文件是&#39;</span><span class="token punctuation">,</span> files<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n</code></pre></div><ol start="3"><li>由于没有使用form表单，上传的事件是需要创建一个formData事件，并将文件添加进去，就可以发送到后端了； 注意：使用formdata上传后台不需要</li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nfd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;files&#39;</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span>\n<span class="token comment">// 将fd对象发送给后端就可以了</span>\n</code></pre></div><ol start="4"><li>获取formData的值</li></ol><p>方法一：可以直接使用<code>[...formdata]</code>可以获取到二维数组，查看formdata的值;</p><p>方法二：使用<code>formdata.keys()</code>返回一个iterator对象, 并使用for of循环遍历就可以了</p><p>使用formData里面的getAll或get方法获取, get获取的是一个，getAll获取全部</p><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> fd<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> props <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    fd<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="5"><li>formData添加数组</li></ol><p>直接将数组放进formData里面将会是[object ..]，需要循环添加</p><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\narr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;arr&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="拖拽上传"><a class="header-anchor" href="#拖拽上传" aria-hidden="true">#</a> 拖拽上传</h3><p>对于input标签，监听onchange事件，存在e.target.files上面；</p><p>对于拖拽事件，fileList存放在拖拽事件的回调函数e.dataTransfer.files上面</p><div class="language-js"><pre><code><span class="token comment">// 使得drop事件可以触发</span>\ndocument<span class="token punctuation">.</span><span class="token function-variable function">ondragover</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 防止新窗口打开或下载</span>\ndocument<span class="token punctuation">.</span><span class="token function-variable function">ondrop</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 监听指定区域文件拖拽</span>\ndiv<span class="token punctuation">.</span><span class="token function-variable function">ondrop</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token punctuation">{</span>files<span class="token punctuation">}</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>dataTransfer\n  <span class="token keyword">let</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  fr<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  fr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundImage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">url(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fr<span class="token punctuation">.</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="粘贴上传"><a class="header-anchor" href="#粘贴上传" aria-hidden="true">#</a> 粘贴上传</h3><div class="language-js"><pre><code><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">&#39;upload&#39;</span> type<span class="token operator">=</span><span class="token string">&#39;text&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\nupload<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;paste&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 需要直接取到files才能读取到</span>\n    <span class="token keyword">var</span> files <span class="token operator">=</span> e<span class="token punctuation">.</span>clipboardData<span class="token punctuation">.</span>files\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="文件切片"><a class="header-anchor" href="#文件切片" aria-hidden="true">#</a> 文件切片</h3><p>blob对象也支持slice方法，可以使用slice方法进行切片</p><div class="language-js"><pre><code><span class="token comment">/**\n* file 需要切片的文件\n* chunkSize 每个切片大小\n*/</span>\n<span class="token keyword">function</span> <span class="token function">createFileChunk</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> chunkSize <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建数组保留切片数组</span>\n  <span class="token keyword">const</span> fileChunkList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 切片当前数据</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 下标</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> file<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fileChunkList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      chunk<span class="token operator">:</span> file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> cur <span class="token operator">+</span> chunkSize<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      hash<span class="token operator">:</span> file<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> i<span class="token punctuation">,</span>\n      index<span class="token operator">:</span> i<span class="token punctuation">,</span>\n      percentage<span class="token operator">:</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    cur <span class="token operator">+=</span> chunkSize\n    i<span class="token operator">++</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 返回最后切片的数组</span>\n  <span class="token keyword">return</span> fileChunkList\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="切片上传"><a class="header-anchor" href="#切片上传" aria-hidden="true">#</a> 切片上传</h3><div class="language-js"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">uploadChunks</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> fileChunkList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建Promise数组进行切片上传</span>\n  <span class="token keyword">const</span> requestList <span class="token operator">=</span> fileChunkList\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> chunk<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> fileHash <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;chunk&#39;</span><span class="token punctuation">,</span> chunk<span class="token punctuation">)</span>\n      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;hash&#39;</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>\n      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;filename&#39;</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;fileHash&#39;</span><span class="token punctuation">,</span> fileHash<span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> formData <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  \t<span class="token comment">// request封装的请求方法</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> formData <span class="token punctuation">}</span><span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>baseURL<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">msg/upload</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      data<span class="token operator">:</span> formData<span class="token punctuation">,</span>\n      <span class="token comment">// 显示进度函数</span>\n      onProgress<span class="token operator">:</span> <span class="token function">createProgressHandler</span><span class="token punctuation">(</span>fileChunkList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> fileChunkList<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n  <span class="token comment">// 上传</span>\n  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>requestList<span class="token punctuation">)</span>\n  <span class="token comment">// 上传完成发送合并请求</span>\n  <span class="token keyword">await</span> <span class="token function">mergeRequest</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>name<span class="token punctuation">,</span> setIsSelectFile<span class="token punctuation">,</span> socket<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="断点续传"><a class="header-anchor" href="#断点续传" aria-hidden="true">#</a> 断点续传</h3><p>断点续传的原理在于前端/服务端需要<code>记住</code>已上传的切片，这样下次上传就可以跳过之前已上传的部分，有两种方案实现记忆的功能</p><ul><li>前端使用 localStorage 记录已上传的切片 hash</li><li>服务端保存已上传的切片 hash，前端每次上传前向服务端获取已上传的切片</li></ul><p>第一种是前端的解决方案，第二种是服务端，而前端方案有一个缺陷，如果换了个浏览器就失去了记忆的效果，所以这里选取后者</p><h3 id="通过blob获取url地址"><a class="header-anchor" href="#通过blob获取url地址" aria-hidden="true">#</a> 通过blob获取url地址</h3><p>URL.createObjectURL 传入blob</p><div class="language-js"><pre><code><span class="token comment">// 第一种</span>\n<span class="token keyword">var</span> obj_url <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>\n<span class="token comment">// 使用createObjectURL之后建议使用revokeObjectURL方法释放生成的文件url，解除浪费性能</span>\nwindow<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>obj_url<span class="token punctuation">)</span>\n\n<span class="token comment">// 第二种</span>\n<span class="token keyword">let</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfr<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nfr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> url <span class="token operator">=</span> fr<span class="token punctuation">.</span>result\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="文章地址"><a class="header-anchor" href="#文章地址" aria-hidden="true">#</a> 文章地址</h3><ul><li><p><a href="https://juejin.im/post/5dff8a26e51d4558105420ed" target="_blank" rel="noopener noreferrer">字节跳动面试官：请你实现一个大文件上传和断点续传</a></p></li><li><p>MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File/Using_files_from_web_applications#Example.3A_Using_object_URLs_to_display_images" target="_blank" rel="noopener noreferrer">在web应用程序中使用文件</a></p></li></ul><h2 id="三、好玩的blob对象"><a class="header-anchor" href="#三、好玩的blob对象" aria-hidden="true">#</a> 三、好玩的blob对象</h2><p>手工创建blob对象：</p><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;hhh&#39;</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>如果将blob放到HTTP请求发送给服务端，相当于向服务器发送了一个json文件</p><p>下面例子相当于创建了一个script标签，放到页面上</p><div class="language-js"><pre><code><span class="token keyword">const</span> jsCode <span class="token operator">=</span> <span class="token string">&#39;console.log(&quot;hello&quot;)&#39;</span>\n<span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>jsCode<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span>\nscript<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>\n</code></pre></div><p>动态引入模块</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>module<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">function</span> <span class="token function">importCode</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>code<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n\t\texport default {\n\t\t\tfoo: &#39;bar&#39;\n\t\t}\n\t</span><span class="token template-punctuation string">`</span></span>\n    <span class="token function">importCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">m</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>default<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>参考文章：<a href="https://github.com/akira-cn/FE_You_dont_know/issues/12" target="_blank" rel="noopener noreferrer">https://github.com/akira-cn/FE_You_dont_know/issues/12</a></p><h2 id="四、拖拽api"><a class="header-anchor" href="#四、拖拽api" aria-hidden="true">#</a> 四、拖拽API</h2><ol><li>属性</li></ol><p><code>draggable</code> 将div设置为 draggable=true 可以被拖拽，img和a标签不加这个属性就可以拖拉，一般可以给这两个标签设置false；</p><div class="language-js"><pre><code><span class="token operator">&lt;</span>div draggable<span class="token operator">=</span><span class="token string">&#39;true&#39;</span><span class="token operator">&gt;</span>此区域可拖拉<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n</code></pre></div><ol start="2"><li>拖拽事件</li></ol><p>（1）被拖动的元素事件</p><p><code>dragstart</code> 开始拖动时触发</p><p><code>drag</code> 拖动过程中持续触发</p><p><code>dragend</code> 拖动结束触发</p><p>（2）目标元素事件</p><p><code>dragenter</code> 进入目标时触发，该事件会冒泡，必须阻止冒泡和默认行为；</p><p><code>dragover</code> 在目标区域拖拽持续触发，若想被拖拉的节点放进来，必须阻止默认动作 event.preventDefault()，防止拖拉效果被重置；</p><p><code>dragleave</code> 离开目标时触发</p><p><code>drop</code> 释放目标时触发，在该节点阻止默认行为event.preventDefault()，比如：打开其他链接；</p><ol start="3"><li><code>dataTransfer</code>对象</li></ol><p>（1）主要用来读写需要传递的数据</p><p><code>e.dataTransfer.setData(&#39;传输名&#39;,传输对象)</code> 用于提交传输对象，可以在dragstart事件上面添加</p><p><code>e.dataTransfer.getData(&#39;传输名&#39;)</code> 用于获取传输对象，可以在目标上面的ondrop事件添加</p><p><code>e.dataTransfer.files</code> 获取被drop的外部文件</p><h2 id="五、下载"><a class="header-anchor" href="#五、下载" aria-hidden="true">#</a> 五、下载</h2><ol><li>创建a标签，之后给a标签添加download属性；</li></ol><div class="language-js"><pre><code><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&#39;./1.docs&#39;</span> download<span class="token operator">=</span><span class="token string">&#39;文件.docs&#39;</span> <span class="token operator">&gt;</span>下载<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>\n</code></pre></div><p>注意：</p><p>如果是txt文件和img文件，则谷歌浏览器会直接打开，而不是下载</p><p>如果是服务器方式运行网页，则无论是img还是txt都会直接进行下载操作</p><ol start="2"><li>后端下载链接如果提示非法下载，需要修改content-type</li></ol><p><a href="https://blog.csdn.net/topc2000/article/details/79793057" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/topc2000/article/details/79793057</a></p><ol start="3"><li><p>解决浏览器直接打开下载问题</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">doSave</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> name<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> blob\n  name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">.</span>Blob <span class="token operator">==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> type <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> BlobBuilder <span class="token operator">=</span>\n      window<span class="token punctuation">.</span>BlobBuilder <span class="token operator">||</span>\n      window<span class="token punctuation">.</span>MozBlobBuilder <span class="token operator">||</span>\n      window<span class="token punctuation">.</span>WebKitBlobBuilder <span class="token operator">||</span>\n      window<span class="token punctuation">.</span>MSBlobBuilder\n    <span class="token keyword">var</span> bb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlobBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    bb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    blob <span class="token operator">=</span> bb<span class="token punctuation">.</span><span class="token function">getBlob</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> <span class="token constant">URL</span> <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span> <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitURL\n  <span class="token keyword">var</span> bloburl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>\n  <span class="token keyword">var</span> anchor <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;download&quot;</span> <span class="token keyword">in</span> anchor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    anchor<span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token string">&quot;hidden&quot;</span>\n    anchor<span class="token punctuation">.</span>href <span class="token operator">=</span> bloburl\n    anchor<span class="token punctuation">.</span>download <span class="token operator">=</span> name\n    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>anchor<span class="token punctuation">)</span>\n    <span class="token keyword">var</span> evt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createEvent</span><span class="token punctuation">(</span><span class="token string">&quot;MouseEvents&quot;</span><span class="token punctuation">)</span>\n    evt<span class="token punctuation">.</span><span class="token function">initEvent</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n    anchor<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span>\n    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>anchor<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>msSaveBlob<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    navigator<span class="token punctuation">.</span><span class="token function">msSaveBlob</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> bloburl\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ol><h2 id="六、复制"><a class="header-anchor" href="#六、复制" aria-hidden="true">#</a> 六、复制</h2><h3 id="使用原生"><a class="header-anchor" href="#使用原生" aria-hidden="true">#</a> 使用原生</h3><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">copyFun</span> <span class="token operator">=</span> <span class="token parameter">text</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> textArea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;textarea&#39;</span><span class="token punctuation">)</span>\n  textArea<span class="token punctuation">.</span>value <span class="token operator">=</span> text\n  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span>\n  textArea<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">&#39;copy&#39;</span><span class="token punctuation">)</span>\n  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span>\n  <span class="token comment">// 复制成功</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="使用插件"><a class="header-anchor" href="#使用插件" aria-hidden="true">#</a> 使用插件</h3><p>官网： <a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="noopener noreferrer">https://github.com/zenorocha/clipboard.js</a></p><p>安装：<code>npm i clipboard</code></p><ol><li>使用方法 （1）复制input标签里面的内容</li></ol><div class="language-js"><pre><code><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">&#39;foo&#39;</span> value<span class="token operator">=</span><span class="token string">&#39;hhhhhhh&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;btn&#39;</span> data<span class="token operator">-</span>clipboard<span class="token operator">-</span>target<span class="token operator">=</span><span class="token string">&#39;#foo&#39;</span><span class="token operator">&gt;</span>点击复制<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n\n<span class="token comment">//当创建实例时自动给绑定元素添加点击事件</span>\n<span class="token keyword">new</span> <span class="token class-name">Clipboard</span><span class="token punctuation">(</span><span class="token string">&#39;.btn&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>（2）react例子，直接复制传入的内容，创建实例会绑定click事件，获取data-clipboard-text属性的值；</p><div class="language-js"><pre><code><span class="token keyword">import</span> Clipboard <span class="token keyword">from</span> <span class="token string">&#39;clipboard&#39;</span>\n<span class="token keyword">let</span> clipboard <span class="token operator">=</span> <span class="token function">Clipboard</span><span class="token punctuation">(</span><span class="token string">&#39;.li&#39;</span><span class="token punctuation">)</span>\n\n<span class="token operator">&lt;</span>li data<span class="token operator">-</span>clipboard<span class="token operator">-</span>text<span class="token operator">=</span><span class="token string">&#39;这是复制的内容&#39;</span> className<span class="token operator">=</span><span class="token string">&#39;li&#39;</span><span class="token operator">&gt;</span>\n</code></pre></div><p>（3）配置data-clipboard-action可以选择是剪切还是复制，copy是复制，cut为剪切，不写默认copy，仅对input和textarea起作用</p><div class="language-js"><pre><code><span class="token operator">&lt;</span>input data<span class="token operator">-</span>clipboard<span class="token operator">-</span>action<span class="token operator">=</span><span class="token string">&#39;cut&#39;</span> value<span class="token operator">=</span><span class="token string">&#39;hhhhhhh&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n</code></pre></div><ol start="3"><li>事件，复制之后的回调函数</li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> clipboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClipboardJS</span><span class="token punctuation">(</span><span class="token string">&#39;.btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclipboard<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Action:&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 目标操作</span>\n    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Text:&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 目标文本</span>\n    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Trigger:&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>trigger<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 目标元素</span>\n\n    e<span class="token punctuation">.</span><span class="token function">clearSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclipboard<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Action:&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Trigger:&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ol start="4"><li>修改默认方法</li></ol><div class="language-js"><pre><code><span class="token keyword">new</span> <span class="token class-name">ClipboardJS</span><span class="token punctuation">(</span><span class="token string">&#39;.btn&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">target</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">trigger</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> trigger<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span> <span class="token comment">// 需要返回node</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">text</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">trigger</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> trigger<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;aria-label&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 需要返回string</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ol start="5"><li>如果是单页面应用，需要清理创建的事件，单页面需要写在生命周期触发</li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> clipboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClipboardJS</span><span class="token punctuation">(</span><span class="token string">&#39;.btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nclipboard<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="七、图片压缩"><a class="header-anchor" href="#七、图片压缩" aria-hidden="true">#</a> 七、图片压缩</h2><p>一种方案：安装：npm install exif-js；</p><div class="language-js"><pre><code><span class="token comment">// 图像压缩</span>\n<span class="token keyword">import</span> <span class="token constant">EXIF</span> <span class="token keyword">from</span> <span class="token string">&#39;exif-js&#39;</span>\n\n<span class="token comment">// 获取图片信息</span>\n<span class="token keyword">function</span> <span class="token function">getImageInfo</span><span class="token punctuation">(</span><span class="token parameter">img<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> Orientation <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token constant">EXIF</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    Orientation <span class="token operator">=</span> <span class="token constant">EXIF</span><span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;Orientation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span>Orientation<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 旋转画布</span>\n<span class="token keyword">function</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span>Orientation</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">switch</span><span class="token punctuation">(</span>Orientation<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>\n      <span class="token comment">//旋转180度</span>\n      ctx<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>\n      <span class="token comment">//旋转90度</span>\n      ctx<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>\n      <span class="token comment">//旋转270度</span>\n      ctx<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">)</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// canvas 绘制图片</span>\n<span class="token keyword">function</span> <span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token parameter">img<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> Orientation<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> width<span class="token punctuation">,</span> height <span class="token punctuation">}</span> <span class="token operator">=</span> img\n  <span class="token comment">//生成canvas</span>\n  <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;canvas&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">if</span><span class="token punctuation">(</span>Orientation<span class="token operator">===</span><span class="token number">3</span><span class="token operator">||</span>Orientation<span class="token operator">===</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> height\n    canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> width\n  <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>\n    canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> width\n    canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> height  \n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>Orientation<span class="token operator">!==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    ctx<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>width<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>canvas<span class="token punctuation">.</span>width<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">rotate</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> Orientation<span class="token punctuation">)</span>\n    ctx<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span>canvas<span class="token punctuation">.</span>width<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span>canvas<span class="token punctuation">.</span>width<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 图像质量</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>quality <span class="token operator">&amp;&amp;</span> quality <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> quality <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    quality <span class="token operator">=</span> <span class="token number">0.7</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// quality值越小，所绘制出的图像越模糊</span>\n  canvas<span class="token punctuation">.</span><span class="token function">toBlob</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token string">&quot;image/jpeg&quot;</span><span class="token punctuation">,</span> quality<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 图片渲染</span>\n<span class="token keyword">function</span> <span class="token function">canvasDataURL</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> quality <span class="token operator">=</span> <span class="token number">0.7</span><span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  img<span class="token punctuation">.</span>src <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n  img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">getImageInfo</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token parameter">Orientation</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> Orientation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">compressionImg</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> newFile <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token function">canvasDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token parameter">blob</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 处理后的file</span>\n    newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span>blob<span class="token punctuation">]</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> blob<span class="token punctuation">.</span>type <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newFile <span class="token operator">||</span> newFile<span class="token punctuation">.</span>size <span class="token operator">&gt;</span> file<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      newFile <span class="token operator">=</span> file\n    <span class="token punctuation">}</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span>newFile<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> compressionImg<span class="token punctuation">;</span>\n</code></pre></div><ol start="2"><li>二种方案</li></ol><p>github地址： <a href="https://github.com/WangYuLue/image-conversion" target="_blank" rel="noopener noreferrer">https://github.com/WangYuLue/image-conversion</a>（支持按照指定kb来压缩，也支持按照质量压缩）</p><h2 id="八、图片预览插件"><a class="header-anchor" href="#八、图片预览插件" aria-hidden="true">#</a> 八、图片预览插件</h2><p>教程： <a href="https://www.cnblogs.com/Jimc/p/10132177.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/Jimc/p/10132177.html</a></p><p>官网： <a href="https://github.com/fengyuanchen/viewerjs" target="_blank" rel="noopener noreferrer">https://github.com/fengyuanchen/viewerjs</a></p><h2 id="九、h5唤起客户端"><a class="header-anchor" href="#九、h5唤起客户端" aria-hidden="true">#</a> 九、h5唤起客户端</h2><p>地址：<a href="https://github.com/suanmei/callapp-lib" target="_blank" rel="noopener noreferrer">https://github.com/suanmei/callapp-lib</a></p>',120);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
