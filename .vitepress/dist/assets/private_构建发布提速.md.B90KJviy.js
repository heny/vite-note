import{_ as e,c as a,o as r,a4 as s}from"./chunks/framework.Caa1YTU6.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"private/构建发布提速.md","filePath":"src/private/构建发布提速.md","lastUpdated":1650536289000}'),t={name:"private/构建发布提速.md"},p=s('<p>目的：提升本地开发效率(dev 环境下启动，hmr 编译速度)，提升打包速度，发布速度</p><p>注意：升级存在风险，请做好回归，此外本指南列出粗略方向，如升级中遇到问题，欢迎拿出来大家一起讨论解决</p><h3 id="_1-升级webpack-5-webpack-dev-server-5" tabindex="-1">1. 升级webpack@5 webpack-dev-server@5 <a class="header-anchor" href="#_1-升级webpack-5-webpack-dev-server-5" aria-label="Permalink to &quot;1. 升级webpack@5 webpack-dev-server@5&quot;">​</a></h3><p>webpack5 的提升是巨大的，根据HAA项目的经验，升级前为 1m 左右，升级后为 30s 左右</p><p>参考文档:</p><p><a href="https://webpack.js.org/migrate/5/" target="_blank" rel="noreferrer"></a>webpack4 =&gt; webpack5</p><p><a href="https://webpack.js.org/migrate/5/" target="_blank" rel="noreferrer"> https://webpack.js.org/migrate/5/</a></p><p>一些通用的点：</p><p>升级最新版 mini-css-extract-plugin</p><p>升级最新版 html-webpack-plugin</p><p>css-loader postcss-loader 等loader升级最新版</p><p><code>raw-loader</code>，<code>url-loader</code>，<code>file-loader</code> 改为 <a href="https://webpack.js.org/guides/asset-modules/" target="_blank" rel="noreferrer">资产模块</a></p><p>optimize-css-assets-webpack-plugin 切换为 <a href="https://github.com/webpack-contrib/css-minimizer-webpack-plugin" target="_blank" rel="noreferrer">css-minimizer-webpack-plugin</a></p><p>webpack-dev-server3 =&gt; webpack-dev-server4</p><p><a href="https://github.com/webpack/webpack-dev-server/blob/master/migration-v4.md" target="_blank" rel="noreferrer">https://github.com/webpack/webpack-dev-server/blob/master/migration-v4.md</a></p><h3 id="_2-优化babel" tabindex="-1">2. 优化babel <a class="header-anchor" href="#_2-优化babel" aria-label="Permalink to &quot;2. 优化babel&quot;">​</a></h3><p>升级一下babel的最新版本(包含 preset core core-js等)，删除多余的plugin，目前preset 早已支持 2022 的语法，除了一些额外语法不支持，大部分已经支持</p><p>检查是否配置不同环境的target策略</p><p><img src="https://s1.ax1x.com/2022/04/18/Ld8yvj.png" alt="img"></p><h3 id="_3-使用-swc-dev-环境下替换babel" tabindex="-1">3. 使用 swc dev 环境下替换babel <a class="header-anchor" href="#_3-使用-swc-dev-环境下替换babel" aria-label="Permalink to &quot;3. 使用 swc dev 环境下替换babel&quot;">​</a></h3><p>swc文档: <a href="https://swc.rs/docs/configuration/swcrc" target="_blank" rel="noreferrer">https://swc.rs/docs/configuration/swcrc</a></p><p>这是我的配置，供参考</p><p><img src="https://s1.ax1x.com/2022/04/18/Ld8cKs.png" alt="img"></p><p>这里使用swc 而不用 esbuild 的原因是 swc 支持refresh，此外，目前haa已经尝试在pro环境构建也使用 swc，完全抛弃了babel，但是要注意的是 swc 并不推荐使用额外的插件 <a href="https://swc.rs/docs/usage/plugins" target="_blank" rel="noreferrer">https://swc.rs/docs/usage/plugins</a></p><h3 id="_4-使用esbuild-压缩-css-和-js" tabindex="-1">4. 使用esbuild 压缩 css 和 js <a class="header-anchor" href="#_4-使用esbuild-压缩-css-和-js" aria-label="Permalink to &quot;4. 使用esbuild 压缩 css 和 js&quot;">​</a></h3><p><img src="https://s1.ax1x.com/2022/04/18/Ld8s2Q.png" alt="img"></p><p>参考: <a href="https://github.com/privatenumber/esbuild-loader" target="_blank" rel="noreferrer">https://github.com/privatenumber/esbuild-loader</a></p><h3 id="_5-使用-pnpm" tabindex="-1">5. 使用 pnpm <a class="header-anchor" href="#_5-使用-pnpm" aria-label="Permalink to &quot;5. 使用 pnpm&quot;">​</a></h3><p>pnpm 可解测试环境发布慢的问题，见: <a href="https://confluence.hypers.com/pages/viewpage.action?pageId=88514545" target="_blank" rel="noreferrer">pnpm切换指南</a></p><h3 id="_6-mfsu" tabindex="-1">6.mfsu <a class="header-anchor" href="#_6-mfsu" aria-label="Permalink to &quot;6.mfsu&quot;">​</a></h3><p>mfsu 是一种基于 webpack5 新特性 Module Federation 的打包提速方案。核心原理是将应用的依赖构建为一个 Module Federation 的 remote 应用，以免去应用热更新时对依赖的编译。</p><p>这里贴一下实现原理</p><p><img src="https://s1.ax1x.com/2022/04/18/Ld8grn.png" alt="img"></p><p>之前在 HAA 测试，dev build 从 15s 左右提速到了 8s，可谓是终于实现了秒级别的启动，但是之后发现了一些 remote 找不到的问题，而且由于没有发布正式版本，所以就先没有使用，有兴趣的同学可以参考这个 repo: <a href="https://github.com/sorrycc/example-webpack-mfsu" target="_blank" rel="noreferrer">https://github.com/sorrycc/example-webpack-mfsu</a></p>',34),c=[p];function o(l,i,b,n,d,h){return r(),a("div",null,c)}const u=e(t,[["render",o]]);export{g as __pageData,u as default};
