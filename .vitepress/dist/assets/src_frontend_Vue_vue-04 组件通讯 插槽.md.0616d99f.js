import{o as n,c as s,d as a}from"./app.1237ae02.js";const t='{"title":"Vue-04 组件通讯、插槽、JSX","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、组件通讯","slug":"一、组件通讯"},{"level":3,"title":"父传子","slug":"父传子"},{"level":3,"title":"子传父","slug":"子传父"},{"level":3,"title":"兄弟组件数据传递","slug":"兄弟组件数据传递"},{"level":3,"title":"八种组件通信方式","slug":"八种组件通信方式"},{"level":2,"title":"二、插槽","slug":"二、插槽"},{"level":3,"title":"单一插槽","slug":"单一插槽"},{"level":3,"title":"具名slot","slug":"具名slot"},{"level":3,"title":"slot通讯","slug":"slot通讯"},{"level":3,"title":"v-slot","slug":"v-slot"},{"level":3,"title":"多个slot处理","slug":"多个slot处理"},{"level":2,"title":"三、函数式组件functional","slug":"三、函数式组件functional"},{"level":3,"title":"向子元素传递attribute和事件","slug":"向子元素传递attribute和事件"},{"level":2,"title":"五、JSX","slug":"五、jsx"},{"level":2,"title":"四、动态组件","slug":"四、动态组件"},{"level":3,"title":"Vue.nextTick()","slug":"vue-nexttick"},{"level":2,"title":"五、v-once","slug":"五、v-once"},{"level":3,"title":"this.$forceUpdate()","slug":"this-forceupdate"},{"level":2,"title":"六、过滤器","slug":"六、过滤器"},{"level":3,"title":"创建过滤器","slug":"创建过滤器"},{"level":3,"title":"过滤器的使用","slug":"过滤器的使用"},{"level":3,"title":"过滤器串联","slug":"过滤器串联"},{"level":3,"title":"过滤器和computed的区别","slug":"过滤器和computed的区别"},{"level":3,"title":"金钱过滤器 加逗号","slug":"金钱过滤器-加逗号"},{"level":2,"title":"七、自定义指令","slug":"七、自定义指令"}],"relativePath":"src/frontend/Vue/vue-04 组件通讯 插槽.md","lastUpdated":1615699077429}',p={},e=a('<h1 id="vue-04-组件通讯、插槽、jsx"><a class="header-anchor" href="#vue-04-组件通讯、插槽、jsx" aria-hidden="true">#</a> Vue-04 组件通讯、插槽、JSX</h1><h2 id="一、组件通讯"><a class="header-anchor" href="#一、组件通讯" aria-hidden="true">#</a> 一、组件通讯</h2><h3 id="父传子"><a class="header-anchor" href="#父传子" aria-hidden="true">#</a> 父传子</h3><div class="language-html"><pre><code>父：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">:msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>message<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span>\n子：child:{props:[&#39;msg&#39;]}  //使用props接收\n</code></pre></div><ul><li>监听子组件的生命周期</li></ul><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name"><span class="token namespace">@hook:</span>mounted</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span><span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre></div><h3 id="子传父"><a class="header-anchor" href="#子传父" aria-hidden="true">#</a> 子传父</h3><ul><li>直接传递</li></ul><div class="language-html"><pre><code>子：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>send<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>\n         send内容：this.$emit(&#39;custom&#39;,&#39;hello&#39;)\n父：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">@custom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>receive<span class="token punctuation">&#39;</span></span> <span class="token attr-name">:msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>message<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>\n        receive(result){console.log(result)}\n如果是在组件当中，需要使用EventBus传值;\n</code></pre></div><ul><li>sync修饰符传递</li></ul><div class="language-html"><pre><code>子：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>send<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>\n      send内容： this.$emit(&#39;update:msg&#39;,newValue)\n\n父：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">:msg.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>message<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span>  //不用写事件接收参数\n    扩展为：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">:msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>message<span class="token punctuation">&#39;</span></span> <span class="token attr-name"><span class="token namespace">@updata:</span>msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>val=&gt;message=val<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- 如果需要绑定对象，直接使用v-bind --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">v-bind.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>obj<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>\n    注意：这样会把obj对象里面的每一个属性(如title)都作为一个独立的prop传进入,在子组件的props填写时不能直接填写obj,需要填写obj里面的属性名(如title)\n</code></pre></div><h3 id="兄弟组件数据传递"><a class="header-anchor" href="#兄弟组件数据传递" aria-hidden="true">#</a> 兄弟组件数据传递</h3><blockquote><p>创建一个新的vue实例，专门用于数据传递</p></blockquote><ol><li>创建新的实例：var vm = new Vue()</li></ol><div class="language-js"><pre><code><span class="token comment">// 组件A</span>\n<span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    vm<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;事件名&#39;</span><span class="token punctuation">,</span><span class="token parameter">msg</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 组件B</span>\nvm<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;事件名&#39;</span><span class="token punctuation">,</span>要发送的数据<span class="token punctuation">)</span>\n</code></pre></div><h3 id="八种组件通信方式"><a class="header-anchor" href="#八种组件通信方式" aria-hidden="true">#</a> 八种组件通信方式</h3><p><strong>1. props / $emit</strong></p><ul><li>父组件向子组件传值</li></ul><div class="language-html"><pre><code>// 父组件\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com-article</span> <span class="token attr-name">:articles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>articleList<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com-article</span><span class="token punctuation">&gt;</span></span>\n// 子组件\nprops: [&#39;articles&#39;]\n</code></pre></div><p>称为单向数据流，prop不可被修改，只读属性</p><ul><li>子组件向父组件传值</li></ul><div class="language-html"><pre><code>// 父组件\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com-article</span> <span class="token attr-name">:articles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>articleList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@onEmitIndex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onEmitIndex<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com-article</span><span class="token punctuation">&gt;</span></span>\n// 子组件\nthis.$emit(&#39;onEmitIndex&#39;, index) //父组件需要一个形参来接收这个数据\n</code></pre></div><p><strong>2. $children / $parent 访问实例</strong></p><ul><li>访问子组件</li></ul><div class="language-js"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>messageA <span class="token operator">=</span> <span class="token string">&#39;this is new value&#39;</span>\n<span class="token comment">// 使用$children可以直接访问方法，不需要$methods；</span>\n</code></pre></div><ul><li>访问父组件实例</li></ul><div class="language-js"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>msg<span class="token punctuation">;</span>\n</code></pre></div><p>$children的值是<strong>数组</strong>，$parent的值是<strong>对象</strong></p><p>**使用场景： **填写自定义组件时，子组件可以通过访问$parent调用父组件里面的方法刷新列表，就不需要传入方法给子组件了；</p><p>**3. provide / inject **</p><blockquote><p>嵌套的组件传值（A是B的父组件，B是C的父组件）（隔代传值，需要有关系）</p></blockquote><p>父组件使用provide提供变量，子组件使用inject注入变量</p><div class="language-js"><pre><code><span class="token comment">// A组件定义</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> provide<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">for</span><span class="token operator">:</span> <span class="token string">&quot;demo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">//注册变量在data之外；</span>\n\n<span class="token comment">// B组件</span>\nname<span class="token operator">:</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span>\n\n<span class="token comment">// C组件</span>\nname<span class="token operator">:</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span>\ninject<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;for&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>demo<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>for <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre></div><p><strong>4. ref / refs</strong></p><blockquote><p>ref如果在普通的DOM元素上使用，引用的指向就是DOM元素，如果用在子组件上，引用就指向组件实例，可以通过实例直接调用组件的方法或访问数据</p></blockquote><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-a</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>comA<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-a</span><span class="token punctuation">&gt;</span></span>\nthis.$refs.comA;\n\n// 由于变量名不能是中划线,如果是中划线可以使用中括号的形式\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-a</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>com-a<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-a</span><span class="token punctuation">&gt;</span></span>\nthis.$refs[&#39;com-a&#39;]\n</code></pre></div><p><strong>5. eventBus</strong></p><p>事件总线，在Vue中可以使用它来作为沟通桥梁的概念，如同事件中心，可以向该中心注册发送事件或接收事件，所有组件都可以通知其他组件；</p><p>注意：当项目较大，就容易造成难以维护的灾难</p><ul><li>初始化事件总线， 在main.js中绑定到Vue实例化上</li></ul><div class="language-js"><pre><code><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$eventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li>发送事件</li></ul><div class="language-js"><pre><code><span class="token comment">// 组件A</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$eventBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;addition&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> num<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li>接收事件</li></ul><div class="language-js"><pre><code><span class="token comment">// 组件B</span>\n<span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>$eventBus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;addition&#39;</span><span class="token punctuation">,</span> <span class="token parameter">param</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> param<span class="token punctuation">.</span>num<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>移除事件监听者</li></ul><div class="language-js"><pre><code><span class="token comment">// 使用eventBus要在组件销毁时卸载，否则会多次挂载，造成触发一次但多个响应的情况</span>\n<span class="token function">beforeDestroy</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>$eventBus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">&#39;addition&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>6. vuex 状态管理器</strong></p><p><strong>7. localStorage / sessionStorage</strong></p><p><strong>8. $attrs 、 $listeners</strong></p><ul><li><p><code>$attrs</code>用来接收组件剩余参数，使用v-bind绑定；（剩余参数是指没有在props接收的参数）</p></li><li><p><code>$listeners</code>用来接收组件剩余自定义方法，使用v-on的方法；</p></li></ul><p>在vue2.4以上，引入了$attrs和$listeners，新增了inheritAttrs选项</p><p><code>inheritAttrs</code>：如果给子组件绑定了props，子组件没有接收，将会直接绑定在子组件的html根元素上，作为自定义属性；修改为false将不会绑定在根元素上；</p><p>这个属性不影响<code>class</code>和<code>style</code>的绑定</p><div class="language-vue"><pre><code>// ChildA\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildA</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>hhh<span class="token punctuation">&#39;</span></span> <span class="token attr-name">@ok</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>handleOk<span class="token punctuation">&#39;</span></span>  <span class="token punctuation">/&gt;</span></span>\n\n// ChildB\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildB</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>$attrs<span class="token punctuation">&#39;</span></span> <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>$listeners<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre></div><p>这两个属性一般在项目中写公共组件，二次封装UI组件时经常被使用；下面例子封装a-modal</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n\t&lt;a-modal\n      title=&#39;系统提示&#39;\n      subtitle=&#39;子标题&#39;\n      v-bind=&#39;$attrs&#39; // 如果还需要绑定其他属性时\n      v-on=&#39;$listeners&#39; // 如果还需要绑定其他方法时\n    &gt;\n    \t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-modal</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><strong>总结</strong></p><p>常见使用场景可以分为三类</p><ul><li>父子组件通信: props; $parent / $children; provide / inject ; ref ; $attrs / $listeners</li><li>兄弟组件通信: eventBus ; vuex</li><li>跨级通信: eventBus；Vuex；provide / inject 、$attrs / $listeners</li></ul><h2 id="二、插槽"><a class="header-anchor" href="#二、插槽" aria-hidden="true">#</a> 二、插槽</h2><h3 id="单一插槽"><a class="header-anchor" href="#单一插槽" aria-hidden="true">#</a> 单一插槽</h3><ul><li>使用&lt;slot&gt;标签放在组件内，在使用组件时，在内部插入的内容会显示在slot标签内</li><li>slot的默认值：当没有给子组件传递内容的时候会显示，传递的内容也可以是标签</li></ul><div class="language-html"><pre><code>// 父组件\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>这里的内容会传递到子组件去<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span>\n\n// 子组件\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span>这里是默认值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="具名slot"><a class="header-anchor" href="#具名slot" aria-hidden="true">#</a> 具名slot</h3><ul><li>给slot起name名：&lt;slot name=&#39;header&#39;&gt;&lt;/slot&gt;</li><li>标签带上slot名：&lt;div slot=&#39;header&#39;&gt;&lt;/div&gt;会插入到相应的位置</li><li>如果多个slot，填写内容时不带slot的name名，则会写入到slot没有写name名的那个标签</li></ul><div class="language-html"><pre><code>// 父组件\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>son</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>header<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>this is h1 label<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>son</span><span class="token punctuation">&gt;</span></span>\n// 2.6.0之后，可以简写slot插槽名字，使用#；\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#header</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n// 子组件\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>header<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selection</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span> // 默认放置位置，隐含default名字\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selection</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="slot通讯"><a class="header-anchor" href="#slot通讯" aria-hidden="true">#</a> slot通讯</h3><ul><li>子传父，子组件将数据绑定到slot上面，父组件使用template标签的slot-scope属性，可以自定义名字；</li><li>注意：只能是template标签作用：子组件放slot，绑定默认的年龄，之后父组件给真实的年龄</li></ul><p>作用：子组件放slot，绑定默认的年龄，之后父组件给真实的年龄</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>son</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>scope<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>\n        {{$log(scope)}}\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{scope.age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>son</span><span class="token punctuation">&gt;</span></span>\n\n// 子组件\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>age<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>\n        {{age}}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\ndata(){\n    return {\n        age: 18\n    }\n}\n</code></pre></div><h3 id="v-slot"><a class="header-anchor" href="#v-slot" aria-hidden="true">#</a> v-slot</h3><ul><li>在2.6.0之后slot，slot-scope和slot被弃用了，使用v-slot代替全部，v-slot可以缩写#</li></ul><div class="language-html"><pre><code>// 绑定对应的具名插槽\n新语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n缩写：  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#header</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n旧语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>header<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n// 绑定作用域\n新语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>defaultProp<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n缩写：  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>defaultProp<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n旧语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>defaultProp<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n// v-slot=&#39;scope&#39;其实是 v-slot:default的缩写, #缩写必须取具名插槽的名;\n\n// 对应具名插槽的作用域\n新语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>headerProp<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n缩写：  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>headerProp<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n旧语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>header<span class="token punctuation">&#39;</span></span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>headerProp<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><ul><li>slot插槽也可以是解构，v-slot绑定的作用域的值是一个对象，对象里面是子组件绑定到slot标签上的props对象，因此需要解构</li></ul><div class="language-html"><pre><code>// 对象解构\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>{user}<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n// 解构重命名\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>{user:person}<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n// 解构默认值\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>{user={firstName:<span class="token punctuation">&#39;</span></span><span class="token attr-name">Guest&#39;}}&#39;</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="多个slot处理"><a class="header-anchor" href="#多个slot处理" aria-hidden="true">#</a> 多个slot处理</h3><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HeaderBar</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#left</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#right</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HeaderBar</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>通过<code>this.$slots</code>可以访问插槽里面的内容：</p><div class="language-js"><pre><code><span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// `&lt;div&gt;&lt;slots&gt;&lt;/slots&gt;&lt;/div&gt;`</span>\n    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>也可能通过<code>this.$scopedSlots</code>访问作用域插槽，每个作用域插槽都是一个返回若干 VNode 的函数</p><div class="language-js"><pre><code>props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// `&lt;div&gt;&lt;slot :text=&quot;message&quot;&gt;&lt;/slot&gt;&lt;/div&gt;`</span>\n  <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>$scopedSlots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      text<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="三、函数式组件functional"><a class="header-anchor" href="#三、函数式组件functional" aria-hidden="true">#</a> 三、函数式组件functional</h2><p>函数组件是没有任何管理状态，没有监听任何传递给它的状态，也没有生命周期方法，函数式组件是没有响应式数据的，也没有实例，没有this上下文，一个函数式组件：</p><div class="language-js"><pre><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  functional<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Props 是可选的</span>\n  props<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 为了弥补缺少的实例</span>\n  <span class="token comment">// 提供第二个参数作为上下文</span>\n  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>单文件组件</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">functional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>context参数提供以下字段的对象：</p><ul><li><code>props</code>：提供所有 prop 的对象</li><li><code>children</code>：VNode 子节点的数组</li><li><code>slots</code>：一个函数，返回了包含所有插槽的对象，与children不同的是children会将具名插槽直接渲染，slots则选择需要渲染的具名；</li><li><code>scopedSlots</code>：(2.6.0+) 一个暴露传入的作用域插槽的对象。也以函数形式暴露普通插槽。</li><li><code>data</code>：传递给组件的整个<a href="https://cn.vuejs.org/v2/guide/render-function.html#%E6%B7%B1%E5%85%A5%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">数据对象</a>，作为 <code>createElement</code> 的第二个参数传入组件</li><li><code>parent</code>：对父组件的引用</li><li><code>listeners</code>：(2.3.0+) 一个包含了所有父组件为当前组件注册的事件监听器的对象。这是 <code>data.on</code> 的一个别名。</li><li><code>injections</code>：(2.3.0+) 如果使用了 <a href="https://cn.vuejs.org/v2/api/#provide-inject" target="_blank" rel="noopener noreferrer"><code>inject</code></a> 选项，则该对象包含了应当被注入的 property。</li></ul><p>在添加<code>functional: true</code>，render函数会增加context参数，有个别改变：</p><ul><li><p><code>this.$slots.default</code>需要变更为<code>context.children</code>，</p></li><li><p><code>this.level</code>需要更新为<code>context.props.level</code>；</p></li></ul><p>函数式组件的好处是：渲染开销很低；在作为包装组件时也非常有用；</p><p>一个smart-list例子：</p><div class="language-js"><pre><code><span class="token keyword">var</span> EmptyList <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> TableList <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> OrderedList <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> UnorderedList <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n\nVue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;smart-list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  functional<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">{</span>\n    items<span class="token operator">:</span> <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> Array<span class="token punctuation">,</span>\n      required<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    isOrdered<span class="token operator">:</span> Boolean\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">function</span> <span class="token function">appropriateListComponent</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> items <span class="token operator">=</span> context<span class="token punctuation">.</span>props<span class="token punctuation">.</span>items\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> EmptyList\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> TableList\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>props<span class="token punctuation">.</span>isOrdered<span class="token punctuation">)</span>      <span class="token keyword">return</span> OrderedList\n\n      <span class="token keyword">return</span> UnorderedList\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>\n      <span class="token function">appropriateListComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      context<span class="token punctuation">.</span>data<span class="token punctuation">,</span>\n      context<span class="token punctuation">.</span>children\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="向子元素传递attribute和事件"><a class="header-anchor" href="#向子元素传递attribute和事件" aria-hidden="true">#</a> 向子元素传递attribute和事件</h3><p>函数式组件：</p><div class="language-js"><pre><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;my-functional-button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  functional<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 完全透传任何 attribute、事件监听器、子节点等。</span>\n    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>data<span class="token punctuation">,</span> context<span class="token punctuation">.</span>children<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>单模板组件：</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">functional</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-primary<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data.attrs<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>listeners<span class="token punctuation">&quot;</span></span>\n  <span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h2 id="五、jsx"><a class="header-anchor" href="#五、jsx" aria-hidden="true">#</a> 五、JSX</h2><p>一个jsx方便的例子：</p><p>通过传入的level确定渲染hn的标签：</p><div class="language-js"><pre><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;anchored-header&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    props<span class="token operator">:</span> <span class="token punctuation">{</span>\n        level<span class="token operator">:</span> <span class="token punctuation">{</span>\n            type<span class="token operator">:</span> Number<span class="token punctuation">,</span>\n            required<span class="token operator">:</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>\n        \t<span class="token string">&#39;h&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>level<span class="token punctuation">,</span> <span class="token comment">// 传入的props</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default <span class="token comment">// 子节点数组</span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="四、动态组件"><a class="header-anchor" href="#四、动态组件" aria-hidden="true">#</a> 四、动态组件</h2><blockquote><p>在标签上添加一个is特性来决定显示哪个组件，比较实用，等同于tab切换栏</p></blockquote><ul><li><p>&lt;div :is=&quot;&#39;组件名&#39;&quot;&gt;&lt;/div&gt; 组件名记得加引号</p></li><li><p>组件名也可以是一个变量，变量的值就是这个组件的名称；可以通过几个按钮更新这个变量，实现tab切换</p></li></ul><p>**keep-alive **（可以给router-view）</p><ul><li>动态组件每点击下一个则会直接销毁上一个</li><li>使用&lt;keep-alive&gt;标签将添加了is特性的标签包裹起来，点击之后则会缓存下来当前的组件，不会销毁之前的组件，不再重新加载；主要用于保留组件状态，避免重新加载</li><li>点击之后添加一个事件，并使用<code>this.$children</code>验证，显示多少个孩子</li><li>因为打印时，会先输出console.log，会出现验证延迟，所以可以添加一个方法，this.$nextTick()，括号里面写一个回调函数，等待页面渲染完成之后再打印console.log</li></ul><h3 id="vue-nexttick"><a class="header-anchor" href="#vue-nexttick" aria-hidden="true">#</a> Vue.nextTick()</h3><p><code>nextTick</code> 可以让我们在下次 DOM 更新循环结束之后执行延迟回调，用于获得更新后的 DOM；nextTick返回一个promise，也支持then回调使用</p><div class="language-js"><pre><code><span class="token comment">// 修改数据</span>\nvm<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span>\n<span class="token comment">// DOM 还没有更新</span>\nVue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// DOM 更新了</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// promise使用</span>\nVue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="五、v-once"><a class="header-anchor" href="#五、v-once" aria-hidden="true">#</a> 五、v-once</h2><ol><li>对于低开销（纯静态页面）元素可以添加v-once指令，来达到缓存效果，像友情链接之类的；</li><li>对于有数据变化的元素，绝对不要加</li></ol><div class="language-js"><pre><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;terms-of-service&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;div v-once&gt;\n      &lt;h1&gt;Terms of Service&lt;/h1&gt;\n      ... a lot of static content ...\n    &lt;/div&gt;\n  </span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="this-forceupdate"><a class="header-anchor" href="#this-forceupdate" aria-hidden="true">#</a> this.$forceUpdate()</h3><p>可以强制更新vue实例，对于一些没有被vue响应式的数据发生改变时，可以使用该函数；</p><h2 id="六、过滤器"><a class="header-anchor" href="#六、过滤器" aria-hidden="true">#</a> 六、过滤器</h2><blockquote><p>使用过滤器，直接修改原数据，并渲染页面</p></blockquote><h3 id="创建过滤器"><a class="header-anchor" href="#创建过滤器" aria-hidden="true">#</a> 创建过滤器</h3><p>在实例当中定义过滤器的名字，定义过滤器必须返回值</p><ul><li>全局过滤器</li></ul><p>第一个参数是过滤器名字，第二个是一个函数</p><div class="language-js"><pre><code>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">&#39;reverse&#39;</span><span class="token punctuation">,</span><span class="token parameter">value</span><span class="token operator">=&gt;</span>val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li>局部过滤器 局部过滤器大于全局过滤器</li></ul><div class="language-js"><pre><code>filters<span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="过滤器的使用"><a class="header-anchor" href="#过滤器的使用" aria-hidden="true">#</a> 过滤器的使用</h3><p>常用于插值和v-bind表达式中</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{msg | reverse}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>msg | reverse<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>msg是需要进行过滤的参数，msg是需要进行过滤的参数，如果还需要传参，可以在<strong>过滤器加个小括号传参</strong></p><h3 id="过滤器串联"><a class="header-anchor" href="#过滤器串联" aria-hidden="true">#</a> 过滤器串联</h3><p>下面的例子updateA进行过滤器msg再将结果传入updateB进行过渡，呈现最终结果</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{msg|updateA|updateB}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="过滤器和computed的区别"><a class="header-anchor" href="#过滤器和computed的区别" aria-hidden="true">#</a> 过滤器和computed的区别</h3><ul><li>computed只能针对定义的属性，进行更新处理，需要一个就添加一个函数</li><li>过滤器可以定义一个，给需要过滤的属性添加，可以使用多次</li></ul><h3 id="金钱过滤器-加逗号"><a class="header-anchor" href="#金钱过滤器-加逗号" aria-hidden="true">#</a> 金钱过滤器 加逗号</h3><div class="language-js"><pre><code>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">&#39;rmb-swich&#39;</span><span class="token punctuation">,</span><span class="token parameter">val</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    val <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> str <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> regstr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{3}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token parameter">val</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token keyword">var</span> stm <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n        stm <span class="token operator">+=</span> val<span class="token operator">+</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> stm<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>regstr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        regstr <span class="token operator">=</span> regstr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> nums <span class="token operator">=</span> regstr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;￥&#39;</span><span class="token operator">+</span>nums\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>可以直接使用正则格式化金钱：</p><div class="language-js"><pre><code><span class="token string">&#39;12345678&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B(?=(?:\\d{3})+(?!\\d))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="七、自定义指令"><a class="header-anchor" href="#七、自定义指令" aria-hidden="true">#</a> 七、自定义指令</h2><ol><li>使用v-自定义属性名进行绑定标签，如果需要传参可以在等于后面传入参数，使用binding获取传入的参数</li></ol><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-focus</span><span class="token punctuation">&gt;</span></span>\n\ndirectives:{\n    focus:{\n        inserted(el,binding){el.focus()}\n    }\n}\n</code></pre></div><ol start="2"><li><p>可用的钩子函数及其参数</p><ul><li><code>bind</code>：第一次绑定到元素时调用，只调用一次</li><li><code>unbind</code>：DOM元素被vue移除时调用</li><li><code>inserted</code>：当被绑定的元素插入到DOM中时调用</li><li><code>update</code>：被绑定元素所在的模板更新时调用</li></ul></li><li><p>自定义指令可用的钩子函数有两个形参</p><ul><li><code>el</code>：代表指令所绑定的元素</li><li><code>binding</code>：代表指令中详细内容，包括指令名称，参数，修饰符等</li></ul></li><li><p>自定义指令简写</p></li></ol><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-demo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>{color:<span class="token punctuation">&quot;</span>white<span class="token punctuation">&quot;</span>,text:<span class="token punctuation">&quot;</span>hello!<span class="token punctuation">&quot;</span>}<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span> // 可以直接传入对象字面量\nVue.directive(&#39;demo&#39;, function(el, binding){\n    el.style.backgroundColor = binding.value.color\n})\n</code></pre></div>',143);p.render=function(a,t,p,o,c,l){return n(),s("div",null,[e])};export default p;export{t as __pageData};
