import{o as n,c as s,d as a}from"./app.e9024871.js";const p='{"title":"Webpack-05 抽离公共模块、懒加载","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、抽离公共模块","slug":"一、抽离公共模块"},{"level":2,"title":"二、懒加载","slug":"二、懒加载"}],"relativePath":"src/frontend/Webpack/webpack-05 抽离公共模块、懒加载.md","lastUpdated":1615699077434}',t={},o=a('<h1 id="webpack-05-抽离公共模块、懒加载"><a class="header-anchor" href="#webpack-05-抽离公共模块、懒加载" aria-hidden="true">#</a> Webpack-05 抽离公共模块、懒加载</h1><h2 id="一、抽离公共模块"><a class="header-anchor" href="#一、抽离公共模块" aria-hidden="true">#</a> 一、抽离公共模块</h2><p>如果a.js和b.js是公共的模块，在index.js和other.js文件里面都引入了，打包时则是打包两份，因此可以将a.js和b.js抽离出来，只打包一份</p><ol><li>配置optimization</li></ol><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n        splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 分割代码块</span>\n            cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 缓存组</span>\n                common<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 公共的模块</span>\n                    chunks<span class="token operator">:</span> <span class="token string">&#39;initial&#39;</span><span class="token punctuation">,</span>\n                    minSize<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">// 大于0字节的就抽离</span>\n                    minChunks<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 引用两次一定抽离</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                vendor<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 抽离第三方</span>\n                    priority<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 权重,先执行抽离第三方, 再抽离前一个</span>\n                    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 将node_modules抽离</span>\n                    chunks<span class="token operator">:</span> <span class="token string">&#39;initial&#39;</span><span class="token punctuation">,</span>\n                    minSize<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">// 大于0字节的就抽离</span>\n                    minChunks<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 引用两次一定抽离</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="二、懒加载"><a class="header-anchor" href="#二、懒加载" aria-hidden="true">#</a> 二、懒加载</h2><p>场景：比如点击一个按钮之后加载一个js文件</p><p>使用webpack内置的import语法，默认会返回一个promise，</p><div class="language-js"><pre><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>\nbtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>default<span class="token punctuation">)</span> <span class="token comment">// 放到default属性里面的</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>如果打包失败则需要安装一个插件，</p><p>安装：yarn add @babel/plugin-syntax-dynamic-import</p><div class="language-js"><pre><code><span class="token comment">// 放到解析js的下面</span>\n<span class="token punctuation">{</span>\n    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    use<span class="token operator">:</span> <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n            presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@babel/plugin-syntax-dynamic-import&#39;</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',12);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
