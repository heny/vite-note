import{o as n,c as a,d as s}from"./app.246f1876.js";const t='{"title":"Vue-05 过渡效果、生命周期","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、过渡效果","slug":"一、过渡效果"},{"level":3,"title":"列表渲染","slug":"列表渲染"},{"level":2,"title":"过渡的自定义","slug":"过渡的自定义"},{"level":3,"title":"自定义前缀","slug":"自定义前缀"},{"level":3,"title":"自定义过渡类名","slug":"自定义过渡类名"},{"level":2,"title":"动画钩子","slug":"动画钩子"},{"level":3,"title":"简单的例子","slug":"简单的例子"},{"level":2,"title":"使用animate.css动画库","slug":"使用animate-css动画库"},{"level":2,"title":"生命周期","slug":"生命周期"},{"level":3,"title":"什么是生命周期","slug":"什么是生命周期"},{"level":3,"title":"生命周期的状态","slug":"生命周期的状态"},{"level":2,"title":"脚手架工具Vue-cli","slug":"脚手架工具vue-cli"}],"relativePath":"src/frontend/Vue/vue-05 过渡 生命周期.md","lastUpdated":1615699077430}',p={},e=s('<h1 id="vue-05-过渡效果、生命周期"><a class="header-anchor" href="#vue-05-过渡效果、生命周期" aria-hidden="true">#</a> Vue-05 过渡效果、生命周期</h1><h2 id="一、过渡效果"><a class="header-anchor" href="#一、过渡效果" aria-hidden="true">#</a> 一、过渡效果</h2><ul><li>定义动画 类</li></ul><div class="language-css"><pre><code><span class="token comment">/* 定义进入和离开时候的过渡状态 */</span>\n<span class="token selector">.v-enter-active, .v-leave-active</span> <span class="token punctuation">{</span>\n  <span class="token property">transition</span><span class="token punctuation">:</span> opacity .5s<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* 定义进入过渡的开始状态和离开过渡的结束状态 */</span>\n<span class="token selector">.v-enter, .v-leave-to</span> <span class="token punctuation">{</span>\n  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>使用vue内置的transition标签把需要动画控制的元素包裹起来</li></ul><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>show<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><img src="https://notecdn.heny.vip/images/vue-05_%E8%BF%87%E6%B8%A1_%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-01.png" alt="image"></p><p>图中可见：</p><p>v-enter和v-leave-to的样式是一样的，可以写成一组样式</p><p>v-enter-to和v-leave的样式是一样的，可以写成一组样式</p><ul><li>四个时间点 <ul><li>v-enter：进入之前元素的起始状态，还没进入</li><li>v-enter-to：定义进入过渡结束状态</li><li>v-leave：定义离开过渡的开始状态；</li><li>v-leave-to：离开之后离开的终止状态，动画已经结束了；</li></ul></li><li>两个时间段，在时间段设置过渡等等 <ul><li>v-enter-active：进入动画的时间段发生的事情</li><li>v-leave-active：离开动画的时间段发生的事情</li></ul></li></ul><h3 id="列表渲染"><a class="header-anchor" href="#列表渲染" aria-hidden="true">#</a> 列表渲染</h3><p>在使用v-for循环时，需要使用transition-group标签包裹li，如果要为v-for循环动画时，必须为每一个元素</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>...<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>为列表删除定义移除的动画（固定写法）</p><div class="language-css"><pre><code><span class="token selector">.v-move</span><span class="token punctuation">{</span>\n    <span class="token property">transition</span><span class="token punctuation">:</span>all .6s ease<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.v-leave-active</span><span class="token punctuation">{</span>\n    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>给transition-group添加appear属性，实现页面刚展示出来的入场动画；因为transition-group标签被渲染成了span标签，可以添加一个tag转换ul标签包裹；</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">appear</span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>ul<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>..</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h2 id="过渡的自定义"><a class="header-anchor" href="#过渡的自定义" aria-hidden="true">#</a> 过渡的自定义</h2><h3 id="自定义前缀"><a class="header-anchor" href="#自定义前缀" aria-hidden="true">#</a> 自定义前缀</h3><ul><li>定义样式中v是css中定义样式名字的开头，使用时在transition标签写上name名字</li><li>前缀的作用：区分不同组件的动画；不同的组件使用不同的动画</li></ul><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>fade<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span>\n.fade-enter,.fade-leave-to{\n\topacity: 0\n}\n</code></pre></div><h3 id="自定义过渡类名"><a class="header-anchor" href="#自定义过渡类名" aria-hidden="true">#</a> 自定义过渡类名</h3><ul><li>enter-class</li><li>enter-active-class</li><li>enter-to-class</li><li>leave-class</li><li>leave-active-class</li><li>leave-to-class</li></ul><h2 id="动画钩子"><a class="header-anchor" href="#动画钩子" aria-hidden="true">#</a> 动画钩子</h2><p>使用类名的动画都无法设置半场的动画，需要用到动画钩子，使用动画钩子不需要再设置样式，在methods里面定义；</p><p><strong>半场动画：</strong></p><p>原来动画分为进入和离开，两场动画，半场动画只有进入的状态就消失了，每次点一下就显示隐藏了</p><p>每个钩子对应一个事件，事件的第一个参数：el，表示要执行动画的那个dom元素；js原生的dom元素；动画钩子事件添加到transition标签里</p><ul><li><p>@before-enter=&#39;beforeEnter&#39; 进入之前，</p><p>动画尚未开始，可以在这里设置元素动画之前的起始样式；</p></li><li><p>@enter=&#39;enter&#39; 进入</p><p>这里可以设置动画起始完成之后的状态，enter和leave事件过渡的时候，回调函数必须有第二个参数，done，</p></li><li><p>@after-enter=&#39;afterEnter&#39; 进入之后</p><p>动画完成之后执行的函数，该函数执行有延迟，需要在上一个函数进入调用一次；</p></li><li><p>@enter-cancelled=&#39;enterCancelled&#39; 进入取消（一般用不到）；</p></li></ul><p>v-on:before-leave=&#39;beforeleave&#39;</p><p>v-on:leave=&#39;leave&#39;</p><p>v-on:after-ente=&#39;afterleave&#39;</p><p>v-on:leave-cancelled=&#39;leaveCancelled&#39;</p><h3 id="简单的例子"><a class="header-anchor" href="#简单的例子" aria-hidden="true">#</a> 简单的例子</h3><div class="language-js"><pre><code><span class="token function">beforeEnter</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform<span class="token operator">=</span><span class="token string">&#39;translate(0,0)&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">enter</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    el<span class="token punctuation">.</span>offsetWidth  <span class="token comment">//如果没有动画效果，设置这行代码，可以进行动画，或offsetHeight/top/right都行;</span>\n    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform<span class="token operator">=</span><span class="token string">&#39;translate(0,0)&#39;</span><span class="token punctuation">;</span>\n    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">&#39;all 1s ease&#39;</span><span class="token punctuation">;</span>\n    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//必须要调用一次，否则会出现延迟的情况; 相当于afterenter事件,立即调用最后一个事件;</span>\n<span class="token punctuation">}</span>\n<span class="token function">afterEnter</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span>  <span class="token comment">//进入之后让元素隐藏;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="使用animate-css动画库"><a class="header-anchor" href="#使用animate-css动画库" aria-hidden="true">#</a> 使用animate.css动画库</h2><ul><li>引入animate.css文件</li><li>直接在transition标签上写动画名称</li></ul><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> \n    <span class="token attr-name">leave-active-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>animated fadeOutDown<span class="token punctuation">&#39;</span></span> \n    <span class="token attr-name">enter-active-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>animated flipInX<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isShow<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Baidu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><ul><li>使用animate动画库时，只需要定义两个时间段即可</li><li>animate必须带一个animted的类名</li></ul><h2 id="生命周期"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><h3 id="什么是生命周期"><a class="header-anchor" href="#什么是生命周期" aria-hidden="true">#</a> 什么是生命周期</h3><ul><li>通常叫作生命周期钩子函数，在经过它的阶段则会触发 <ul><li>什么是生命周期：从vue实例创建、运行、到销毁期间的过程统称为生命周期；</li><li>生命周期钩子：就是生命周期事件的别名；</li><li>生命周期钩子=生命周期函数=生命周期事件；</li></ul></li></ul><h3 id="生命周期的状态"><a class="header-anchor" href="#生命周期的状态" aria-hidden="true">#</a> 生命周期的状态</h3><ul><li><p>创建期间的生命周期函数</p><ul><li><p><code>beforeCreate</code>：实例刚在内存中被创建出来，此时，还没有初始化好data和methods属性；</p></li><li><p><code>created</code>：实例已经在内存中创建ok，此时data和methods已经创建ok，还没编译模板，此时还没有el元素；</p></li><li><p><code>beforeMount</code>：已经完成了模板的编译，可以访问$el，页面还没渲染；</p></li><li><p><code>mounted</code>：已挂载，页面被渲染；一般在这里调取接口，ajax或axios等等；</p><p>mounted执行完成不一定页面全部被渲染，可以在mounted里面使用this.$nextTick(()=&gt;{})函数，页面渲染完成时执行；</p></li></ul></li><li><p>运行期间的生命周期函数</p><ul><li><code>beforeUpdate</code>：数据更新时调用，页面还是旧数据，data里是新数据</li><li><code>updated</code>：组件DOM已经更新；updated不一定页面全部被重绘，可以使用this.$nextTick</li><li><code>activated</code>：keep-alive组件激活时被调用</li><li><code>deactivated</code>：keep-alive组件停用时被调用；</li></ul></li><li><p>销毁期间的生命周期函数</p><ul><li><code>beforeDestroy</code>：实例销毁之前调用，在这一步，实例仍然可用</li><li><code>destroyed</code>：实例被销毁后调用； 调用后，当前Vue实例与挂载元素断开了，组件中的所有方法都不可用了；</li></ul></li></ul><p>一般不会自动调用销毁事件，如果需要调用销毁事件，可以写一个按键，定义一个函数，在函数内部调用this.$destroy()，进行手动销毁；尽量避免销毁，一般用不上，如果需要销毁，可以手动调用销毁；</p><p>捕获错误：<code>errorHandler</code></p><p><img src="https://notecdn.heny.vip/images/vue-05_%E8%BF%87%E6%B8%A1_%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-02.png" alt="image"></p><p>生命周期图解：</p><p>在创建之前Vue初始化，没有其他操作；</p><p>在创建之间，依然是初始化，这个时候没有出现el元素，可以访问data；</p><p>在创建和挂载之间，做了大量的事情；</p><p>首先判断是否有el元素，如果没有，分两个步骤：</p><ul><li><p>没有：那生命周期就结束；</p></li><li><p>手动调取$mount()这个方法，去挂载el元素，生命周期继续；</p></li></ul><p>如果有el元素，这个时候我们要判断是否有render()这个函数，如果有，优先去渲染它，如果没有，就找template模板对象，如果有就渲染模板内容，如果没有就去找outerHtml，如果都没有就空白；</p><p>渲染优先级：reder()函数&gt;template&gt;outerHtml</p><p>在挂载之前，出现了el元素，这个时候的dom结构是虚拟dom结构，进行了占位；</p><p>在挂载的时候，出现了el元素dom结构内容，替换成了实体内容；</p><p><strong>当有子组件时的生命周期</strong>（了解之后对数据获取很重要）</p><p>父组件created-&gt;父组件beforeMounte-&gt;子组件created-&gt;子组件mounted-&gt;父组件mounted</p><p><strong>父组件通过异步获取数据，在子组件拿到数据的方法：</strong></p><ol><li>在父组件渲染子组件时添加判断，有数据再渲染子组件</li><li>通过computed事件来处理</li></ol><p><strong>清除定时器或者事件监听</strong></p><p>由于项目中有些页面难免会碰到需要定时器或者事件监听。但是在离开当前页面的时候，定时器如果不及时合理地清除，会造成业务逻辑混乱甚至应用卡死的情况，这个时就需要清除定时器事件监听，即在页面卸载（关闭）的生命周期函数里，清除定时器。</p><div class="language-js"><pre><code>methods<span class="token operator">:</span><span class="token punctuation">{</span>\n  <span class="token function">resizeFun</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>tableHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">-</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;table&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>offsetTop <span class="token operator">-</span> <span class="token number">128</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">setTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">clearTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//清除定时器</span>\n        <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resizeFun<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resizeFun<span class="token punctuation">)</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="脚手架工具vue-cli"><a class="header-anchor" href="#脚手架工具vue-cli" aria-hidden="true">#</a> 脚手架工具Vue-cli</h2><ul><li><p>安装：npm i -g @vue/cli</p></li><li><p>生成包</p><ul><li>使用图形界面安装：vue ui</li><li>使用cmd安装：vue create demo</li></ul></li></ul><p>由于安装node-sass时，会卡住，建议设置下环境</p><div class="language-js"><pre><code>yarn config <span class="token keyword">set</span> sass_binary_site http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>cdn<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>dist<span class="token operator">/</span>node<span class="token operator">-</span>sass <span class="token operator">-</span>g\n</code></pre></div><ul><li><p>执行vue serve运行起来</p></li><li><p>脚手架规范；</p><ul><li>组件名字首字母必须大写</li><li>冒号后面必须有一个空格</li><li>函数名和括号和大括号之间必须有一个空格</li><li>每一个文件最后面必须保留一个空行</li><li>js中要使用单引号，否则报错</li><li>一行结尾不应该有分号</li><li>判断条件不能使用==，需要使用===</li><li>双斜杠注释后面必须留有一个空格</li></ul></li><li><p>脚手架目录结构</p></li></ul>',70);p.render=function(s,t,p,o,l,c){return n(),a("div",null,[e])};export default p;export{t as __pageData};
