import{o as n,c as s,d as a}from"./app.ca2be113.js";const p='{"title":"js-19 ajax、接口请求、跨域","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、ajax","slug":"一、ajax"},{"level":3,"title":"单线程","slug":"单线程"},{"level":3,"title":"工作原理：","slug":"工作原理："},{"level":3,"title":"ajax的优缺点","slug":"ajax的优缺点"},{"level":3,"title":"使用方法","slug":"使用方法"},{"level":3,"title":"method","slug":"method"},{"level":3,"title":"post方式和get方式的区别","slug":"post方式和get方式的区别"},{"level":3,"title":"XHR新增的事件","slug":"xhr新增的事件"},{"level":3,"title":"ProgressEvent","slug":"progressevent"},{"level":3,"title":"封装xhr请求方法","slug":"封装xhr请求方法"},{"level":2,"title":"二、axios","slug":"二、axios"},{"level":3,"title":"优点","slug":"优点"},{"level":3,"title":"快速使用","slug":"快速使用"},{"level":3,"title":"请求方法","slug":"请求方法"},{"level":3,"title":"axios拦截器","slug":"axios拦截器"},{"level":3,"title":"axios取消请求接口","slug":"axios取消请求接口"},{"level":3,"title":"常用config配置","slug":"常用config配置"},{"level":3,"title":"修改默认值","slug":"修改默认值"},{"level":2,"title":"二、superagent","slug":"二、superagent"},{"level":2,"title":"二、vue-resource","slug":"二、vue-resource"},{"level":3,"title":"快速使用","slug":"快速使用-2"},{"level":3,"title":"vue-cli配置模拟假数据","slug":"vue-cli配置模拟假数据"},{"level":3,"title":"接口调用方法","slug":"接口调用方法"},{"level":2,"title":"三、fetch","slug":"三、fetch"},{"level":3,"title":"请求方法","slug":"请求方法-2"},{"level":3,"title":"添加请求头","slug":"添加请求头"},{"level":3,"title":"获取文件二进制数据","slug":"获取文件二进制数据"},{"level":3,"title":"fetch的缺点","slug":"fetch的缺点"},{"level":3,"title":"fetch与jQuery.ajax()的不同","slug":"fetch与jquery-ajax-的不同"},{"level":2,"title":"四、跨域","slug":"四、跨域"},{"level":3,"title":"实现跨域的方式：","slug":"实现跨域的方式："},{"level":3,"title":"JSONP(本质上是XHR，动态生成script标签)","slug":"jsonp-本质上是xhr，动态生成script标签"},{"level":3,"title":"CORS（跨域资源共享）","slug":"cors（跨域资源共享）"},{"level":3,"title":"postMessage","slug":"postmessage"},{"level":3,"title":"利用proxy代理","slug":"利用proxy代理"},{"level":3,"title":"跨域其他解决办法","slug":"跨域其他解决办法"},{"level":3,"title":"九种跨域方案详解","slug":"九种跨域方案详解"}],"relativePath":"src/frontend/Javascript/js-19 ajax、接口请求 跨域.md","lastUpdated":1618135543839}',t={},o=a('<h1 id="js-19-ajax、接口请求、跨域"><a class="header-anchor" href="#js-19-ajax、接口请求、跨域" aria-hidden="true">#</a> js-19 ajax、接口请求、跨域</h1><h2 id="一、ajax"><a class="header-anchor" href="#一、ajax" aria-hidden="true">#</a> 一、ajax</h2><blockquote><p>ajax（Asynchronous javascript and XML）异步的js和xml</p></blockquote><p>ajax是为了实现异步请求，解决单线程的问题才存在的；</p><h3 id="单线程"><a class="header-anchor" href="#单线程" aria-hidden="true">#</a> 单线程</h3><p>只有一条语句执行，如果前面的错误了，后面的无法执行；</p><p>不需要刷新整个页面，刷新页面中的一小部分，后台和服务器之间进行少量的数据交换</p><p>异步：不需要等待，可以执行其他的，定时器也是异步的；</p><p>同步：需要等待前一步执行，才能开始一下步执行；</p><h3 id="工作原理："><a class="header-anchor" href="#工作原理：" aria-hidden="true">#</a> 工作原理：</h3><p>通过XMLHttpRequest对象来向服务器发出异步请求，从服务器获得数据，然后用Javascript来操作DOM而更新页面</p><h3 id="ajax的优缺点"><a class="header-anchor" href="#ajax的优缺点" aria-hidden="true">#</a> ajax的优缺点</h3><ol><li>优点 <ul><li>（1）页面不需要刷新，在页面内与服务器通信，给用户的体验非常好</li><li>（2）使用异步方式与服务器通信，不需要打断用户操作，具有更加迅速的响应能力</li><li>（3）可以减少服务器的负担，利用客户端闲置能力来处理任务</li></ul></li><li>ajax的缺点： <ul><li>（1）ajax干掉了back按钮，即对浏览器后退机制的破坏；</li><li>（2）安全出现问题，因为ajax技术就像是直接建立一个通道,会暴露比以前更多的数据和服务器逻辑；</li><li>（3）对搜索引擎的支持比较弱；</li><li>（4）破坏了程序的异常机制；</li><li>（5）违背了url和资源定位的初衷；</li><li>（6）一些手机设备现在还不能更好的支持ajax；</li></ul></li></ol><h3 id="使用方法"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h3><div class="language-js"><pre><code><span class="token comment">// 声明</span>\n<span class="token keyword">var</span> ajax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 建立接口</span>\najax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>url<span class="token punctuation">,</span>async<span class="token punctuation">)</span>\n<span class="token comment">// 发送</span>\najax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 设置响应类型</span>\najax<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>\n<span class="token comment">// 接收</span>\najax<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> ajax<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol><li><p><code>open</code>方法参数</p><ul><li><p>method分为post和get；</p></li><li><p>url：地址，传输或获取的地址，</p></li><li><p>async定义异步或同步，true是异步的，false是同步的；</p></li></ul></li><li><p><code>send</code>：</p><ol><li>get方式下</li><li>post方式下：</li></ol><p><code>ajax.setRequestHeader(&#39;Content-type&#39;,&#39;application/x-www-form-urlencoded;charset=UTF-8&#39;)</code>;（设置头信息必须放在open后面）</p><p>ajax.send()；必须在发送之前设置头信息，否则会报错；</p></li><li><p><code>responseType</code>：可为arraybuffer 、blob、document、json、text</p></li><li><p>结果</p><p>每当 readyState 改变时，onreadystatechange 函数就会被执行。</p><ol><li>ajax.readyState，存有服务器响应的状态信息； <ul><li>0：未初始化，声明初始化，没有调用open；</li><li>1：启动，建立接口（调用了open），没有调用send；</li><li>2：发送，调用了send已经发送</li><li>3：接收，等待结果（后续操作）；</li><li>4：成功，已经接收到全部响应数据，而且已经可以在客户端使用了（如果写原生的js ajax请求需要等到 readyState==4的时候再做处理）其他的js库已经做好处理了</li></ul></li><li>ajax.status 状态码 <ul><li>1xx：信息响应类，表示接收到请求并且继续处理</li><li>2xx：处理成功响应类，表示动作被成功接收、理解和接受</li><li>3xx：重定向响应类，为了完成指定的动作，必须接受进一步处理</li><li>4xx：客户端错误，客户请求包含语法错误或者是不能正确执行</li><li>5xx：服务端错误，服务器不能正确执行一个正确的请求</li></ul></li><li>ajax.responseText 将结果以字符串的形式返回； <ul><li><code>eval(val)</code>：将字符串转换成真正的数据类型；</li><li><code>JSON.parse(val)</code>：将json格式的字符串转为对象；</li></ul></li></ol></li></ol><h3 id="method"><a class="header-anchor" href="#method" aria-hidden="true">#</a> method</h3><p>得到数据，一般使用get，上传数据一般使用post，不是严格要求的；</p><ul><li><p><code>get</code>方式需要将传输的内容通过?问号的形式写在地址后面 如：a=1&amp;b=2；</p></li><li><p><code>post</code>方式接口需要设置请求头信息：post方式发送请求在send小括号里面传数据；</p></li></ul><h3 id="post方式和get方式的区别"><a class="header-anchor" href="#post方式和get方式的区别" aria-hidden="true">#</a> post方式和get方式的区别</h3><ol><li><p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</p></li><li><p>get方式无法使用缓存文件（更新服务器上的文件或数据库）</p></li><li><p>向服务器发送大量数据（POST 没有数据量限制）</p></li><li><p>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</p></li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> ajax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\najax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;http://39.107.82.176&#39;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>\najax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\najax<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> ajax<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>post请求发送数据方法：</p><div class="language-js"><pre><code><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nxhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;***&#39;</span><span class="token punctuation">)</span>\nxhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-type&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">)</span>\nxhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;hhh&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nxhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="xhr新增的事件"><a class="header-anchor" href="#xhr新增的事件" aria-hidden="true">#</a> XHR新增的事件</h3><ul><li><code>timeout</code> 请求超时时触发</li><li><code>error</code> 请求失败时</li><li><code>abort</code> 请求中断时</li><li><code>load</code> 响应成功后</li><li><code>loadstart</code> 开始请求时</li><li><code>loadend</code> 结束响应时</li><li><code>progress</code> 请求响应过程中连续触发</li><li><code>upload.onprogress(e)</code> 上传进度监听；</li></ul><div class="language-js"><pre><code><span class="token comment">// 请求一个接口</span>\n<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nxhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://wyy.heny.vip/banner&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\nxhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>\nxhr<span class="token punctuation">.</span><span class="token function-variable function">onloadstart</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始请求&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nxhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">progressEvent</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nxhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;请求出错了&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nxhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="progressevent"><a class="header-anchor" href="#progressevent" aria-hidden="true">#</a> ProgressEvent</h3><ul><li>属性 loaded 当前下载了多少字节</li><li>属性 total 总的字节数</li><li>属性 lengthComputable 长度是否可计算</li></ul><p>通过判断长度是否可计算之后再进行loaded/total即可；</p><div class="language-js"><pre><code><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> downloadUrl <span class="token operator">=</span> <span class="token string">&#39;installer.dmg&#39;</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> downloadUrl<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;progress&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">// 响应头要有Content-Length</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> percentComplete <span class="token operator">=</span> event<span class="token punctuation">.</span>loaded <span class="token operator">/</span> event<span class="token punctuation">.</span>total<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>percentComplete<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最后输出1</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>前提是响应头里面有Content-Length这个字段告知当前文件的总字节数，如下图所示：</p><p><img src="https://notecdn.heny.vip/images/js-16_%E9%97%AD%E5%8C%85%E3%80%81%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E3%80%81ajax.png" alt="image-20200514201221347"></p><h3 id="封装xhr请求方法"><a class="header-anchor" href="#封装xhr请求方法" aria-hidden="true">#</a> 封装xhr请求方法</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token punctuation">,</span>\n  method <span class="token operator">=</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>\n  data<span class="token punctuation">,</span>\n  headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">onProgress</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> e\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> onProgress<span class="token punctuation">;</span>\n    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span>\n      xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> headers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="二、axios"><a class="header-anchor" href="#二、axios" aria-hidden="true">#</a> 二、axios</h2><h3 id="优点"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ul><li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener noreferrer">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html" target="_blank" rel="noopener noreferrer">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener noreferrer">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank" rel="noopener noreferrer">XSRF</a></li></ul><h3 id="快速使用"><a class="header-anchor" href="#快速使用" aria-hidden="true">#</a> 快速使用</h3><ul><li>安装：<code>npm install axios</code></li><li>或使用cdn地址：</li></ul><div class="language-js"><pre><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre></div><h3 id="请求方法"><a class="header-anchor" href="#请求方法" aria-hidden="true">#</a> 请求方法</h3><ul><li>get请求（get传参需要使用params传参）</li></ul><div class="language-js"><pre><code>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user?id=12&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\naxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>params<span class="token operator">:</span><span class="token punctuation">{</span>id<span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li>post请求</li></ul><div class="language-js"><pre><code>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">666</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 如果后台没有接收到参数，使用qs转换一下，需要npm i qs安装;</span>\n<span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nparams<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">)</span>\n或：<span class="token keyword">let</span> params <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token operator">:</span><span class="token number">666</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// network中显示form Data才算成功；</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">.</span>then<span class="token operator">...</span><span class="token punctuation">.</span>\n</code></pre></div><ul><li>多个并发请求</li></ul><div class="language-js"><pre><code><span class="token function">get1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user/123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">get2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user/123/permissions&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n       \naxios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acct<span class="token punctuation">,</span>perms</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// spread为分页,如果不使用spread也可以直接使用res，是一个数组;</span>\n</code></pre></div><h3 id="axios拦截器"><a class="header-anchor" href="#axios拦截器" aria-hidden="true">#</a> axios拦截器</h3><p>创建拦截器时，建议创建一个实例来写拦截器，否则会影响全局的拦截器；</p><ul><li>创建文件夹api/index</li></ul><div class="language-js"><pre><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Loading<span class="token punctuation">,</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;element-ui&#39;</span>\n<span class="token keyword">let</span> loading <span class="token operator">=</span> <span class="token keyword">null</span>\n<span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nservice<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n    <span class="token parameter">config</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token comment">// 在发起请求事要做的事情  可以给config添加请求头等</span>\n        loading <span class="token operator">=</span> Loading<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            text<span class="token operator">:</span> <span class="token string">&#39;正在加载......&#39;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> config\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token parameter">error</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\nservice<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n    <span class="token parameter">response</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token comment">// 对响应的事情要做的事情</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>loading<span class="token punctuation">)</span> loading<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> response\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token parameter">error</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>loading<span class="token punctuation">)</span> loading<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;timeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;请求超时，请检查网络是否连接正常&#39;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;请求失败, 请检查网络是否已连接&#39;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> getData <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n        url<span class="token punctuation">,</span>\n        method<span class="token operator">:</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        data\n    <span class="token punctuation">}</span>\n    <span class="token comment">// get方式需要处理, 使用params传参</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        config<span class="token punctuation">.</span>params <span class="token operator">=</span> data\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">service</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>在需要请求数据的地方引入getData即可</li></ul><p><img src="https://notecdn.heny.vip/images/vue-07_%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82_%E8%B7%A8%E5%9F%9F-01.png" alt="image"></p><h3 id="axios取消请求接口"><a class="header-anchor" href="#axios取消请求接口" aria-hidden="true">#</a> axios取消请求接口</h3><p>业务情况：多次点击页面，会造成很多接口的请求，可以在页面切换关闭上一个请求，效果如下</p><p><img src="https://notecdn.heny.vip/images/image-20200611161648246.png" alt="image-20200611161648246"></p><p>在请求拦截器中作处理：</p><div class="language-js"><pre><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n<span class="token keyword">let</span> cancelArr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 保存需要取消的接口</span>\naxios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n\t<span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 判断请求该接口是否需要删除上一个接口</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">.</span>cancelToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 循环取消当前保留的接口</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> cancelArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                cancelArr<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// 对该接口添加取消事件, 注意：必须挂载到config上面去</span>\n            config<span class="token punctuation">.</span>cancelToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">axios<span class="token punctuation">.</span>CancelToken</span><span class="token punctuation">(</span><span class="token parameter">cancel</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                cancelArr<span class="token punctuation">[</span>config<span class="token punctuation">.</span>url<span class="token punctuation">]</span> <span class="token operator">=</span> cancel\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\naxios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n\t<span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 接口回来删除该接口</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>config<span class="token punctuation">.</span>cancelToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">delete</span> cancelArr<span class="token punctuation">[</span>response<span class="token punctuation">.</span>config<span class="token punctuation">.</span>url<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre></div><p>之后哪个接口需要取消的话，直接发送一个<code>{cancelToken: true}</code>即可；</p><h3 id="常用config配置"><a class="header-anchor" href="#常用config配置" aria-hidden="true">#</a> 常用config配置</h3><div class="language-json"><pre><code><span class="token punctuation">{</span>\n    <span class="token comment">// 请求方法</span>\n    method<span class="token operator">:</span> &#39;get&#39;<span class="token punctuation">,</span> \n\t<span class="token comment">// 根路径</span>\n    baseURL<span class="token operator">:</span> &#39;http<span class="token operator">:</span><span class="token comment">//heny.vip&#39;,</span>\n    <span class="token comment">// 自定义请求头</span>\n    headers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 发送数据，用于get</span>\n    params<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 发送数据, 用于POST</span>\n    data<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 指定超时</span>\n    timeout<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n    <span class="token comment">// 解决cookie跨域， 允许后端携带cookie到前端</span>\n    withCredentials<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token comment">// 返回类型，常用有：blob、stream</span>\n    responseType<span class="token operator">:</span> &#39;json&#39;<span class="token punctuation">,</span>\n    <span class="token comment">// 上传处理进度</span>\n    onUploadProgress<span class="token operator">:</span> function(e<span class="token operator">:</span> progressEvent)<span class="token punctuation">{</span>\n        let percentage = Math.round((e.loaded * <span class="token number">100</span>) / e.total) || <span class="token number">0</span>;\n        if(percentage &lt; <span class="token number">100</span>) <span class="token punctuation">{</span>\n            <span class="token comment">// 这里调用进度方法</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 下载处理进度</span>\n    onDownloadProgress<span class="token operator">:</span> function(progressEvent)<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 代理请求，在ip被拉黑时特别有用</span>\n    proxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n        host<span class="token operator">:</span> &#39;<span class="token number">127.0</span>.<span class="token number">0.1</span>&#39;<span class="token punctuation">,</span>\n        port<span class="token operator">:</span> <span class="token number">9000</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 取消请求;</span>\n    cancelToken<span class="token operator">:</span> new CancelToken(function(cancel) <span class="token punctuation">{</span><span class="token punctuation">}</span>)\n<span class="token punctuation">}</span>\n</code></pre></div><p>注意：</p><p>设置了withCredentials:true时，需要将浏览器默认的选项修改一下才行</p><p>Chrome 中打开 chrome://flags，将same-site-by-default-cookies 和 cookies-without-same-site-must-be-secure 设置为 Disabled ，重启浏览器</p><h3 id="修改默认值"><a class="header-anchor" href="#修改默认值" aria-hidden="true">#</a> 修改默认值</h3><div class="language-js"><pre><code>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">&#39;https://api.example.com&#39;</span><span class="token punctuation">;</span>\naxios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">&#39;Authorization&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">AUTH_TOKEN</span><span class="token punctuation">;</span>\naxios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><p>也可以自定义一个实例</p><div class="language-js"><pre><code><span class="token keyword">var</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    baseURL<span class="token operator">:</span> <span class="token string">&#39;...&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="二、superagent"><a class="header-anchor" href="#二、superagent" aria-hidden="true">#</a> 二、superagent</h2><p>支持链式调用</p><p>安装：<code>yarn add superagent</code>；</p><div class="language-js"><pre><code><span class="token keyword">const</span> superagent <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;superagent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsuperagent\n    <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/pet&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;manny&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;X-API-Key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> superagent<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/pet&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>推荐文档：<a href="https://www.jianshu.com/p/1432e0f29abd" target="_blank" rel="noopener noreferrer">SuperAgent使用文档</a></p><h2 id="二、vue-resource"><a class="header-anchor" href="#二、vue-resource" aria-hidden="true">#</a> 二、vue-resource</h2><h3 id="快速使用-2"><a class="header-anchor" href="#快速使用-2" aria-hidden="true">#</a> 快速使用</h3><ul><li><p><strong>安装：</strong> yarn add vue-resource</p></li><li><p>main.js导入</p></li></ul><div class="language-js"><pre><code><span class="token keyword">import</span> VueResource <span class="token keyword">from</span> <span class="token string">&#39;vue-resource&#39;</span>\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueResource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="vue-cli配置模拟假数据"><a class="header-anchor" href="#vue-cli配置模拟假数据" aria-hidden="true">#</a> vue-cli配置模拟假数据</h3><p>地址：build文件夹---&gt;webpack.dev.conf.js文件添加</p><ul><li>引入插件</li></ul><div class="language-js"><pre><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;body-parser&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li>定义路由（在devServer下加入）</li></ul><div class="language-js"><pre><code><span class="token function">before</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span>extended<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//加载中间件</span>\n    app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/seller&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n       res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>errno<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;rose&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;peter&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;jerry&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/addSeller&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            errno<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>\n            data<span class="token operator">:</span><span class="token string">&#39;success&#39;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/goods&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">//处理JSONP请求</span>\n        <span class="token keyword">let</span> $url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n        <span class="token keyword">let</span> ck <span class="token operator">=</span> $url<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback\n        <span class="token keyword">let</span> result <span class="token operator">=</span> ck<span class="token operator">+</span><span class="token string">&#39;(&#39;</span><span class="token operator">+</span><span class="token number">123</span><span class="token operator">+</span><span class="token string">&#39;)&#39;</span>\n        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>JSONP请求，处理callback</li></ul><div class="language-js"><pre><code><span class="token keyword">let</span> $url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">//true解析为对象模式;</span>\n<span class="token keyword">let</span> ck <span class="token operator">=</span> $url<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback  <span class="token comment">//取出回调函数</span>\n<span class="token keyword">let</span> result <span class="token operator">=</span> ck<span class="token operator">+</span><span class="token string">&#39;(&#39;</span><span class="token operator">+</span><span class="token number">123</span><span class="token operator">+</span><span class="token string">&#39;)&#39;</span>  <span class="token comment">//给前端传参</span>\nres<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n</code></pre></div><h3 id="接口调用方法"><a class="header-anchor" href="#接口调用方法" aria-hidden="true">#</a> 接口调用方法</h3><ul><li>get方式（后台接参：req.query）</li></ul><div class="language-js"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">[</span>option<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>successCallback<span class="token punctuation">,</span><span class="token punctuation">[</span>errorCallback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>后台无法接收前台发来的数据，发送请求需要用下面的<span class="token punctuation">)</span>\n\n<span class="token comment">//或使用大括号形式：</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>url<span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>params<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>res<span class="token punctuation">.</span>body<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>   <span class="token comment">//catch捕捉错误</span>\n <span class="token comment">//params要发送的数据;</span>\n\n<span class="token comment">//也可以配合async函数调用：</span>\n<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n<span class="token comment">//this.$http返回一个promise函数，可以调用then方法;</span>\n</code></pre></div><ul><li>post方式（后台接参：req.body）</li></ul><div class="language-js"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>emulateJSON<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>emulateHTTP<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token comment">//第二个参数为要向后台发送的数据;</span>\n</code></pre></div><p>emulateJSON:true：设置表单：application/x-www-form-urlencoded；必须填写;emulateHTTP:true：处理restful：put/patch/delete等请求;</p><ul><li>JSONP方式（后台接参：req.query）</li></ul><div class="language-js"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">[</span>option<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment">//后台无法接参，需要用下面的;</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>url<span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>method<span class="token operator">:</span><span class="token string">&#39;jsonp&#39;</span><span class="token punctuation">,</span>jsonp<span class="token operator">:</span><span class="token string">&#39;callback&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li>其他快捷方法 <ul><li>get(url, [options])</li><li>head(url, [options])</li><li>delete(url, [options])</li><li>jsonp(url, [options])</li><li>post(url, [body], [options])</li><li>put(url, [body], [options])</li><li>patch(url, [body], [options])</li></ul></li><li>查看是否发送成功</li></ul><p>F12查看控制台---Network---headers；点击clear清除一下，再获取，之后headers翻到最下面，post方式中：form data就是发送成功，后台能够正常接收到数据，Request Payload没收到；</p><h2 id="三、fetch"><a class="header-anchor" href="#三、fetch" aria-hidden="true">#</a> 三、fetch</h2><blockquote><p>fetch为原生方法，不需要下载任何插件</p><p>fetch可以跨网络异步获取资源</p></blockquote><p>文档地址：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch" target="_blank" rel="noopener noreferrer">WorkerOrGlobalScope.fetch()</a></p><h3 id="请求方法-2"><a class="header-anchor" href="#请求方法-2" aria-hidden="true">#</a> 请求方法</h3><div class="language-js"><pre><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://wyy.heny.vip/banner&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 获取json格式数据</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">)</span>\n\n<span class="token comment">// 常用方式</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://wyy.heny.vip/banner&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="添加请求头"><a class="header-anchor" href="#添加请求头" aria-hidden="true">#</a> 添加请求头</h3><div class="language-js"><pre><code><span class="token comment">// post方法</span>\n<span class="token keyword">const</span> requestHeaders <span class="token operator">=</span> <span class="token punctuation">{</span>\n    method<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>\n    headers<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>file<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3000/upload&#39;</span><span class="token punctuation">,</span> requestHeaders<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="获取文件二进制数据"><a class="header-anchor" href="#获取文件二进制数据" aria-hidden="true">#</a> 获取文件二进制数据</h3><div class="language-js"><pre><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https://notecdn.heny.vip&#39;</span>\n<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>\n    <span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="fetch的缺点"><a class="header-anchor" href="#fetch的缺点" aria-hidden="true">#</a> fetch的缺点</h3><ul><li>只对网络请求报错，对400，500都当做成功的请求</li><li>默认不会带cookie</li><li>不支持abort，不支持超时控制</li><li>没办法原生监测请求的进度</li></ul><h3 id="fetch与jquery-ajax-的不同"><a class="header-anchor" href="#fetch与jquery-ajax-的不同" aria-hidden="true">#</a> fetch与jQuery.ajax()的不同</h3><ul><li><p>当接收响应状态码是404或500，promise状态仍然是resolve，但是response的返回值ok属性是false；</p></li><li><p>由于fetch返回的只是一个http响应，而不是真的JSON，为了获取JSON的内容，需要使用json()方法</p></li></ul><p>fetch是一个实验的API，在生产环境不建议使用</p><h2 id="四、跨域"><a class="header-anchor" href="#四、跨域" aria-hidden="true">#</a> 四、跨域</h2><p><strong>什么叫跨域</strong></p><p>浏览器中的同域，浏览器中的同源策略指的是：协议、域名、端口号相当；当不同时，就会发生跨域</p><p>在页面中有几个标签的引入是不受同源策略的影响的，如：img、link、script等等；</p><p><strong>为什么浏览器不支持跨域</strong></p><p>浏览器是为了给用户提供一个安全的浏览环境，因此禁止跨域；</p><p>比如：cookie会被用户滥用，拿到其他网站做操作，页面被嵌入ifame等等；</p><h3 id="实现跨域的方式："><a class="header-anchor" href="#实现跨域的方式：" aria-hidden="true">#</a> 实现跨域的方式：</h3><ul><li><code>jsonp</code> 前端解决</li><li><code>cors</code> 后端解决</li><li><code>postMessage</code> 不同iframe跨域</li><li><code>document.domain</code> 通过设置domain为同域名解决跨域； 做子域和父域的通讯，比如a.demo.cn想和demo.cn通讯，可以直接通过iframe去获取window对象，直接拿值；</li><li><code>window.name</code> 同hash解决方式一样，在b.cn中设置window.name的值；</li><li><code>location.hash</code> <a href="http://xn--a-xh0b.xn--cnb-bj4e.xn--cnc-bj4e.cn" target="_blank" rel="noopener noreferrer">在a.cn和b.cn和c.cn</a>，a.cn拿c.cn的值，属性跨域，<a href="http://xn--c-io6b93ncr0btdo.xn--cnb-2w2eo4ct93r.cn" target="_blank" rel="noopener noreferrer">此时需要c.cn去加载b.cn</a>，在b.cn访问hash值；</li><li><code>webpack</code> 代理跨域，使用了http-proxy中间件跨域</li><li><code>nginx</code> 配置跨域</li><li><code>websocket</code> socket跨域没有跨域的处理</li></ul><h3 id="jsonp-本质上是xhr，动态生成script标签"><a class="header-anchor" href="#jsonp-本质上是xhr，动态生成script标签" aria-hidden="true">#</a> JSONP(本质上是XHR，动态生成script标签)</h3><ul><li>兼容性好</li><li>只支持get方式</li></ul><p>jsonp的缺点：由于是访问地址，因此是只能get请求方式，容易被xss攻击，嵌入js脚本；</p><p>封装一个jsonp：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> cb<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span>\n    window<span class="token punctuation">[</span>cb<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>\n      script<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    params <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token punctuation">{</span>cb<span class="token punctuation">}</span><span class="token punctuation">)</span>\n    params <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> tag <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;&amp;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;?&#39;</span>\n      c <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token operator">+</span>p<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n      <span class="token keyword">return</span> c\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n    script<span class="token punctuation">.</span>src <span class="token operator">=</span> url <span class="token operator">+</span> params\n    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 调用时：</span>\n<span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n    params<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n    cb<span class="token operator">:</span> <span class="token string">&#39;show&#39;</span> <span class="token comment">// 回调函数</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="cors（跨域资源共享）"><a class="header-anchor" href="#cors（跨域资源共享）" aria-hidden="true">#</a> CORS（跨域资源共享）</h3><ul><li><p>优点：简单、只需在后台写一句话、GET、POST都支持</p></li><li><p>缺点：兼容性不如JSONP</p></li></ul><p>res.writeHead(&#39;Access-Control-Allow-Origin&#39;,&#39;*&#39;)</p><h3 id="postmessage"><a class="header-anchor" href="#postmessage" aria-hidden="true">#</a> postMessage</h3><p>两个页面之间的通讯使用postMessage，常用于iframe；</p><p>发送消息：</p><p><code>otherWindow.postMessage(message, targetOrigin, [transfer])</code></p><ul><li>otherWindow：目标窗口，如：iframe.contentWindow；</li><li>targetOrigin：目标窗口的地址url，或者*表示无限制，任何url都允许发送；</li></ul><div class="language-js"><pre><code><span class="token comment">// a.com 和 b.com之间的通话</span>\n<span class="token comment">// 父页面向子页面</span>\n<span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByid</span><span class="token punctuation">(</span><span class="token string">&#39;iframe&#39;</span><span class="token punctuation">)</span>\niframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;父页面发送的消息&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://b.com&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 子页面接收父页面的消息</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>origin <span class="token operator">===</span> <span class="token string">&#39;http://a.com&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>origin<span class="token punctuation">)</span> <span class="token comment">// 父页面的url，这里是a.com</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>source<span class="token punctuation">)</span> <span class="token comment">// 父页面window对象 全等于window.parent/window.top</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment">// 父页面发送消息</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 子页面向父页面发送消息</span>\nwindow<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;子页面发送的消息&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://a.com&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 父页面接收消息和子页面是一样的；</span>\n</code></pre></div><h3 id="利用proxy代理"><a class="header-anchor" href="#利用proxy代理" aria-hidden="true">#</a> 利用proxy代理</h3><ul><li>修改config---index.js文件下的proxyTable的值</li><li>特点：跨域失败仅存在于(Ajax),NodeJS(A程序) ===》 PHP(B程序)后台之间是不存在跨域失败</li><li>场景：后台(Java)&lt;=&gt;前端(WebPack)[Proxy]</li><li>场景：公开API[JSONP]</li></ul><div class="language-js"><pre><code><span class="token comment">// webpack配置代理</span>\nproxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">//api前台访问时需要加的前缀；</span>\n    \ttarget<span class="token operator">:</span> <span class="token string">&#39;http://v.juhe.cn&#39;</span><span class="token punctuation">,</span>  <span class="token comment">//需要代理访问跨域的域名</span>\n    \tchangeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 是否设置跨域</span>\n    \tpathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">&quot;^/api&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">}</span> \n    <span class="token punctuation">}</span>  <span class="token comment">//地址重写;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n    \n<span class="token comment">// 前台请求</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/movie/index&#39;</span><span class="token punctuation">)</span>   <span class="token comment">//带上前缀，连接到访问的地址</span>\n<span class="token comment">// 最终请求的地址为：http://v.juhe.cn/movie/index</span>\n</code></pre></div><h3 id="跨域其他解决办法"><a class="header-anchor" href="#跨域其他解决办法" aria-hidden="true">#</a> 跨域其他解决办法</h3><h4 id="修改本地host解决跨域"><a class="header-anchor" href="#修改本地host解决跨域" aria-hidden="true">#</a> 修改本地host解决跨域</h4><blockquote><p>由于造成跨域的原因是因为不同域，我们可以手动修改为同域</p></blockquote><p>host文件位置：C:\\Windows\\System32\\drivers\\etc\\hosts 也可以安装<a href="https://oldj.github.io/SwitchHosts/" target="_blank" rel="noopener noreferrer">SwitchHosts</a>使用； host修改格式如下：</p><div class="language-bash"><pre><code><span class="token number">10.107</span>.18.124  a.com\n</code></pre></div><p>之后访问a.com将会映射到10.107.18.124地址，也可以输入127.0.0.1直接代理本地 可以通过cmd输入ping <a href="http://a.com" target="_blank" rel="noopener noreferrer">a.com</a> 查看访问的ip地址，确认是否代理生效</p><p><strong>修改host不生效的原因</strong></p><ul><li>检查本地是否有其他代理工具，如科学工具</li><li>hosts文件内注释不能和代理在同一行</li><li>尝试使用ipconfig /flushdns 刷新dns缓存</li><li>最后也是最有效的解决三步骤：重启、重装、换电脑</li></ul><h3 id="九种跨域方案详解"><a class="header-anchor" href="#九种跨域方案详解" aria-hidden="true">#</a> 九种跨域方案详解</h3><p>珠峰架构公开课：<a href="https://ke.qq.com/course/367589?taid=2972117369199589#term_id=100437143" target="_blank" rel="noopener noreferrer">九种跨域方案详解</a></p>',146);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
