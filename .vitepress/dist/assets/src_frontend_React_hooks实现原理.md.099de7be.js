import{o as n,c as s,d as a}from"./app.1237ae02.js";const t='{"title":"react hooks 实现原理","description":"","frontmatter":{},"headers":[{"level":2,"title":"useState原理","slug":"usestate原理"},{"level":2,"title":"useCallback (减少渲染次数)","slug":"usecallback-减少渲染次数"},{"level":2,"title":"useMemo (减少渲染次数)","slug":"usememo-减少渲染次数"},{"level":2,"title":"useEffect","slug":"useeffect"},{"level":2,"title":"useLayoutEffect","slug":"uselayouteffect"},{"level":2,"title":"useContext","slug":"usecontext"},{"level":2,"title":"useReducer","slug":"usereducer"}],"relativePath":"src/frontend/React/hooks实现原理.md","lastUpdated":1626605159745}',p={},o=a('<h1 id="react-hooks-实现原理"><a class="header-anchor" href="#react-hooks-实现原理" aria-hidden="true">#</a> react hooks 实现原理</h1><h2 id="usestate原理"><a class="header-anchor" href="#usestate原理" aria-hidden="true">#</a> useState原理</h2><ol><li><h5 id="核心思想：定义一个变量-当渲染组件的时候拿到上个状态"><a class="header-anchor" href="#核心思想：定义一个变量-当渲染组件的时候拿到上个状态" aria-hidden="true">#</a> 核心思想：定义一个变量 当渲染组件的时候拿到上个状态</h5><div class="language-js"><pre><code><span class="token keyword">let</span> lastState <span class="token comment">//上一个状态</span>\n<span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    lastState <span class="token operator">=</span> lastState <span class="token operator">||</span> initialState\n    <span class="token keyword">function</span> <span class="token function">setState</span> <span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        lastState <span class="token operator">=</span> newState\n        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//每次调用setState就会重新刷新渲染组件</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>lastState<span class="token punctuation">,</span>setState<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><h5 id="当使用多个state的时候-可以用数组储存变量"><a class="header-anchor" href="#当使用多个state的时候-可以用数组储存变量" aria-hidden="true">#</a> 当使用多个state的时候 可以用数组储存变量</h5><div class="language-js"><pre><code><span class="token keyword">let</span> hookStates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//保存状态的数组</span>\n<span class="token keyword">let</span> hookIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//状态索引</span>\n<span class="token keyword">function</span> <span class="token function">useState</span> <span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span> <span class="token operator">=</span> hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span> <span class="token operator">||</span> initialState\n    <span class="token comment">// 利用闭包特性 setState执行 不会改变currentIndex</span>\n    <span class="token keyword">let</span> currentIndex <span class="token operator">=</span> hookIndex \n    <span class="token keyword">function</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        hookStates<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token operator">=</span> newState\n        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>setState<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//必须重置为0 否则hookIndex的状态会一直累加 找不到索引项</span>\n    hookIndex <span class="token operator">=</span><span class="token number">0</span> \n    <span class="token comment">//渲染react dom</span>\n    ReactDom<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">&gt;</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElmentById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div></li></ol><h2 id="usecallback-减少渲染次数"><a class="header-anchor" href="#usecallback-减少渲染次数" aria-hidden="true">#</a> useCallback (减少渲染次数)</h2><div class="language-js"><pre><code><span class="token keyword">let</span> hookStates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//保存状态的数组</span>\n<span class="token keyword">let</span> hookIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//状态索引</span>\n<span class="token keyword">function</span> <span class="token function">useCallback</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span>dependencies</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//说明不是第一次  </span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token punctuation">[</span>lastCallback<span class="token punctuation">,</span>lastDependencies<span class="token punctuation">]</span> <span class="token operator">=</span> hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span>\n        <span class="token keyword">let</span> same <span class="token operator">=</span> dependencies<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>item<span class="token operator">===</span>lastDependencies<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>same<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            hookIndex<span class="token operator">++</span>\n               <span class="token keyword">return</span> lastCallback\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//只要有一个变量依赖变化</span>\n            hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">,</span>dependencies<span class="token punctuation">]</span>\n            <span class="token keyword">return</span> callback\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//说明是第一次渲染</span>\n        hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">,</span>dependencies<span class="token punctuation">]</span>\n        <span class="token keyword">return</span> callback\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//必须重置为0 否则hookIndex的状态会一直累加 找不到索引项</span>\n    hookIndex <span class="token operator">=</span><span class="token number">0</span> \n    <span class="token comment">//渲染react dom</span>\n    ReactDom<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">&gt;</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElmentById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="usememo-减少渲染次数"><a class="header-anchor" href="#usememo-减少渲染次数" aria-hidden="true">#</a> useMemo (减少渲染次数)</h2><div class="language-js"><pre><code><span class="token keyword">let</span> hookStates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//保存状态的数组</span>\n<span class="token keyword">let</span> hookIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//状态索引</span>\n<span class="token keyword">function</span> <span class="token function">useCallback</span> <span class="token punctuation">(</span><span class="token parameter">factory<span class="token punctuation">,</span>dependencies</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//说明不是第一次  </span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token punctuation">[</span>lastMemo<span class="token punctuation">,</span>lastDependencies<span class="token punctuation">]</span> <span class="token operator">=</span> hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span>\n        <span class="token keyword">let</span> same <span class="token operator">=</span> dependencies<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>item<span class="token operator">===</span>lastDependencies<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>same<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            hookIndex<span class="token operator">++</span>\n               <span class="token keyword">return</span> lastMemo\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//只要有一个变量依赖变化</span>\n            <span class="token comment">//接受一个函数执行 获得新的memo值</span>\n            <span class="token keyword">let</span> newMemo <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>newMemo<span class="token punctuation">,</span>dependencies<span class="token punctuation">]</span>\n            <span class="token keyword">return</span> newMemo\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//说明是第一次渲染</span>\n        <span class="token keyword">let</span> newMemo <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>newMemo<span class="token punctuation">,</span>dependencies<span class="token punctuation">]</span>\n        <span class="token keyword">return</span> newMemo\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//必须重置为0 否则hookIndex的状态会一直累加 找不到索引项</span>\n    hookIndex <span class="token operator">=</span><span class="token number">0</span> \n    <span class="token comment">//渲染react dom</span>\n    ReactDom<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">&gt;</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElmentById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="useeffect"><a class="header-anchor" href="#useeffect" aria-hidden="true">#</a> useEffect</h2><div class="language-js"><pre><code><span class="token keyword">let</span> hookStates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//保存状态的数组</span>\n<span class="token keyword">let</span> hookIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//状态索引</span>\n<span class="token keyword">function</span> <span class="token function">useEffect</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span>dependencies</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//说明不是第一次  </span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> lastDependencies <span class="token operator">=</span> hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span>\n        <span class="token keyword">let</span> same <span class="token operator">=</span> dependencies<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>item<span class="token operator">===</span>lastDependencies<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>same<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            hookIndex<span class="token operator">++</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//只要有一个变量依赖变化</span>\n            <span class="token comment">//添加一个宏任务，在本次渲染之后执行</span>\n            hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> dependencies\n            <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//说明是第一次渲染</span>\n        hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> dependencies\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">// useEffect 销毁生命周期的写法</span>\n<span class="token keyword">function</span> <span class="token function">useEffect</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span>dependencies</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//说明不是第一次  </span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token punctuation">[</span>oldDestroy <span class="token punctuation">,</span>lastDependencies <span class="token punctuation">]</span> <span class="token operator">=</span> hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span>\n        <span class="token keyword">let</span> same <span class="token operator">=</span> dependencies<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>item<span class="token operator">===</span>lastDependencies<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>same<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            hookIndex<span class="token operator">++</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//只要有一个变量依赖变化</span>\n            <span class="token function">oldDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token comment">//添加一个宏任务，在本次渲染之后执行</span>\n            <span class="token keyword">let</span> destroy <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>destroy<span class="token punctuation">,</span>dependencies<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//说明是第一次渲染</span>\n        <span class="token keyword">let</span> destroy <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>destroy<span class="token punctuation">,</span>dependencies<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//必须重置为0 否则hookIndex的状态会一直累加 找不到索引项</span>\n    hookIndex <span class="token operator">=</span><span class="token number">0</span> \n    <span class="token comment">//渲染react dom</span>\n    ReactDom<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">&gt;</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElmentById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="uselayouteffect"><a class="header-anchor" href="#uselayouteffect" aria-hidden="true">#</a> useLayoutEffect</h2><div class="language-js"><pre><code><span class="token keyword">let</span> hookStates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//保存状态的数组</span>\n<span class="token keyword">let</span> hookIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//状态索引</span>\n<span class="token keyword">function</span> <span class="token function">useLayoutEffect</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span>dependencies</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//说明不是第一次  </span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> lastDependencies <span class="token operator">=</span> hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span>\n        <span class="token keyword">let</span> same <span class="token operator">=</span> dependencies<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>item<span class="token operator">===</span>lastDependencies<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>same<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            hookIndex<span class="token operator">++</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//只要有一个变量依赖变化</span>\n            hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> dependencies\n            <span class="token comment">//添加一个微任务，在本次渲染之前执行</span>\n            <span class="token function">queueMicrotask</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//说明是第一次渲染</span>\n        hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> dependencies\n        <span class="token function">queueMicrotask</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//必须重置为0 否则hookIndex的状态会一直累加 找不到索引项</span>\n    hookIndex <span class="token operator">=</span><span class="token number">0</span> \n    <span class="token comment">//渲染react dom</span>\n    ReactDom<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">&gt;</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElmentById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4dc0611c1216575e2c734795ef3ddd7a-283887" alt="img"></p><h2 id="usecontext"><a class="header-anchor" href="#usecontext" aria-hidden="true">#</a> useContext</h2><div class="language-js"><pre><code><span class="token keyword">let</span> counterContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">useContext</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> context<span class="token punctuation">.</span>_currentValue\n<span class="token punctuation">}</span>\n<span class="token comment">//eg:</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span>setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>counterContext<span class="token punctuation">)</span>\n<span class="token operator">&lt;</span>CounterContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>state<span class="token punctuation">,</span>setState<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>Counter<span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>CounterContext<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span>\n</code></pre></div><h2 id="usereducer"><a class="header-anchor" href="#usereducer" aria-hidden="true">#</a> useReducer</h2><div class="language-js"><pre><code><span class="token keyword">let</span> hookStates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//保存状态的数组</span>\n<span class="token keyword">let</span> hookIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//状态索引</span>\n<span class="token keyword">function</span> <span class="token function">useReducer</span> <span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span>initialState</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span> <span class="token operator">=</span> hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span> <span class="token operator">||</span> initialState\n\n    <span class="token keyword">let</span> currentIndex <span class="token operator">=</span> hookIndex \n    <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        hookStates<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token operator">=</span> reducer<span class="token operator">?</span><span class="token function">reducer</span><span class="token punctuation">(</span>hookStates<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>action<span class="token punctuation">)</span><span class="token operator">:</span>action\n        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dispatch<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',16);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
