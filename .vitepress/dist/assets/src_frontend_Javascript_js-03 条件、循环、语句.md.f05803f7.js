import{o as n,c as s,d as a}from"./app.f5909e71.js";const p='{"title":"js-03 条件、循环、语句","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、if语法","slug":"一、if语法"},{"level":2,"title":"二、do-while循环","slug":"二、do-while循环"},{"level":2,"title":"三、while循环","slug":"三、while循环"},{"level":2,"title":"四、for循环","slug":"四、for循环"},{"level":2,"title":"五、for...in.. 循环","slug":"五、for-in-循环"},{"level":2,"title":"六、label","slug":"六、label"},{"level":2,"title":"六、switch","slug":"六、switch"},{"level":2,"title":"七、三目运算符（三元表达式）","slug":"七、三目运算符（三元表达式）"},{"level":2,"title":"八、with（了解）","slug":"八、with（了解）"},{"level":2,"title":"九、判断简便方法：","slug":"九、判断简便方法："},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"src\\\\frontend\\\\Javascript\\\\js-03 条件、循环、语句.md","lastUpdated":1615699077383}',t={},o=a('<h1 id="js-03-条件、循环、语句"><a class="header-anchor" href="#js-03-条件、循环、语句" aria-hidden="true">#</a> js-03 条件、循环、语句</h1><h2 id="一、if语法"><a class="header-anchor" href="#一、if语法" aria-hidden="true">#</a> 一、if语法</h2><ol><li>在JS当中最常用的语句就是条件和循环了 ；</li><li>当满足此条件时才执行的语句；</li><li>if基本使用</li></ol><p>（1）if(条件){}</p><p>当条件满足时执行，if当中只有1条语句时就可以省略花括号，语句直接紧挨着条件；</p><div class="language-js"><pre><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;成立&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 如果if不满足则不走该条语句</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;...&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>（2）if(){}else{}；</p><p>小括号写条件，花括号写满足条件与不满足的条件；</p><p>开关定义:在if外面声明一个flag=true，在if里面执行第一条改变变量为false，else里面执行条件后改变变量为true，返回去继续执行第一条if；</p><p>（3）if(){}else if(){}else if(){...........}else{}，</p><p>可以写多个判断，当所有条件都不成立时，执行最后一个else，最后一个可以写也可以不写，最好把不好满足的写在前面；</p><h2 id="二、do-while循环"><a class="header-anchor" href="#二、do-while循环" aria-hidden="true">#</a> 二、do-while循环</h2><p><code>do{/*语句...*/}while()</code>；执行一次之后再判断while的条件语句，比while先执行一次；</p><div class="language-js"><pre><code><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//计数器</span>\n<span class="token keyword">do</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;哈哈&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    i<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//一共循环10次,while括号后一定要加分号；</span>\n</code></pre></div><p>（1）while循环特点：先判断，后循环，有可能一次循环都不执行；</p><p>（2）do-while循环特点：先循环，后判断，至少执行一次循环体；</p><h2 id="三、while循环"><a class="header-anchor" href="#三、while循环" aria-hidden="true">#</a> 三、while循环</h2><p>while循环做不到的，for循环一定做不到；for循环只是把循环到的代码集中在了一个地方；</p><ol><li>while(){}；括号填写条件，花括号循环体；</li><li>满足条件开始执行，不满足则不执行；根据返回结果的布尔值进行判断</li><li>for循环与while循环的区别：while循环不一定要有计数器，只要条件满足则会一直循环；</li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//这样是循环10次，如果是&lt;=10，则是11次，因为是从0开始的；</span>\n    循环体；\n    i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//记录次数，不能省略，否则一直循环，浏览器就死了；</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 也可以这样一条语句</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span> i<span class="token operator">++</span>\n</code></pre></div><p>例子1：反复提示用户输入密码</p><div class="language-js"><pre><code><span class="token comment">//提示用户请输入您的帐号和密码,如果有一个错误了,则提示用户继续的输入帐号和密码</span>\n<span class="token keyword">var</span> userPwd <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请您输入您的密码&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> userName <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请您输入您的帐号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>userName <span class="token operator">!=</span> <span class="token string">&quot;admin&quot;</span> <span class="token operator">||</span> userPwd<span class="token operator">!=</span><span class="token string">&quot;123&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n    userPwd <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请您输入您的密码&quot;</span><span class="token punctuation">)</span>   <span class="token comment">// 提示用户输入账号</span>\n    userName <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请您输入您的帐号&quot;</span><span class="token punctuation">)</span>   <span class="token comment">// 提示用户输入密码</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;登录成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>例子2：转换url的Search部分为对象形式</p><div class="language-js"><pre><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;?id=1&amp;name=hny&amp;age=18&#39;</span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w+)=(\\w+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span>    <span class="token comment">// 不能省略这个g</span>\n<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">while</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    o<span class="token punctuation">[</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> RegExp<span class="token punctuation">.</span>$<span class="token number">2</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>  <span class="token comment">// {id:1,name:hny,age:18}</span>\n</code></pre></div><p><img src="https://notecdn.heny.vip/images/js-03_%E6%9D%A1%E4%BB%B6%E3%80%81%E5%BE%AA%E7%8E%AF%E3%80%81%E8%AF%AD%E5%8F%A5-01.png" alt="image"></p><h2 id="四、for循环"><a class="header-anchor" href="#四、for循环" aria-hidden="true">#</a> 四、for循环</h2><ol><li>一件事不停的或者重复去做是循环；</li><li>循环应该有结束的条件，循环还应该有一个计数器(记录循环的次数)；</li><li>for(声明; 判断; 变化){} （1）小括号填写三个内容：声明变量；结束循环的条件；变量改变，花括号填写循环体；</li></ol><p>（2）语法：</p><ul><li>①声明</li><li>②判断条件是否满足，不满足则跳出，满足执行下一步</li><li>③满足则执行循环体</li><li>④执行完循环体跳到变化，之后返回②继续如此</li></ul><p>（3）每次循环可以在外边声明一个变量，将循环的数据保留下来；var sum=0</p><ol start="4"><li>for循环中可以使用break或continue打断</li></ol><p>continue：跳过当前循环；</p><p>break：打断循环；</p><div class="language-js"><pre><code><span class="token comment">// 第一种写法</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 第二种写法</span>\n<span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    j<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="5"><li>for循环括号的三个条件都是可选的，如果都不填写，则会是无限循环</li></ol><div class="language-js"><pre><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*无限循环语句*/</span><span class="token punctuation">}</span>\n\n<span class="token comment">//只给控制表达式，相当于while循环</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">/**/</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="6"><li>for循环存在极大的灵活性，因此它是最常用的一个循环语句；</li></ol><p>例子1：100个偶数相加</p><div class="language-js"><pre><code><span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">//奇数相加则</span>\n        sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>例子2：循环添加div，并设置不同的样式</p><div class="language-js"><pre><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;yellow&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;pink&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;green&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;skyblue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 由于循环里面的条件每次都会走,因此需要在外面声明sum;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    sum <span class="token operator">+=</span> <span class="token string">&quot;&lt;li style=&#39;background:&quot;</span><span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;&#39;&gt;&quot;</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;/li&gt;&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="4"><li>双层for循环</li></ol><p>（1）外层的循环和内层的循环变量名不要重复；</p><p>（2）外层for循环1次，里面循环完；</p><p>（3）第一层循环行数，第二层循环列数；</p><p>例子：99乘法表</p><div class="language-js"><pre><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//循环行数</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//循环列数</span>\n        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">&#39;X&#39;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&#39;=&#39;</span> <span class="token operator">+</span> j<span class="token operator">*</span>i <span class="token operator">+</span> <span class="token string">&#39;&amp;nbsp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="5"><li>for循环调试</li></ol><p>（1）使用控制台查看for循环的执行变化</p><p>（2）在浏览器按f12，打开Sources，点击需要断点的行数，在右侧watch添加需要监听的变量名称，实时查看；</p><p>（3）之后按f5刷新，按向下的，图中小圆圈部分，即可以向下执行后面的顺序；</p><p><img src="https://notecdn.heny.vip/images/js-03_%E6%9D%A1%E4%BB%B6%E3%80%81%E5%BE%AA%E7%8E%AF%E3%80%81%E8%AF%AD%E5%8F%A5-02.png" alt="image"></p><p>（4）f5：跳入方法 f6：向下逐行执行 f7：跳出方法 f8：直接跳转到下一个断点</p><p>项目调试一般直接f8，单步就f6</p><h2 id="五、for-in-循环"><a class="header-anchor" href="#五、for-in-循环" aria-hidden="true">#</a> 五、for...in.. 循环</h2><ol><li>语法：for(var i in 对象){ 循环体 }; 主要是用来循环对象的，因为对象没有长度，没有顺序，所以不能使用for循环；</li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>city<span class="token operator">:</span><span class="token string">&quot;北京&quot;</span><span class="token punctuation">}</span>；\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">//取键名和键值；</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="2"><li><p>循环对象时：变量i表示键名，obj[i]表示键值； 在循环时，取字符串需要obj[i]中括号，不能使用点的形式；</p></li><li><p>循环数组的时候，变量i表示下标，arr[i]表示数据。</p></li></ol><h2 id="六、label"><a class="header-anchor" href="#六、label" aria-hidden="true">#</a> 六、label</h2><ol><li>使用label语句可以在代码中添加标签，可以在break或continue语句引用。加标签的语句一般都要与for语句等循环语句配合使用</li><li>使用示例：</li></ol><div class="language-js"><pre><code>start<span class="token operator">:</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div><ol start="3"><li>双层for循环语句示例</li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token comment">// 使用label标签的for语句</span>\nstart<span class="token operator">:</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 输出0-5</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">===</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">break</span> start<span class="token punctuation">;</span>\n        num<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">//55</span>\n\n<span class="token comment">// 没有使用label标签的for语句</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">//输出0-9, </span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">===</span><span class="token number">5</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">===</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">//当前break只是打断第二层的循环;</span>\n        num<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment">// 95</span>\n</code></pre></div><h2 id="六、switch"><a class="header-anchor" href="#六、switch" aria-hidden="true">#</a> 六、switch</h2><div class="language-js"><pre><code><span class="token keyword">switch</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">case</span> 情况<span class="token number">1</span> <span class="token operator">:</span> 逻辑 <span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> 情况<span class="token number">2</span> <span class="token operator">:</span> 逻辑 <span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span> 逻辑 <span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>判断变量可能有的情况,并执行对应的代码, 当执行成功之后则break打断;</p><ol><li>当case语句表达式时，switch括号中填写true或false，因为每个case值都可以返回一个布尔值，每个case按照顺序被求值，直到找到匹配的值或者遇到default语句为止；</li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>\n<span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">case</span> num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">:</span> \n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;小于0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> num <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token operator">:</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token operator">...</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 因为case的值都会返回一个布尔值;</span>\n</code></pre></div><ol start="2"><li><p>switch语句在比较值时使用的是全等操作符，因此不会发生类型转换，例如&quot;10&quot;，不等于10；</p></li><li><p>break关键字会跳出当前语句，省略break关键字会导致执行完case语句，继续执行下一个case语句，。</p></li><li><p>default关键字相当于else语句，所有条件不满足则执行；</p></li><li><p>switch中的语句也可以是多条语句；</p></li><li><p>Switch技巧 switch条件过多，可以使用对象字面量代替switch，将所有的switch可能得变量作为键值，内容为键名</p></li></ol><p><img src="https://notecdn.heny.vip/images/js-03_%E6%9D%A1%E4%BB%B6%E3%80%81%E5%BE%AA%E7%8E%AF%E3%80%81%E8%AF%AD%E5%8F%A5-03.png" alt="image"></p><ol start="7"><li>switch中case过多时，</li></ol><div class="language-js"><pre><code><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">...</span> <span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token number">2</span> <span class="token operator">:</span>\n    <span class="token comment">// 合并两种情况, 建议带上注释</span>\n    <span class="token keyword">case</span> <span class="token number">3</span> <span class="token operator">:</span> <span class="token operator">...</span> <span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 因为没有break条件, 所以会往下走;</span>\n</code></pre></div><h2 id="七、三目运算符（三元表达式）"><a class="header-anchor" href="#七、三目运算符（三元表达式）" aria-hidden="true">#</a> 七、三目运算符（三元表达式）</h2><ol><li>条件 ? 语句1 : 语句2；</li><li>和if(){}else{}用法相同，适用于只有一条语句的时候</li><li>使用 &amp;&amp; 直接作为条件判断语句</li></ol><div class="language-js"><pre><code>obj<span class="token punctuation">.</span>list <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="八、with（了解）"><a class="header-anchor" href="#八、with（了解）" aria-hidden="true">#</a> 八、with（了解）</h2><p>定义with语句主要的目的是简化多次编写同一对象里面的属性；</p><div class="language-js"><pre><code><span class="token keyword">var</span> qs <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> hostName <span class="token operator">=</span> location<span class="token punctuation">.</span>hostname\n\n<span class="token comment">// 上面代码都包含了location, 使用with语句简化操作:</span>\n<span class="token keyword">with</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> qs <span class="token operator">=</span> search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">var</span> hostName <span class="token operator">=</span> hostname\n<span class="token punctuation">}</span>\n</code></pre></div><p>严格模式下不允许使用with，会报错，由于大量使用with语句会导致性能下降，建议使用with</p><h2 id="九、判断简便方法："><a class="header-anchor" href="#九、判断简便方法：" aria-hidden="true">#</a> 九、判断简便方法：</h2><ol><li></li><li><p>使用对象的方式</p></li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;info&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nobj<span class="token punctuation">[</span><span class="token string">&#39;info&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><ol start="3"><li>使用map</li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">&#39;info&#39;</span><span class="token punctuation">,</span> NameModal<span class="token punctuation">]</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\nComponentName <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;info&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">return</span> <span class="token operator">&lt;</span>ComponentName <span class="token operator">/</span><span class="token operator">&gt;</span>\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>流程控制：代码的执行的过程</p><ol><li><p>顺序结构：代码的执行顺序，从上到下，从左到右（不严谨）；</p></li><li><p>判断语句：if，if-else，if-else if，switch-case，三目运算符（三元表达式）；</p></li><li><p>循环语句：while循环，do-while，for循环，for-in循环；</p></li></ol><p>总结分支：如果只有一个分支，就用if；</p><p>如果有两个分支，就用if-else；</p><p>如果多个分支，一般是范围的，推荐使用if-else if；</p><p>如果多个分支，一般是具体的值，推荐使用switch-case；</p><p>总结循环：</p><p>while：先判断后循环，有可能一次循环都不执行；</p><p>do-while：至少执行一次循环体再判断；</p><p>for循环：知道了循环的次数，推荐使用for循环；</p><p>调试：是为了找代码的错误和问题所在，才在调试的</p><p>断点：不加断点，就不方便调试，</p>',97);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
