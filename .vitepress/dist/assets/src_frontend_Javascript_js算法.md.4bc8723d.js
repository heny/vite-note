import{o as n,c as s,d as a}from"./app.beda3532.js";const p='{"title":"js算法","description":"","frontmatter":{},"headers":[{"level":2,"title":"数组去重","slug":"数组去重"},{"level":2,"title":"数组乱序","slug":"数组乱序"},{"level":2,"title":"数组排序","slug":"数组排序"},{"level":2,"title":"对象拷贝方法","slug":"对象拷贝方法"},{"level":2,"title":"对象合并","slug":"对象合并"},{"level":2,"title":"扁平化数组","slug":"扁平化数组"}],"relativePath":"src/frontend/Javascript/js算法.md","lastUpdated":1615699077390}',t={},o=a('<h1 id="js算法"><a class="header-anchor" href="#js算法" aria-hidden="true">#</a> js算法</h1><h2 id="数组去重"><a class="header-anchor" href="#数组去重" aria-hidden="true">#</a> 数组去重</h2><ol><li>两个循环判断</li></ol><p>判断问题：拿第一个和每一个去做比较，所以需要用到两个循环；</p><p>（1）写两个循环，第一个循环数组第一个数据，第二个循环让每一个和第一个做比较。</p><p>（2）第二循环j=i+1，再判断第二个循环的下标是否和第一个循环的下标的字符相同，如果是相同的，则删除一个</p><p>（3）删除之后数组变短，让j减一，重新做比较。</p><div class="language-js"><pre><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n        <span class="token keyword">if</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> ary<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//如果k等于0，则需要这一步</span>\n                <span class="token keyword">continue</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            k<span class="token operator">--</span><span class="token punctuation">;</span> \n            <span class="token comment">//前面删除一个之后数组的长度会进1，此时的k会直接跳到循环去加1，让k减1；</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="2"><li>使用set去重</li></ol><div class="language-js"><pre><code>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><ol start="3"><li>使用reduce去重</li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>cur</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pre<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> pre\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><ol start="4"><li>使用filter去重；</li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">unique</span> <span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token comment">//利用filter过滤返回true的情况;</span>\n      <span class="token comment">// 判断字符串中有没有，如果有，则return;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>  \n    <span class="token keyword">return</span> str <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> item<span class="token punctuation">)</span>  <span class="token comment">// 如果没有，则存入，返回true;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="数组乱序"><a class="header-anchor" href="#数组乱序" aria-hidden="true">#</a> 数组乱序</h2><ol><li>原地洗牌，不需要声明额外的数组从而更加节约内存占用率，</li></ol><p>原理：依次遍历数组的元素，将当前元素和之后的所有元素中随机选取一个，进行交换</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 由于下标从0开始，length从1开始因此使用floor向下取整;</span>\n        <span class="token keyword">let</span> index<span class="token operator">=</span> i <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>； <span class="token comment">// 这里使用了es6的交换位置方法</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> arr\n<span class="token punctuation">}</span>   <span class="token comment">// 传入一个数组则乱序</span>\n</code></pre></div><ol start="2"><li>非原地洗牌</li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">sort2</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// arr的长度会越来越少; 实现随机生成的乱序;</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n    arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> arr2\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="3"><li>使用sort进行乱序</li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> <span class="token function-variable function">sort2</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="数组排序"><a class="header-anchor" href="#数组排序" aria-hidden="true">#</a> 数组排序</h2><ol><li>选择数组排序</li></ol><p>判断问题：拿第一个和每一个去做比较，如果大于第二个，则让第一个到第二个位置去；</p><p>（1）写两个循环，第二个循环j=i+1;，不比较本身。</p><p>（2）判断数组的第一个字符i是否大于数组的第二个j字符，如果大于第一个字符，则调换位置。</p><ol start="2"><li>冒泡数组排序</li></ol><div class="language-js"><pre><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;</span> ary<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//2k &gt; 1n 1n 2k</span>\n            <span class="token keyword">var</span> n<span class="token operator">=</span>ary<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            ary<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>ary<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            ary<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token comment">//自身和紧挨着的后一个比较;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="3"><li>sort()排序</li></ol><div class="language-js"><pre><code>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n从大到小<span class="token operator">==</span><span class="token operator">&gt;</span>  arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span>\n</code></pre></div><h2 id="对象拷贝方法"><a class="header-anchor" href="#对象拷贝方法" aria-hidden="true">#</a> 对象拷贝方法</h2><p>浅拷贝：...扩展运算符浅拷贝；</p><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token string">&#39;haha&#39;</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token punctuation">{</span>c<span class="token operator">:</span><span class="token string">&#39;haha&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">&#39;lalala&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">)</span>   <span class="token comment">// &#39;lalala&#39;</span>\n</code></pre></div><p>深拷贝：</p><ol><li>JSON方法</li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;zs&#39;</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\nobj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;ww&#39;</span>\n</code></pre></div><ol start="2"><li>jquery深拷贝</li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> obj2 <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj3<span class="token punctuation">)</span>\n</code></pre></div><ol start="3"><li>浅拷贝+递归</li></ol><div class="language-js"><pre><code><span class="token comment">// 第二个参数可传可不传;</span>\n<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">origin<span class="token punctuation">,</span>target<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> origin<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 不拷贝原型上的内容;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// 判断该值还是不是一个对象;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> origin<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment">// 判断一下类型,并进行拷贝;</span>\n                target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>origin<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n                <span class="token function">deepClone</span><span class="token punctuation">(</span>origin<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">,</span>target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> origin<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> target\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="对象合并"><a class="header-anchor" href="#对象合并" aria-hidden="true">#</a> 对象合并</h2><ol><li>jquery</li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> obj2 <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj1<span class="token punctuation">,</span>obj3<span class="token punctuation">,</span>obj4<span class="token punctuation">)</span>\n</code></pre></div><ol start="2"><li>vue中</li></ol><div class="language-js"><pre><code>vm<span class="token punctuation">.</span>userPro <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span>\n</code></pre></div><h2 id="扁平化数组"><a class="header-anchor" href="#扁平化数组" aria-hidden="true">#</a> 扁平化数组</h2><ol><li><code>reduce</code></li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">fn</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">:</span>c<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [1,2,3,4,5,6]</span>\n</code></pre></div><ol start="2"><li><code>toString</code>和<code>split</code>方法，仅对数字有效</li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre></div><ol start="3"><li>使用递归遍历</li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 将调用的结果合并</span>\n        <span class="token punctuation">}</span>\n        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> res\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="4"><li><code>flat</code>() 括号里面传入数字，表示扁平化几个，当传入Infinity时，会扁平所有的数组；</li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\narr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span>\n</code></pre></div><ol start="5"><li>使用...扩展运算符，最实用的一个方法</li></ol><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">{</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n</code></pre></div>',57);t.render=function(a,p,t,c,e,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
