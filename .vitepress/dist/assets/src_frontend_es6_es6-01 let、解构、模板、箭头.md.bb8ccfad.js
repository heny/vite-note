import{o as n,c as s,d as a}from"./app.bd8718b4.js";const p='{"title":"es6-01 let、解构、模板、箭头","description":"","frontmatter":{},"headers":[{"level":2,"title":"es6大纲","slug":"es6大纲"},{"level":2,"title":"一、严格模式：","slug":"一、严格模式："},{"level":2,"title":"二、json对象","slug":"二、json对象"},{"level":3,"title":"json基本语法","slug":"json基本语法"},{"level":3,"title":"JSON对象方法","slug":"json对象方法"},{"level":3,"title":"JSON.stringify的特性","slug":"json-stringify的特性"},{"level":3,"title":"JSON.stringify的参数","slug":"json-stringify的参数"},{"level":2,"title":"三、Object扩展","slug":"三、object扩展"},{"level":3,"title":"defineProperty","slug":"defineproperty"},{"level":3,"title":"defineProperties","slug":"defineproperties"},{"level":3,"title":"create","slug":"create"},{"level":3,"title":"getOwnPropertyDescriptor","slug":"getownpropertydescriptor"},{"level":3,"title":"getOwnPropertyDescriptors","slug":"getownpropertydescriptors"},{"level":2,"title":"四、es6简述","slug":"四、es6简述"},{"level":2,"title":"五、let和const","slug":"五、let和const"},{"level":3,"title":"let声明变量，区别","slug":"let声明变量，区别"},{"level":3,"title":"const 声明常量","slug":"const-声明常量"},{"level":2,"title":"六、解构赋值","slug":"六、解构赋值"},{"level":3,"title":"数组解构","slug":"数组解构"},{"level":3,"title":"对象解构赋值","slug":"对象解构赋值"},{"level":3,"title":"函数的使用","slug":"函数的使用"},{"level":2,"title":"七、模板字符串","slug":"七、模板字符串"},{"level":2,"title":"八、对象的简写","slug":"八、对象的简写"},{"level":3,"title":"对象的简写形式","slug":"对象的简写形式"},{"level":3,"title":"对象函数的简写","slug":"对象函数的简写"},{"level":3,"title":"对象访问super","slug":"对象访问super"},{"level":3,"title":"对象使用get和set","slug":"对象使用get和set"},{"level":3,"title":"对象属性的遍历","slug":"对象属性的遍历"},{"level":2,"title":"九、箭头函数","slug":"九、箭头函数"},{"level":3,"title":"函数默认值","slug":"函数默认值"},{"level":3,"title":"箭头函数和普通函数的区别","slug":"箭头函数和普通函数的区别"},{"level":2,"title":"十、this指向","slug":"十、this指向"}],"relativePath":"src\\\\frontend\\\\es6\\\\es6-01 let、解构、模板、箭头.md","lastUpdated":1615699077435}',t={},o=a('<h1 id="es6-01-let、解构、模板、箭头"><a class="header-anchor" href="#es6-01-let、解构、模板、箭头" aria-hidden="true">#</a> es6-01 let、解构、模板、箭头</h1><h2 id="es6大纲"><a class="header-anchor" href="#es6大纲" aria-hidden="true">#</a> es6大纲</h2><p><img src="https://notecdn.heny.vip/images/image-20200602224917632.png" alt="image-20200602224917632"></p><h2 id="一、严格模式："><a class="header-anchor" href="#一、严格模式：" aria-hidden="true">#</a> 一、严格模式：</h2><ol><li><p>开启严格模式：&#39;use strict&#39;</p></li><li><p>开启严格模式的作用：</p><ul><li>变量必须先声明才能使用</li><li>禁止自定义的函数中的this指向window</li><li>创建eval作用域</li></ul></li></ol><p><code>eval</code>：将字符串的表达式进行运算；</p><p>严格模式下的eval声明的变量，只能在该字符串里面使用，外面不能使用；</p><p><code>xml</code>：可扩展标记语言，标记的标签自定义，必须成对，最外层必须根标签；</p><p>​ 需要设置xml头部：<code>&lt;? xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39; ?&gt;</code></p><p><code>html</code>：标记的标签是预定义的；</p><h2 id="二、json对象"><a class="header-anchor" href="#二、json对象" aria-hidden="true">#</a> 二、json对象</h2><blockquote><p>JSON(JavaScript Object Notation, JS 对象节点)，主要用来在不同语言之间交换数据</p></blockquote><h3 id="json基本语法"><a class="header-anchor" href="#json基本语法" aria-hidden="true">#</a> json基本语法</h3><p>json只有两种数据格式：json对象 、json对象数组</p><ul><li>属性名必须用双引号，属性值如果不是数字，则必须用引号；</li><li>属性值可以是字符串、数字、布尔型、数组、对象，但不能是函数或dom对象</li><li>属性名与属性值用冒号:分隔，不同的属性名与属性值之间用逗号分隔</li></ul><h3 id="json对象方法"><a class="header-anchor" href="#json对象方法" aria-hidden="true">#</a> JSON对象方法</h3><ul><li><code>JSON.parse():</code>将普通的json字符串转换成json对象</li><li><code>JSON.stringify():</code>将json对象转换成json字符串</li><li></li></ul><h3 id="json-stringify的特性"><a class="header-anchor" href="#json-stringify的特性" aria-hidden="true">#</a> JSON.stringify的特性</h3><ol><li><p>对于 undefined、任意的函数以及 symbol 三个特殊的值分别作为对象属性的值、数组元素、单独的值时的不同返回结果。</p><ul><li><p>undefined、任意的函数以及 symbol 作为对象属性值时 JSON.stringify() 跳过（忽略）对它们进行序列化</p></li><li><p>undefined、任意的函数以及 symbol 作为数组元素值时，JSON.stringify() 将会将它们序列化为 null</p></li><li><p>undefined、任意的函数以及 symbol 被 JSON.stringify() 作为单独的值进行序列化时都会返回 undefined</p></li></ul></li><li><p>非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。</p></li><li><p>转换值如果有 toJSON() 函数，该函数返回什么值，序列化结果就是什么值，并且忽略其他属性的值。</p></li><li><p>JSON.stringify() 将会正常序列化 Date 的值。</p></li><li><p>NaN 和 Infinity 格式的数值及 null 都会被当做 null。</p></li><li><p>布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。</p></li><li><p>其他类型的对象，包括 Map/Set/WeakMap/WeakSet，仅会序列化可枚举的属性。</p></li><li><p>对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。</p></li><li><p>所有以 symbol 为属性键的属性都会被完全忽略掉，即便 replacer 参数中强制指定包含了它们。</p></li></ol><h3 id="json-stringify的参数"><a class="header-anchor" href="#json-stringify的参数" aria-hidden="true">#</a> JSON.stringify的参数</h3><ol><li><p>第二个参数</p><ul><li>作为函数时，它有两个参数，键（key）和值（value），函数类似就是数组方法 map、filter 等方法的回调函数，对每一个属性值都会执行一次该函数（期间我们还简单实现过一个 map 函数）。</li><li>如果 replacer 是一个数组，数组的值代表将被序列化成 JSON 字符串的属性名。</li></ul></li><li><p>第三个参数</p><ul><li>如果是一个数字, 则在字符串化时每一级别会比上一级别缩进多这个数字值的空格（最多10个空格）；</li><li>如果是一个字符串，则每一级别会比上一级别多缩进该字符串（或该字符串的前10个字符）。</li></ul></li></ol><p>利用第二个参数排序对象属性</p><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;hhh&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="三、object扩展"><a class="header-anchor" href="#三、object扩展" aria-hidden="true">#</a> 三、Object扩展</h2><h3 id="defineproperty"><a class="header-anchor" href="#defineproperty" aria-hidden="true">#</a> defineProperty</h3><blockquote><p>修改或添加一个属性；并返回这个对象，如果不指定参数，则默认为false，</p></blockquote><p><code>Object.defineProperty(obj,attr,descriptor)；</code></p><ul><li><p><code>obj</code>: 需要被操作的目标对象</p></li><li><p><code>attr</code>: 需要被操作或设置的属性名，有则修改，没有则添加；</p></li><li><p><code>descriptor</code>: 将被定义或修改的属性的描述，是一个对象；</p><p>descriptor可设定的选项：（可以设定的属性默认都为true;）</p><ul><li><code>value</code>：值；</li><li><code>writable</code>：属性值是否可以修改；</li><li><code>configurable</code>：属性值是否可以被删除；</li><li><code>enumerable</code>：是否可以枚举，通过for-in等方法遍历；</li><li><code>get</code> ：函数必须返回，返回设定的值；</li><li><code>set</code> ：当修改当前值时，触发set函数；set的第一个参数是设置的值；</li></ul></li></ul><p>数据劫持：调用set之后，get的值不会修改，而是将设置的值放到set的第一个参数里面；</p><p>get和set是一个函数，如果有了get和set就不能有value和writable了；</p><div class="language-js"><pre><code>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n    configurable<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>\n    enumerable<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="defineproperties"><a class="header-anchor" href="#defineproperties" aria-hidden="true">#</a> defineProperties</h3><blockquote><p>添加或修改多个新属性，并返回该对象；</p></blockquote><p><code>Object.defineProperties(obj, props)；</code></p><ul><li><p><code>obj</code>：需要添加或修改属性的对象；</p></li><li><p><code>props</code>：一个对象，添加或修改的配置，如果写原有的属性名就是修改；</p></li></ul><p>如果需要修改现有的，就不能使用get和set属性；</p><h3 id="create"><a class="header-anchor" href="#create" aria-hidden="true">#</a> create</h3><blockquote><p>使用一个新对象继承现有的对象的原型并添加自己的属性，可以使用现有对象的属性</p></blockquote><p><code>Object.create(prototype, [descriptors])</code></p><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">//obj2返回一个空对象,但可以使用obj的属性;</span>\n\nobject<span class="token punctuation">.</span>create相当于：\n<span class="token keyword">function</span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>创建一个新的对象，带着指定原型对象的属性，也可以说是继承了另一个对象，</p><p>descriptors可选参数，添加新的方法，可以指定属性是否可以修改删除和遍历；</p><div class="language-js"><pre><code>obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">{</span>\n    sex<span class="token operator">:</span><span class="token punctuation">{</span>value<span class="token operator">:</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>注意：创建的对象都在obj2的原型上，返回还是一个空对象，但可以访问；</p><ol><li>getter和setter可以不同时使用,但在严格模式下只其中一个,会抛出错误</li><li>数据描述符与存取描述符不可混用,会抛出错误</li></ol><h3 id="getownpropertydescriptor"><a class="header-anchor" href="#getownpropertydescriptor" aria-hidden="true">#</a> getOwnPropertyDescriptor</h3><blockquote><p>返回指定对象上一个自有属性对应的属性值描述符</p></blockquote><p><code>Object.getOwnPropertyDescriptor(obj, prop)</code>（一个）</p><ul><li><p>obj是一个对象，</p></li><li><p>prop属性名称；</p></li></ul><h3 id="getownpropertydescriptors"><a class="header-anchor" href="#getownpropertydescriptors" aria-hidden="true">#</a> getOwnPropertyDescriptors</h3><p><code>Object.getOwnPropertyDescriptors(obj)</code>（所有）</p><p>返回指定对象所有的属性描述符；返回一个对象：{name: {…}, age: {…}, funll: {…}}</p><h2 id="四、es6简述"><a class="header-anchor" href="#四、es6简述" aria-hidden="true">#</a> 四、es6简述</h2><ol><li><p>ECMAscript 与 Javascript的关系：</p><p>ECMAscript是规范，而Javascript是规范的具体实现，两者不能相提并论。</p></li><li><p>ECMA的几个重要版本：</p><p>ECMA这个组织在2015年之前，使用的都是ECMAscript 5这个版本；</p><p>ECMA在2015年6月份正式颁布ES6，而之后的版本变化不大，以后每年6月份颁布新</p><p>版本(这个组织提的一些新规定)；</p><p>ECMA在2016年颁布的版本称之ES7</p></li></ol><h2 id="五、let和const"><a class="header-anchor" href="#五、let和const" aria-hidden="true">#</a> 五、let和const</h2><blockquote><p>使用var声明，也可以不使用var直接声明，var声明的能够变量提升</p></blockquote><h3 id="let声明变量，区别"><a class="header-anchor" href="#let声明变量，区别" aria-hidden="true">#</a> let声明变量，区别</h3><ol><li>没有变量提升,报错referenceError；</li><li>必须先声明后使用</li><li>只能声明一次，重复声明会报错；</li><li>块级作用域。</li></ol><p>在<code>{}</code>里面声明的<code>let</code>，在外面拿不到值，会报错；</p><p>常用于for循环，i只在for循环里面能拿到，不会泄漏；</p><p>用法：在使用循环时，事件里面也能拿到外面的i了；</p><p>不考虑IE的情况下，或者在我们的Node或者使用前端框架去写东西，就不要用var了</p><h3 id="const-声明常量"><a class="header-anchor" href="#const-声明常量" aria-hidden="true">#</a> const 声明常量</h3><ol><li><p>const声明必须赋初始值，let不需要；</p></li><li><p>声明之后不能修改值， 其它和let特性是一样的</p></li><li><p>常量名一般都使用大写</p></li><li><p>同一个常量只能声明一次，多次报错；</p></li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  tmp <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>\n  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>如果函数形参再使用let声明，则会报错；<code>has already been declared</code>；</p><h2 id="六、解构赋值"><a class="header-anchor" href="#六、解构赋值" aria-hidden="true">#</a> 六、解构赋值</h2><h3 id="数组解构"><a class="header-anchor" href="#数组解构" aria-hidden="true">#</a> 数组解构</h3><div class="language-js"><pre><code><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>   <span class="token comment">// 完全解构</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token comment">// 不完全解构</span>\n</code></pre></div><p>当少了变量或者少了值，就是不完全解构，没有的是<code>undefined</code>；</p><div class="language-js"><pre><code><span class="token comment">// 变量交换</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span>\n<span class="token comment">// a 2</span>\n<span class="token comment">// b 1</span>\n</code></pre></div><h3 id="对象解构赋值"><a class="header-anchor" href="#对象解构赋值" aria-hidden="true">#</a> 对象解构赋值</h3><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;zs&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span>\n<span class="token comment">// 完全解构</span>\n<span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span> <span class="token operator">=</span> obj\n<span class="token comment">// 实际上是：{name: name, age: age}</span>\n\n<span class="token comment">// 默认赋值</span>\n<span class="token keyword">let</span> <span class="token punctuation">{</span>name <span class="token operator">=</span> <span class="token string">&#39;未定义&#39;</span><span class="token punctuation">}</span> <span class="token operator">=</span> obj\n\n<span class="token comment">// 解构并重命名 下面例子将component重命名了</span>\n<span class="token keyword">let</span> <span class="token punctuation">{</span>component<span class="token operator">:</span> Component<span class="token punctuation">}</span> <span class="token operator">=</span> obj\n</code></pre></div><p><strong>注意：</strong> 解构对象时，键名必须一 一对应，当变量名不一样时，为undefined;</p><p>如果填写的键名没有，可以赋默认值，以等号赋值，如果对象有的话赋的默认值不起作用；</p><h3 id="函数的使用"><a class="header-anchor" href="#函数的使用" aria-hidden="true">#</a> 函数的使用</h3><ol><li><p>函数传参时，如果是一个对象可以<code>function fn({name,age})</code>；</p><p>解构函数时，可以直接将形参写成对象解构来接收；</p></li><li><p>传参解构方式</p><ul><li><p>重新命名法</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>component<span class="token operator">:</span>Component<span class="token punctuation">}</span></span><span class="token punctuation">)</span>   <span class="token comment">// 因为component是保留字,所以需要重新改名</span>\n</code></pre></div></li><li><p>默认赋值</p><div class="language-js"><pre><code> <span class="token comment">// 默认赋值</span>\n <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;hhh&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// name is not defined</span>\n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token comment">// {name: &#39;hhh&#39;}</span>\n <span class="token punctuation">}</span>\n\n <span class="token comment">// 默认赋值并解构</span>\n <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">&#39;未定义&#39;</span><span class="token punctuation">}</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// 未定义</span>\n <span class="token punctuation">}</span>\n</code></pre></div></li></ul></li></ol><h2 id="七、模板字符串"><a class="header-anchor" href="#七、模板字符串" aria-hidden="true">#</a> 七、模板字符串</h2><blockquote><p>如果只是单纯的声明字符串和单引号、双引号一样的。并且模板字符串里面可以解析变量和运行一些表达式。 模板字符串思想来源于后端</p></blockquote><ol><li>模板字符串使用``；</li><li>变化的部分使用<code>${xxx}</code>定义，可以写函数以及运算表达式；</li><li>模板字符串可以换行不报错；</li></ol><h2 id="八、对象的简写"><a class="header-anchor" href="#八、对象的简写" aria-hidden="true">#</a> 八、对象的简写</h2><h3 id="对象的简写形式"><a class="header-anchor" href="#对象的简写形式" aria-hidden="true">#</a> 对象的简写形式</h3><p>如果属性值是变量的，对象里面直接写变量名就可以了；</p><div class="language-js"><pre><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;hny&#39;</span>\n<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span>\n<span class="token comment">// 等于</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> name<span class="token punctuation">,</span> age<span class="token operator">:</span> age<span class="token punctuation">}</span>\n</code></pre></div><h3 id="对象函数的简写"><a class="header-anchor" href="#对象函数的简写" aria-hidden="true">#</a> 对象函数的简写</h3><p>直接写<code>函数名(){}</code>，去掉冒号和function，一般用在表单里面需要给后台传数据时使用；</p><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;hh&#39;</span><span class="token punctuation">,</span>\n    <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="对象访问super"><a class="header-anchor" href="#对象访问super" aria-hidden="true">#</a> 对象访问super</h3><p>对象里面可以直接访问super原型，super后面必须跟属性，super关键字为原型对象，只能用在对象的方法之中，<strong>只有对象的简写方法才能使用</strong>，才能让JavaScript引擎确认</p><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;hhh&#39;</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> fired <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">/*getName:function(){\n        return super.name // 语法错误\n    }*/</span>\n    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>name\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nObject<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>fired<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fired<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#39;hhh&#39;</span>\n\n<span class="token keyword">super</span><span class="token punctuation">.</span>name\n等同于：\nObject<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foo\n<span class="token comment">// or</span>\nObject<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="对象使用get和set"><a class="header-anchor" href="#对象使用get和set" aria-hidden="true">#</a> 对象使用get和set</h3><div class="language-js"><pre><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    _wheels<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    <span class="token keyword">get</span> <span class="token function">wheels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_wheels\n    <span class="token punctuation">}</span>\n    <span class="token keyword">set</span> <span class="token function">wheels</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_wheels<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;数值太小了&#39;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_wheels <span class="token operator">=</span> value\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="对象属性的遍历"><a class="header-anchor" href="#对象属性的遍历" aria-hidden="true">#</a> 对象属性的遍历</h3><ol><li><p><code>for...in</code> for..in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性），如果不需要遍历继承的属性，可以加入判断</p><div class="language-js"><pre><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 在里面写的内容不包含继承的</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p><code>for...of</code></p><p>使用es6的数组解构，可以使用进行遍历</p><div class="language-js"><pre><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p><code>Object.keys(obj)</code></p><p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性的键名）</p></li><li><p><code>Object.getOwnPropertyNames(obj)</code></p><p>返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）的键名</p></li><li><p><code>Object.getOwnPropertySymbols(obj)</code></p><p>返回一个数组，包含对象自身的所有Symbol属性的键名</p></li><li><p><code>Reflect.ownKeys(obj)</code></p><p>返回一个数组，包含对象自身的所有键名，不管键名是Symbol或字符串，也不管是否可枚举</p></li></ol><p>以上遍历对象键名，都遵守同样的属性遍历的次序规则：</p><ul><li>首先遍历所有的数值键，按照数值升序排列</li><li>其次遍历所有的字符串键，按照加入时间升序排列</li><li>最后遍历所有Symbol键，按照加入时间升序排列</li></ul><div class="language-js"><pre><code>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// [&#39;2&#39;,&#39;10&#39;,&#39;b&#39;,&#39;a&#39;,Symbol()]</span>\n</code></pre></div><h2 id="九、箭头函数"><a class="header-anchor" href="#九、箭头函数" aria-hidden="true">#</a> 九、箭头函数</h2><p>匿名函数使用的；</p><ol><li><p>箭头函数要先定义后调用，调用时不能放到箭头函数的前面；</p><p><code>fn = () =&gt;{console.log(1)}</code></p></li><li><p>箭头函数不能new实例化，会报错：fn is not constractor;</p></li><li><p>箭头函数中的形参只有一个时，不需要小括号；</p><p><code>fn=x=&gt;{console.log(x)}；</code></p></li><li><p>箭头函数体只有一句代码时，可以不写{}，但要注意这一句代码的结果会作为返回值返回出去,</p><p><code>fn = x =&gt; x</code>; 默认被使用return返回；需要console.log打印；</p></li><li><p>如果箭头函数体有多条语句，则要写<code>{}</code>，若有返回值时，则要使用return 明确返回出去</p></li><li><p>箭头函数的this指向外层函数；</p></li></ol><h3 id="函数默认值"><a class="header-anchor" href="#函数默认值" aria-hidden="true">#</a> 函数默认值</h3><p>es6提供了函数默认值的设置语法；</p><p>设置参数默认值，可以直接在传参时，后面写上等于；</p><p><code>function fn(x,y,c=10){}</code></p><h3 id="箭头函数和普通函数的区别"><a class="header-anchor" href="#箭头函数和普通函数的区别" aria-hidden="true">#</a> 箭头函数和普通函数的区别</h3><p>箭头函数没有arguments、this指向的问题</p><h2 id="十、this指向"><a class="header-anchor" href="#十、this指向" aria-hidden="true">#</a> 十、this指向</h2><p>普通函数内部的this分两种情况，严格模式和非严格模式；</p><p>非严格模式下，this默认指向全局对象window；</p><p>而严格模式下，this为undefined；</p><p>对象中的this：</p><p>对象内部方法的this指向调用这些方法的对象；</p><ol><li>函数的定义位置不影响其this指向，this指向只和调用函数的对象有关；</li><li>多层嵌套的对象，内部方法的this指向离被调用函数最近的对象（window也是对象，其内部对象调用方法的this指向内部对象，而非window）；</li></ol><div class="language-js"><pre><code><span class="token comment">//1</span>\n<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>\n    prop<span class="token operator">:</span> <span class="token number">37</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">f</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prop<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> o<span class="token punctuation">.</span>f<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> prop<span class="token operator">:</span> <span class="token number">37</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">independent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prop<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\no<span class="token punctuation">.</span>f <span class="token operator">=</span> independent<span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//2</span>\no<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">{</span>\n    g<span class="token operator">:</span> independent<span class="token punctuation">,</span>\n    prop<span class="token operator">:</span> <span class="token number">42</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>原型链中this</p><p>原型链中的方法的this仍然指向调用它的对象；</p><p>构造函数中的this</p><p>构造函数中的this与被创建的新对象绑定</p><p>注意：当构造器返回的默认值是一个this引用的对象时，可以手动设置返回其他的对象；如果值不是一个对象，返回this；</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token constant">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">38</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs 38</span>\n</code></pre></div><p>call和apply</p><p>当函数通过function对象中继承的方法call()和apply()方法调用时，this指向修改的地方；</p><p>bind方法</p><p>bind方法在es5引入，</p><p>dom事件处理函数中的this</p><p>当函数被当做监听事件处理函数时，this指向触发该事件的元素（针对于addEventListener）；</p><p>内联事件：</p><ol><li><p>当代码被内联处理函数调用时，它的this指向监听器所在的dom元素；</p></li><li><p>当代码被包括在函数内部的执行时，其this指向等同于函数直接被调用；</p></li></ol><p>定时器的this</p><p>对于延时函数内部的回调函数的this指向全局对象window（当然我们可以通过bind方法改变其内部函数的this指向）</p><div class="language-js"><pre><code><span class="token comment">//通过bind绑定;</span>\n<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbind返回的是一个函数，需要被调用的，bind可以直接在花括号后面进行点；\n<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3秒后返回构造函数新生成的对象 Person{...}</span>\n</code></pre></div><p>箭头函数中的this</p><p>由于箭头函数不绑定this，它会捕获其所在（定义的位置） 上下文的this值，作为自己的this值；</p><ol><li>所以call()/apply()/bind()/方法对于箭头函数来说只是传入参数，对它的this毫无影响；</li><li>考虑到this是词层面上的，严格模式中与this相关的规则都将被忽略；（可以忽略是否在严格模式下的影响）；</li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Stud</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1,因为箭头函数会捕获其所在上下文的this值作为自己的this值;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">new</span> <span class="token class-name">Stud</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',135);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
