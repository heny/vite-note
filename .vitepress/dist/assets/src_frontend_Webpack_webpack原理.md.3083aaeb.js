import{o as n,c as s,d as a}from"./app.beda3532.js";const p='{"title":"Webpack原理","description":"","frontmatter":{},"headers":[{"level":2,"title":"作用：","slug":"作用："},{"level":2,"title":"打包原理：","slug":"打包原理："},{"level":2,"title":"配置webpack","slug":"配置webpack"},{"level":2,"title":"webpack运行流程","slug":"webpack运行流程"}],"relativePath":"src/frontend/Webpack/webpack原理.md","lastUpdated":1615699077435}',t={},e=a('<h1 id="webpack原理"><a class="header-anchor" href="#webpack原理" aria-hidden="true">#</a> Webpack原理</h1><h2 id="作用："><a class="header-anchor" href="#作用：" aria-hidden="true">#</a> 作用：</h2><p>（1）打包：可以把多个JavaScript文件打包成一个文件，减少服务器压力和下载宽带；</p><p>（2）转换：把扩展语言转换成普通的JavaScript语言，让浏览器识别更顺利运行；</p><p>（3）优化：前端变的越来越复杂后，性能也会遇到各种问题，webpack肩负起优化和提升的责任；</p><h2 id="打包原理："><a class="header-anchor" href="#打包原理：" aria-hidden="true">#</a> 打包原理：</h2><p>识别入口文件，分析代码，获取模块依赖，并且将代码打包为浏览器可以识别的代码；</p><p>递归地构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将所有模块打包成一个多个bundle；</p><h2 id="配置webpack"><a class="header-anchor" href="#配置webpack" aria-hidden="true">#</a> 配置webpack</h2><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 配置打包选项  development开发环境</span>\n    mode<span class="token operator">:</span> <span class="token string">&#39;dev&#39;</span><span class="token punctuation">,</span>   <span class="token comment">// production 生产环境</span>\n    <span class="token comment">// 指定入口文件：要打包的文件</span>\n    entry<span class="token operator">:</span> <span class="token string">&#39;./src/js/index.js&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// 指定输出文件：打包之后的文件</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span>\n        path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        filename<span class="token operator">:</span> <span class="token string">&#39;main.min.js&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 配置资源的加载器 loader</span>\n    module<span class="token operator">:</span> <span class="token punctuation">{</span>\n        rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token comment">// 配置js的加载器（把ES6转化为ES3/5代码）</span>\n        <span class="token punctuation">{</span>\n            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.jsx?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n            loader<span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>\n            <span class="token comment">//打包除这个文件之外的文件</span>\n            exclude<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./node_modules&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token comment">//打包包括的文件</span>\n            include<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src&#39;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">// 配置css的加载器</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">// 匹配.css结尾的文件</span>\n            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n            <span class="token comment">// 配置css文件的加载器,处理顺序：从右向左</span>\n            use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">// 配置less的加载器</span>\n        <span class="token punctuation">{</span>\n            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n            use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;less-loader&#39;</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 配置插件</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token comment">// 动态生成html</span>\n        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            title<span class="token operator">:</span> <span class="token string">&#39;测试标题&#39;</span><span class="token punctuation">,</span>\n            template<span class="token operator">:</span> <span class="token string">&#39;index.html&#39;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token comment">// 配置实时预览环境</span>\n    devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n        contentBase<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        port<span class="token operator">:</span> <span class="token number">5000</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>mode</code> 配置环境是开发环境还是生产环境</p><p><code>entry</code> 指定入口文件</p><p><code>output</code> 指定输出文件</p><p><code>module</code> 模块</p><p><code>rules</code> 配置js的加载器</p><p><code>loader</code> 模块转换器</p><p><code>plugins</code> 扩展插件</p><h2 id="webpack运行流程"><a class="header-anchor" href="#webpack运行流程" aria-hidden="true">#</a> webpack运行流程</h2><ol><li>初始化参数</li><li>开始编译</li><li>确定入口</li><li>编译模块</li><li>完成模块编译</li><li>输出资源</li><li>输出完成</li></ol>',19);t.render=function(a,p,t,o,c,l){return n(),s("div",null,[e])};export default t;export{p as __pageData};
