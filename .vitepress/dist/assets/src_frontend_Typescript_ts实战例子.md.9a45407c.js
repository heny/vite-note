import{o as n,c as s,d as a}from"./app.246f1876.js";const p='{"title":"ts实践例子","description":"","frontmatter":{},"headers":[{"level":2,"title":"封装自己的map函数","slug":"封装自己的map函数"},{"level":2,"title":"为第三方库填写声明文件","slug":"为第三方库填写声明文件"},{"level":3,"title":"查找是否需要编写声明文件","slug":"查找是否需要编写声明文件"},{"level":3,"title":"编写声明文件","slug":"编写声明文件"},{"level":2,"title":"node使用ts开发","slug":"node使用ts开发"}],"relativePath":"src/frontend/Typescript/ts实战例子.md","lastUpdated":1618029470017}',t={},o=a('<h1 id="ts实践例子"><a class="header-anchor" href="#ts实践例子" aria-hidden="true">#</a> ts实践例子</h1><h2 id="封装自己的map函数"><a class="header-anchor" href="#封装自己的map函数" aria-hidden="true">#</a> 封装自己的map函数</h2><p>原代码</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">arrayMap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>\n    <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length\n    <span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> arr2\n<span class="token punctuation">}</span>\n</code></pre></div><p>错误案例</p><div class="language-ts"><pre><code><span class="token keyword">const</span> arrMap <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> index<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> arr<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> i<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length\n  <span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len <span class="token punctuation">)</span><span class="token punctuation">{</span>\n    arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    i<span class="token operator">++</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> arr2\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用</span>\n<span class="token function">arrMap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> item<span class="token operator">++</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 数字没有length属性，但是由于any并不报错；</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>正确示例</p><div class="language-ts"><pre><code><span class="token comment">// 首先传入的第一个泛型变量T</span>\n<span class="token comment">// 第一个参数为T构成的数组</span>\n<span class="token comment">// callback的第一个参数为T, 第二个和第三个参数都为可选的，第三个参数应该是只读的，callback返回的类型应该和整个函数返回的类型是有关联的，因此使用第二个泛型变量</span>\n<span class="token keyword">const</span> arrayMap <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> index<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> array<span class="token operator">?</span><span class="token operator">:</span> Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="为第三方库填写声明文件"><a class="header-anchor" href="#为第三方库填写声明文件" aria-hidden="true">#</a> 为第三方库填写声明文件</h2><p>如果安装了库，没有填写声明文件，是没有类型提示的；</p><h3 id="查找是否需要编写声明文件"><a class="header-anchor" href="#查找是否需要编写声明文件" aria-hidden="true">#</a> 查找是否需要编写声明文件</h3><ol><li>首先查找<code>node_modules</code>下面安装的模块的根目录，有没有<code>.d.ts</code>文件，如果有则不需要写声明文件了；</li><li>查找社区有没有为该库安装声明文件 <ol><li>使用<code>npm install @types/库名 -D</code> 如果安装成功，查找<code>node_modules</code>文件夹下面的<code>@types</code>文件夹下，安装的模块文件夹</li><li>如果安装报错，说明没有社区编写声明文件；</li><li>如果模块文件夹为空，说明没有声明文件；</li></ol></li></ol><h3 id="编写声明文件"><a class="header-anchor" href="#编写声明文件" aria-hidden="true">#</a> 编写声明文件</h3><ol><li><p>到<code>tsconfig.json</code>文件夹下面，打开以下选项</p><div class="language-json"><pre><code><span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span>\n<span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./node_modules/@types&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./typings/*&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 上面填写的paths代表首先到node_modules下面的@types查找，如果没有就查找本地typings文件夹</span>\n</code></pre></div></li><li><p>编写声明文件</p><ol><li><p>首先填写同名模块的文件夹，再在文件夹下面填写<code>index.d.ts</code>文件；</p><div class="language-ts"><pre><code><span class="token comment">// 编写声明文件</span>\n<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">indexof</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">any</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token operator">=</span> indexof\n</code></pre></div></li></ol></li></ol><h2 id="node使用ts开发"><a class="header-anchor" href="#node使用ts开发" aria-hidden="true">#</a> node使用ts开发</h2><ol><li><p>全局安装express：<code>npm i express-generator -g</code></p></li><li><p>运行<code>express --view=jade server-side</code>创建一个项目, 最后为项目名</p></li><li><p>创建相关文件夹</p><div class="language-bash"><pre><code>config <span class="token comment"># 放置全局</span>\ncontroller <span class="token comment"># 放置控制器</span>\nmodel <span class="token comment"># 连接数据库</span>\nutils <span class="token comment"># 放置工具函数</span>\ntypes <span class="token comment"># 放置ts的声明文件</span>\n</code></pre></div></li><li><p>使用<code>npm install</code>安装依赖</p></li><li><p>安装typescript：<code>npm i typescript</code></p></li><li><p>安装typescript的声明文件：<code>npm i @types/express @types/node -D</code></p></li><li><p>修改文件：</p><ol><li>bin目录下面www移动到项目根目录，并修改为<code>server.ts</code>文件，并修改server.ts文件里面引入app的路径为<code>./</code>；</li><li>将app.js修改为<code>app.ts</code></li><li>将routes文件夹下面的js修改为ts文件</li></ol></li><li><p>使用<code>tsc --init</code>生成<code>tsconfig.json</code>文件</p></li><li><p>修改tsconfig.json文件，下面有的都打开：</p><div class="language-json"><pre><code><span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">,</span>\n<span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>\n<span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span>\n<span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules/*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./types/*&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n</code></pre></div></li><li><p>由于public和views下面的静态文件不会被build，需要手动处理一下，在项目根目录创建<code>handle-public.js</code>文件，用来处理打包：</p><ol><li><p>安装shelljs：<code>npm i shelljs</code></p></li><li><p>输入以下代码：</p><div class="language-js"><pre><code><span class="token keyword">const</span> shell <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;shelljs&#39;</span><span class="token punctuation">)</span>\nshell<span class="token punctuation">.</span><span class="token function">cp</span><span class="token punctuation">(</span><span class="token string">&#39;-R&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./views/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./dist/&#39;</span><span class="token punctuation">)</span>\nshell<span class="token punctuation">.</span><span class="token function">cp</span><span class="token punctuation">(</span><span class="token string">&#39;-R&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./public/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./dist/&#39;</span><span class="token punctuation">)</span>\n</code></pre></div></li></ol></li><li><p>安装cross-env传递环境：<code>npm i cross-env</code> ，js中使用<code>process.<wbr>env.NODE_ENV</code>取值;</p></li><li><p>安装nodemon用来热更新：<code>npm i nodemon -D</code></p></li><li><p>由于nodemon仅支持js文件，再安装ts-node支持热更新ts文件：<code>npm i ts-node -D</code></p></li><li><p>修改package.json</p><div class="language-json"><pre><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run serve&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node ./dist/server.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsc &amp;&amp; node handle-public.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;watch-dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=development nodemon -e ts,tsx --exec &#39;ts-node&#39; ./server.ts&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>watch-dev：</p><ul><li><code>-e</code>：表示指定热更新后缀文件</li><li><code>exec</code>：执行后面的文件</li></ul><p>之后使用watch-dev启动项目即可；</p></li><li><p>编译之后可以将dist文件夹放置到服务器上面即可；</p></li></ol>',16);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
