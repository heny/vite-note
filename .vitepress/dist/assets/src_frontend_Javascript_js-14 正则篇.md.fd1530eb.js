import{o as s,c as n,d as a}from"./app.5dd0cd0b.js";const e='{"title":"js-14 正则篇","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、正则RegExp","slug":"一、正则regexp"},{"level":2,"title":"二、创建规则","slug":"二、创建规则"},{"level":2,"title":"三、正常检测方法","slug":"三、正常检测方法"},{"level":2,"title":"四、修饰符","slug":"四、修饰符"},{"level":2,"title":"五、正则中的元字符","slug":"五、正则中的元字符"},{"level":2,"title":"六、正则中的小括号","slug":"六、正则中的小括号"},{"level":3,"title":"具名组匹配","slug":"具名组匹配"},{"level":2,"title":"七、正则中的中括号","slug":"七、正则中的中括号"},{"level":2,"title":"八、正则中的大括号(量词)","slug":"八、正则中的大括号-量词"},{"level":2,"title":"九、正则中字符串的方法","slug":"九、正则中字符串的方法"},{"level":3,"title":"replace","slug":"replace"},{"level":3,"title":"split","slug":"split"},{"level":3,"title":"match","slug":"match"},{"level":3,"title":"search","slug":"search"},{"level":3,"title":"lastIndex","slug":"lastindex"},{"level":2,"title":"十、高级用法","slug":"十、高级用法"},{"level":3,"title":"前瞻(?=)、后顾(?<=)、负前瞻(?!)、负后顾(?<!)","slug":"前瞻-、后顾-、负前瞻-、负后顾"},{"level":3,"title":"组合符：?:","slug":"组合符："},{"level":3,"title":"组合符：\\\\.*","slug":"组合符：-2"},{"level":3,"title":"贪婪模式与非贪婪模式","slug":"贪婪模式与非贪婪模式"},{"level":2,"title":"十一、常用正则","slug":"十一、常用正则"},{"level":3,"title":"密码限制","slug":"密码限制"},{"level":3,"title":"匹配到汉字以及前面的字符","slug":"匹配到汉字以及前面的字符"},{"level":2,"title":"十二、正则示例","slug":"十二、正则示例"},{"level":3,"title":"查找包含特定单词的句子","slug":"查找包含特定单词的句子"},{"level":3,"title":"从文件中去除无效字符","slug":"从文件中去除无效字符"},{"level":3,"title":"用单个空格替换多个空格","slug":"用单个空格替换多个空格"},{"level":3,"title":"限制用户只能输入数字或字母","slug":"限制用户只能输入数字或字母"},{"level":3,"title":"将网址变成链接","slug":"将网址变成链接"},{"level":3,"title":"删除重复的单词","slug":"删除重复的单词"},{"level":3,"title":"清除开始结束标签的空格","slug":"清除开始结束标签的空格"},{"level":2,"title":"总结大纲","slug":"总结大纲"}],"relativePath":"src/frontend/Javascript/js-14 正则篇.md","lastUpdated":1615699077387}',p={},t=a('<h1 id="js-14-正则篇"><a class="header-anchor" href="#js-14-正则篇" aria-hidden="true">#</a> js-14 正则篇</h1><h2 id="一、正则regexp"><a class="header-anchor" href="#一、正则regexp" aria-hidden="true">#</a> 一、正则RegExp</h2><p>用特殊的字符组成验证字符串的规则，用来检索或者替换字符串，检测表单输入的信息是否正确，默认只匹配一次；</p><p>正则：也叫做规则，让计算机能够读懂人类的规则（正则都是操作字符串的）；</p><p>用处：比如注册，邮箱的验证，表单提交等；</p><p>Reg 正则 Exp表达式</p><p>正则下面的方法：<code>exec</code>、<code>test</code></p><p>字符串下面的方法：<code>search</code>、<code>match</code>、<code>replace</code>、<code>split</code></p><p>常用：<code>test</code>、<code>search</code>、<code>match</code>、<code>replace</code>；</p><h2 id="二、创建规则"><a class="header-anchor" href="#二、创建规则" aria-hidden="true">#</a> 二、创建规则</h2><p>①构造函数创建：<code>new RegExp(表达式，修饰符)</code>；一般用在<strong>需要用变量</strong>的时候</p><p>②字面量创建：<code>/表达式/修饰符</code> 例如: <code>var a=/**/</code>;</p><div class="language-js"><pre><code><span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>   <span class="token comment">// a为字符串   推荐使用</span>\n<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">// a为变量</span>\n<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>   <span class="token comment">// a为字符串</span>\n</code></pre></div><h2 id="三、正常检测方法"><a class="header-anchor" href="#三、正常检测方法" aria-hidden="true">#</a> 三、正常检测方法</h2><p>检测str中是否有符合reg规则的字符串</p><ul><li><code>test()</code>；reg.test(str)；有返回true，没有返回false；</li><li><code>exec()</code>；reg.exec(str)；有返回数组，没有返回null</li></ul><p><code>exec</code>可以循环匹配，放在while循环，每次循环从下一次开始查找，当找不到时会返回null，循环内部通过RegExp.$1获取小括号内容，$2为第二个小括号，以此类推；</p><div class="language-js"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;?name=hny&amp;age=18&#39;</span>\n<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> res<span class="token punctuation">;</span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w+)=(\\w+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>\n<span class="token keyword">while</span><span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// o[res[1]] = res[2]</span>\n  o<span class="token punctuation">[</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> RegExp<span class="token punctuation">.</span>$<span class="token number">2</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>\n</code></pre></div><p>注意：正则需要用变量保存, 不能直接在while使用，否则获取不到上一次，如：</p><div class="language-js"><pre><code><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w+)=(\\w+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 报错；</span>\n</code></pre></div><h2 id="四、修饰符"><a class="header-anchor" href="#四、修饰符" aria-hidden="true">#</a> 四、修饰符</h2><ul><li><p><code>i</code>：不区分大小写，默认区分大小写</p></li><li><p><code>g</code>：匹配全局，默认只匹配一次</p></li><li><p><code>s</code>：不匹配.点的规则，解决\\n \\r，点默认不匹配换行符，加上可以匹配换行符</p></li><li><p><code>u</code>：根据unicode解析字符(影响\\w)</p></li></ul><p>如果既不区分大小写也不区分一次，则加<code>ig</code>；</p><h2 id="五、正则中的元字符"><a class="header-anchor" href="#五、正则中的元字符" aria-hidden="true">#</a> 五、正则中的元字符</h2><blockquote><p>使用特殊字符表示特殊含义</p></blockquote><p>\\ 转义符，转义表示本身；</p><p>需要转义的符号：[ ] { } ( ) . ? * + ^ \\ / | ;</p><p>本来这个字符它有自身的意思，但是加上反斜杠就成了另外一个意思；</p><p>比如：&#39;anb&#39;，这里表示anb，&#39;a\\nb&#39; 这里表示a换行b；</p><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\\s</code></td><td>空格：（空格、制表符、换行符）</td></tr><tr><td><code>\\S</code></td><td>非空格</td></tr><tr><td><code>\\d</code></td><td>数字</td></tr><tr><td><code>\\D</code></td><td>非数字，同[^0-9]相同</td></tr><tr><td><code>\\w</code></td><td>字符（字母和数字及下划线）</td></tr><tr><td><code>\\W</code></td><td>非字符</td></tr><tr><td><code>.</code></td><td>除了换行符以外的任意字符, 加s还可以匹配换行符</td></tr><tr><td><code>n*</code></td><td>匹配零个或多个n</td></tr><tr><td><code>n+</code></td><td>匹配至少一个n的字符串</td></tr><tr><td><code>n?</code></td><td>匹配零个或一个n</td></tr><tr><td><code>^</code></td><td>行首匹配</td></tr><tr><td><code>$</code></td><td>行尾匹配</td></tr><tr><td><code>|</code></td><td>或者</td></tr><tr><td><code>\\n</code></td><td>匹配换行符</td></tr><tr><td><code>\\r</code></td><td>匹配回车字符</td></tr><tr><td><code>\\t</code></td><td>匹配制表符</td></tr><tr><td><code>\\f</code></td><td>换页符</td></tr><tr><td><code>\\b</code></td><td>匹配一个单词边界，也就是单词和空格间的位置</td></tr><tr><td><code>\\B</code></td><td>匹配非单词边界，与上一个例子反过来</td></tr><tr><td><code>/[\\u4e00-\\u9fa5]/</code></td><td>匹配汉字</td></tr></tbody></table><h2 id="六、正则中的小括号"><a class="header-anchor" href="#六、正则中的小括号" aria-hidden="true">#</a> 六、正则中的小括号</h2><ol><li>()里面的内容表示捕获分组，()会把每个分组里的匹配结果保存起来，使用$n获取；</li><li><code>/(a)(b)(c)\\1\\2\\3/</code> \\1代表a和小括号a是一样的内容、\\2代表b，</li><li><code>(xyz)+</code> 匹配至少一个(xyz)，括号表示一体，</li><li><code>/a(b|c)d/</code> 匹配abd,acd；</li><li><code>hehe{3}</code> 是e匹配3次，(hehe){3}，是hehe单词匹配3次；</li></ol><p><code>\\1</code> 或 <code>$1</code> 匹配第一个分组中的内容</p><p><code>\\2</code> 或 <code>$2</code> 匹配第二个分组中的内容</p><p><code>\\3</code> 或 <code>$3</code> 匹配第三个分组中的内容</p><p><code>\\n</code>只能用在正则表达式中，<code>$n</code>只能用在正则表达式之外的地方；</p><div class="language-js"><pre><code><span class="token string">&#39;2018-02-11&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})\\-(\\d{2})\\-(\\d{2})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&#39;$1/$2/$3&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;2018/02/11&#39;</span>\n<span class="token string">&#39;18782832656&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{3})(\\d{4})(\\d{4})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&#39;$1****$3&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;abbkejsbcccwqaa&#39;</span>\nstr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w)\\1*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [&#39;a&#39;,&#39;bb&#39;,&#39;k&#39;.....]</span>\n\n<span class="token comment">// 判断双花括号的内容</span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\{\\{(.*)\\}\\}</span><span class="token regex-delimiter">/</span></span>\n</code></pre></div><p><code>reg.test(str)</code> // 返回true或false，可以通过RegExp.$1来获取上一次匹配的结果；</p><p><code>RegExp.$1</code> 第一个分组; 获取第一个分组有小括号的分组的匹配结果；</p><p>手机中间的*</p><div class="language-js"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;13388889999&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token operator">/</span><span class="token punctuation">(</span>\\d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>\\d<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>\\d<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">/</span>   利用函数；\nstr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$<span class="token number">0</span><span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">,</span>$<span class="token number">3</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> $<span class="token number">1</span> <span class="token operator">+</span> <span class="token string">&#39;****&#39;</span> <span class="token operator">+</span> $<span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>也可以：</p><div class="language-js"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;18210399098&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{4}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">;</span>\nreg<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">//从第三位开始匹配；</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;****&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="具名组匹配"><a class="header-anchor" href="#具名组匹配" aria-hidden="true">#</a> 具名组匹配</h3><p>为每组匹配指定名字<code>（?&lt;Groupname&gt;）</code></p><div class="language-js"><pre><code><span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token string">&#39;2017-09-11&#39;</span>\n<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span>\ntime<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&#39;$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>groups<span class="token punctuation">)</span> <span class="token comment">// 输出试试</span>\n</code></pre></div><p>如果需要具名组引用：使用<code>\\k&lt;name&gt;</code></p><div class="language-js"><pre><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;word&gt;[a-z])\\k&lt;word&gt;</span><span class="token regex-delimiter">/</span></span>\n</code></pre></div><p>格式化时间</p><div class="language-js"><pre><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})\\D(\\d{2})\\D(\\d{2}).*(\\d{2}):(\\d{2}):(\\d{2})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&#39;$1-$2-$3 $4:$5:$6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="七、正则中的中括号"><a class="header-anchor" href="#七、正则中的中括号" aria-hidden="true">#</a> 七、正则中的中括号</h2><p>字符类：一组相似的字符，</p><p><code>[abc]</code>整体代表一个字符，内部为或的关系。</p><p><code>[^abc]</code>：排除abc；中括号中使用^，表示排除；</p><p><code>[a-z]</code>: 范围a-z；可以是<code>[e-j]</code>；代表一个字符</p><h2 id="八、正则中的大括号-量词"><a class="header-anchor" href="#八、正则中的大括号-量词" aria-hidden="true">#</a> 八、正则中的大括号(量词)</h2><p><code>{0,}</code> 简写<code>n*</code> 匹配零个或多个n</p><p><code>{1,}</code> 简写<code>n+</code> 匹配至少一个n的字符串；</p><p><code>{0,1}</code>简写<code>?</code> 匹配零个或一个n</p><p><code>{n}</code> 匹配n次</p><p><code>{n,m}</code> 匹配n到m次</p><p><code>{n,}</code> 至少匹配n次；</p><h2 id="九、正则中字符串的方法"><a class="header-anchor" href="#九、正则中字符串的方法" aria-hidden="true">#</a> 九、正则中字符串的方法</h2><h3 id="replace"><a class="header-anchor" href="#replace" aria-hidden="true">#</a> replace</h3><p><code>字符串.replace(正则,新的字符)</code>；将正则匹配到的字符更换新字符；</p><ul><li>第二个参数也可以是一个函数：函数第一个参数是正则匹配成功的字符，通常是$0, <ul><li>函数的参数： <ul><li>第一个参数为匹配成功的字符$0;</li><li>第二个参数：正则的第一个小括号$1；</li><li>第三个参数：正则的第二个小括号$2；以此类推；</li></ul></li></ul></li><li>第二个参数字符串的$符作用：</li></ul><table><thead><tr><th>$1、$2、...、$99</th><th>与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</th></tr></thead><tbody><tr><td>$&amp;</td><td>与 regexp 相匹配的子串。当不加小括号就使用$&amp;</td></tr><tr><td>$&#39;</td><td>位于匹配子串左侧的文本。</td></tr><tr><td>$`</td><td>位于匹配子串右侧的文本。</td></tr><tr><td>$$</td><td>直接量符号。</td></tr></tbody></table><p>例子：分组操作，匹配子项；</p><div class="language-js"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;2019-4-17&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d+)(-)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> \nstr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$<span class="token number">0</span><span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">2</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>     \n    <span class="token comment">//$0匹配成功的字符，$1匹配第一个小括号（子项）的，$2匹配第二个小括号（子项）；</span>\n    $<span class="token number">2</span>  <span class="token comment">//为第二个小括号的匹配项，为-，可以修改这个项；</span>\n<span class="token punctuation">}</span>\n\nstr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cc</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>str配合正则使用，正则加g，有多少个则替换多少个，如果正则加了g，使用这个方法和forEach是一样的；</p><div class="language-js"><pre><code><span class="token comment">// 例子1</span>\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;北京，新疆，湖南，黑龙江，乌鲁木齐&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">北京|黑龙江|乌鲁木齐</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>\n<span class="token keyword">var</span> aa <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//循环替换里面的关键字  相当于执行了3遍</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> stm <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>val<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//循环文字的长度，将reg替换掉；</span>\n        stm<span class="token operator">+=</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> stm<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// **，黑龙江，新东方，****，西藏</span>\n\n<span class="token comment">// 例子2 转换驼峰命名法;</span>\n<span class="token keyword">const</span> toCameLize <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-(\\w)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">(</span>c <span class="token operator">?</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ab<span class="token operator">-</span>cd<span class="token operator">-</span>ef<span class="token punctuation">)</span> <span class="token comment">// abCdEf;</span>\n</code></pre></div><h3 id="split"><a class="header-anchor" href="#split" aria-hidden="true">#</a> split</h3><p><code>str.split(reg)</code>；以符合正则的内容分割</p><p>第二个参数可选的，新数组的长度；</p><div class="language-js"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;2019-4-17 15:25:25&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-|\\s|:</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>    <span class="token comment">// 以-或\\s或：分隔</span>\n</code></pre></div><h3 id="match"><a class="header-anchor" href="#match" aria-hidden="true">#</a> match</h3><p>如果有就返回匹配到的字符组成的数组，没有就返回null；</p><p>默认只匹配一次，匹配多次可以加g</p><p><code>str.match(reg)</code>；</p><div class="language-js"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;123hdsajkfd4355jkdslaf888&quot;</span>\nstr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//默认查找一次   g查找全部</span>\n输出之后：ary<span class="token punctuation">[</span>‘<span class="token number">123</span>’<span class="token punctuation">,</span>’<span class="token number">4355</span>‘<span class="token punctuation">,</span>’<span class="token number">888</span>‘<span class="token punctuation">]</span>   <span class="token comment">//输入全部数字；</span>\n\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;book&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;slice&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;dlick&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token operator">=&gt;</span>value<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">oo</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="search"><a class="header-anchor" href="#search" aria-hidden="true">#</a> search</h3><p>返回第一次出现的下标；如果没有，则返回-1；像字符串的indexOf()</p><p><code>字符串.search(reg)</code>；</p><h3 id="lastindex"><a class="header-anchor" href="#lastindex" aria-hidden="true">#</a> lastIndex</h3><p>纪录下一次要查找的位置的下标</p><p><code>正则.lastIndex</code>；</p><p>查找完为null之后从0开始，用正则调用，需要配合修饰符g；如果前面为1，则下一次为2；</p><div class="language-js"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;18210399098&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{4}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">;</span>\nreg<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">//从第三位开始匹配；</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;****&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="十、高级用法"><a class="header-anchor" href="#十、高级用法" aria-hidden="true">#</a> 十、高级用法</h2><h3 id="前瞻-、后顾-、负前瞻-、负后顾"><a class="header-anchor" href="#前瞻-、后顾-、负前瞻-、负后顾" aria-hidden="true">#</a> 前瞻(?=)、后顾(?&lt;=)、负前瞻(?!)、负后顾(?&lt;!)</h3><div class="language-js"><pre><code><span class="token comment">// 前瞻:</span>\n<span class="token function">e</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span>f<span class="token punctuation">)</span> e后边是f就匹配  f不会放进结果里<span class="token punctuation">;</span>   <span class="token operator">?</span><span class="token operator">:</span>则会放进结果里<span class="token punctuation">;</span>\n<span class="token comment">// 负前瞻:</span>\n<span class="token function">e</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span>f<span class="token punctuation">)</span> e后边不是f就匹配   <span class="token operator">?</span><span class="token operator">!</span>f  将<span class="token operator">=</span>换成<span class="token operator">!</span>  则为取非<span class="token punctuation">;</span>\n<span class="token comment">// 后顾:</span>\n<span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;=</span>f<span class="token punctuation">)</span>e e前面是f就匹配\n<span class="token comment">// 负后顾:</span>\n<span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">!</span>f<span class="token punctuation">)</span>e e前面不是f就匹配\n</code></pre></div><p><strong>例子</strong></p><div class="language-js"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;123ab&#39;</span>\na<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+(?=ab)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token comment">// 123   ab不会放进结果里</span>\na<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+(?:ab)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>  <span class="token comment">// 123ab  ab会放进结果里</span>\na<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+(?!bc)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>  <span class="token comment">//123   后面不能是bc，bc是不会放入到匹配结果内的;</span>\na<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=\\d)[a-z]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>   <span class="token comment">//ab   匹配紧跟着数字后的字母;</span>\n</code></pre></div><p><strong>组合使用</strong></p><div class="language-js"><pre><code>   <span class="token comment">//匹配字母之间的数字；</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;qee132ab&#39;</span><span class="token punctuation">;</span> \na<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=[a-z]+)\\d+(?=[a-z]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>  <span class="token comment">//  ?=匹配为ab的;</span>\n<span class="token comment">//[&quot;132&quot;, index: 3, input: &quot;qee132ab&quot;, groups: undefined]</span>\n</code></pre></div><h3 id="组合符："><a class="header-anchor" href="#组合符：" aria-hidden="true">#</a> 组合符：?:</h3><p>理解?:需要理解捕获分组和非捕获分组的概念</p><p><code>()</code>表示捕获分组，()会把每个分组里的匹配的值保存起来，使用$n(n是一个数字，表示第n个捕获组的内容)</p><p><code>(?:)</code>表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来</p><p>例子：格式化金钱</p><div class="language-js"><pre><code><span class="token comment">// 匹配的是后面3*n个数字的非单词边界(\\B)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;12345678&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B(?=(?:\\d{3})+(?!\\d))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   \n\n<span class="token comment">/* 原理解析: \n * 查找3n正整数和1个非数字, 8后面没有数字了, 因此需要加一个非数字\n * 其实不加?:也行,但大多数加上\n */</span>\n</code></pre></div><h3 id="组合符：-2"><a class="header-anchor" href="#组合符：-2" aria-hidden="true">#</a> 组合符：.*</h3><p><code>(.*)</code> 匹配直到后面条件的最后一个；</p><p><code>(.*?)</code> 匹配到后面条件下一个符合条件；</p><h3 id="贪婪模式与非贪婪模式"><a class="header-anchor" href="#贪婪模式与非贪婪模式" aria-hidden="true">#</a> 贪婪模式与非贪婪模式</h3><p><strong>贪婪模式</strong> ：正则表达式在匹配的时候默认会尽可能多的匹配</p><p><strong>非贪婪模式</strong> ：通过在限定符后加<code>?</code>叫非贪婪匹配；</p><p>比如：<code>\\d{3,6}</code>默认匹配6个数字而不是3个，<code>\\d{3,6}?</code>，匹配三次；</p><div class="language-js"><pre><code><span class="token string">&#39;abbbb&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>   <span class="token comment">//则结果是&#39;-&#39;;</span>\n<span class="token string">&#39;abbbb&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab+?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// 则结果是&#39;-bbb&#39;;</span>\n\n<span class="token comment">// 大家好,我叫{{name}},今年{{age}}岁</span>\n<span class="token operator">/</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span>   <span class="token comment">// 我叫{{直到}}岁;   贪婪模式匹配到结尾;</span>\n<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">{{(.*?)}}</span><span class="token regex-delimiter">/</span></span>   <span class="token comment">// 我叫{{}},今年{{}}岁;  添加?开启非贪婪模式;</span>\n</code></pre></div><h2 id="十一、常用正则"><a class="header-anchor" href="#十一、常用正则" aria-hidden="true">#</a> 十一、常用正则</h2><div class="language-js"><pre><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token punctuation">{</span>\n        phone<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1\\d{10}$</span><span class="token regex-delimiter">/</span></span>\n        qq <span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1-9][0-9]{4,9}$</span><span class="token regex-delimiter">/</span></span>\n        email <span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\w+@\\w+\\.(com|cn|com.cn|wang|cc|xin|ren|info|xyz|site|club|win|net|org)$</span><span class="token regex-delimiter">/</span></span>\n        space <span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*|\\s*$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>\n        身份证：<span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\\d<span class="token punctuation">{</span><span class="token number">14</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\\d<span class="token punctuation">{</span><span class="token number">17</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\\d<span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">}</span>x$<span class="token operator">/</span>\n        匹配中文：<span class="token operator">/</span><span class="token punctuation">[</span>\\u4e00<span class="token operator">-</span>\\u9fa5<span class="token punctuation">]</span><span class="token operator">/</span>g\n        固话：<span class="token operator">/</span><span class="token operator">^</span><span class="token number">0</span>\\d<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\\d<span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span>$<span class="token operator">/</span>\n        网址：<span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">:</span>\\<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/[^\\s]+$</span><span class="token regex-delimiter">/</span></span>\n        密码：<span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">[</span>\\<span class="token constant">W</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">}</span>$<span class="token operator">/</span><span class="token punctuation">;</span>\n        格式化金钱：<span class="token operator">/</span>\\<span class="token constant">B</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">(</span>\\d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span>\\d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>g<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="密码限制"><a class="header-anchor" href="#密码限制" aria-hidden="true">#</a> 密码限制</h3><ul><li><p><code>(?=)</code> 零宽断言，表示有；</p></li><li><p><code>(?=.*[a-zA-Z])</code> 后面必须有一位大写或小写字母</p></li><li><p><code>(?=.*\\d)</code> 后面必须有一位数字</p></li><li><p><code>(?=.*\\W)</code> 后面必须有一个非字母数字及下划线的特殊符号</p></li></ul><p>后面必须跟点再写限制量词；</p><p><code>.*</code> 表示匹配除了换行符以外的任意0个或多个；</p><p><strong>必须包含字母 数字 及特殊符号，且6位以上</strong></p><p><code>/^(?=.*[a-zA-Z])(?=.*[1-9])(?=.*[\\W]).{6,}$/</code> 不能全部是数字或字母或符号</p><p>后面的一个点表示匹配一位换行符以外的字符，带了大括号匹配6位即可；</p><p><strong>大小写字母 数字 特殊符号 必须包含两种</strong></p><p><code>/^(?![0-9]+$)(?![a-z]+$)(?![A-Z]+$)(?!([^(0-9a-zA-Z)])+$).{6,}$/</code></p><p><strong>至少有一个并且数字开头</strong></p><p><code>/\\d+[a-z]+/</code></p><h3 id="匹配到汉字以及前面的字符"><a class="header-anchor" href="#匹配到汉字以及前面的字符" aria-hidden="true">#</a> 匹配到汉字以及前面的字符</h3><p><code>/[a-z0-9]*[\\u4e00-\\u9fa5+]/g.exec(this.innerHTML)</code></p><h2 id="十二、正则示例"><a class="header-anchor" href="#十二、正则示例" aria-hidden="true">#</a> 十二、正则示例</h2><h3 id="查找包含特定单词的句子"><a class="header-anchor" href="#查找包含特定单词的句子" aria-hidden="true">#</a> 查找包含特定单词的句子</h3><div class="language-js"><pre><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;The apple tree originated in Central Asia. It is cultivated worldwide. Apple matures in late summer or autumn.&quot;</span>\n\n<span class="token comment">// 查找包含单词“ apple”的句子</span>\nstr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^.!?]*\\bapple\\b[^.!?]*.?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">)</span>\n\n<span class="token comment">// 输出结果</span>\n<span class="token comment">// =&gt; [&quot;The apple tree originated in Central Asia.&quot;, &quot;Apple matures in late summer or autumn.&quot;]</span>\n</code></pre></div><h3 id="从文件中去除无效字符"><a class="header-anchor" href="#从文件中去除无效字符" aria-hidden="true">#</a> 从文件中去除无效字符</h3><div class="language-js"><pre><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;https://en.wikipedia.org/&quot;</span>\n\nstr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[&lt;&gt;|:&quot;*?\\\\/]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// =&gt; &quot;httpsen.wikipedia.org&quot;</span>\n</code></pre></div><h3 id="用单个空格替换多个空格"><a class="header-anchor" href="#用单个空格替换多个空格" aria-hidden="true">#</a> 用单个空格替换多个空格</h3><div class="language-js"><pre><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;  My    opinions may  have changed,    but not the fact that I&#39;m right.&quot;</span>\n\nstr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s\\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// =&gt; &quot; My opinions may have changed, but not the fact that I&#39;m right.&quot;</span>\n</code></pre></div><p>此代码用空格<code>（U + 0020）</code>字符替换任何类型的空格字符，包括ASCII空格，制表符，换行符，回车符，垂直制表符和换页符。因此，如果回车符紧跟在制表符之后，它们将被空格替换。如果这不是我们的意图，并且只想替换相同类型的空格，请改用以下代码：</p><div class="language-js"><pre><code>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\s)\\1+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 需要.trim 去除结尾跟开头的空格</span>\n</code></pre></div><h3 id="限制用户只能输入数字或字母"><a class="header-anchor" href="#限制用户只能输入数字或字母" aria-hidden="true">#</a> 限制用户只能输入数字或字母</h3><div class="language-js"><pre><code><span class="token keyword">const</span> input1 <span class="token operator">=</span> <span class="token string">&quot;John543&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> input2 <span class="token operator">=</span> <span class="token string">&quot;:-)&quot;</span><span class="token punctuation">;</span>\n<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Z0-9]+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>input1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// → true</span>\n<span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token operator">/</span>i<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>input2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// → false</span>\n</code></pre></div><h3 id="将网址变成链接"><a class="header-anchor" href="#将网址变成链接" aria-hidden="true">#</a> 将网址变成链接</h3><div class="language-js"><pre><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;Visit https://en.wikipedia.org/ for more info.&quot;</span><span class="token punctuation">;</span>\nstr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b(https?|ftp|file):\\/\\/\\S+[\\/\\w]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;a href=&quot;$&amp;&quot;&gt;$&amp;&lt;/a&gt;&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// =&gt; &quot;Visit &lt;a href=&quot;https://en.wikipedia.org/&quot;&gt;https://en.wikipedia.org/&lt;/a&gt; for more info.&quot;</span>\n</code></pre></div><h3 id="删除重复的单词"><a class="header-anchor" href="#删除重复的单词" aria-hidden="true">#</a> 删除重复的单词</h3><div class="language-js"><pre><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;This this sentence has has double words.&quot;</span>\n\nstr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b(\\w+)\\s+\\1\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// =&gt; &quot;This sentence has double words.&quot;</span>\n</code></pre></div><h3 id="清除开始结束标签的空格"><a class="header-anchor" href="#清除开始结束标签的空格" aria-hidden="true">#</a> 清除开始结束标签的空格</h3><div class="language-js"><pre><code><span class="token keyword">var</span> trim <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*|\\s*$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>\n</code></pre></div><h2 id="总结大纲"><a class="header-anchor" href="#总结大纲" aria-hidden="true">#</a> 总结大纲</h2><p><img src="https://notecdn.heny.vip/images/js-14_%E6%AD%A3%E5%88%99_01.png" alt="image"></p>',144);p.render=function(a,e,p,o,c,l){return s(),n("div",null,[t])};export default p;export{e as __pageData};
