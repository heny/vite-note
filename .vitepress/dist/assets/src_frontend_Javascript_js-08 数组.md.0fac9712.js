import{o as n,c as a,d as s}from"./app.ca2be113.js";const p='{"title":"js-08 数组","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、数组常用方法","slug":"一、数组常用方法"},{"level":3,"title":"添加与删除 splice","slug":"添加与删除-splice"},{"level":3,"title":"排序 sort","slug":"排序-sort"},{"level":3,"title":"拼接 join","slug":"拼接-join"},{"level":3,"title":"翻转 reverse","slug":"翻转-reverse"},{"level":3,"title":"合并 concat","slug":"合并-concat"},{"level":3,"title":"查找 indexOf","slug":"查找-indexof"},{"level":3,"title":"截取 slice","slug":"截取-slice"},{"level":2,"title":"二、数组迭代方法","slug":"二、数组迭代方法"},{"level":3,"title":"全部 every","slug":"全部-every"},{"level":3,"title":"一些 some","slug":"一些-some"},{"level":3,"title":"过滤 filter","slug":"过滤-filter"},{"level":3,"title":"改变 map","slug":"改变-map"},{"level":3,"title":"循环 forEach","slug":"循环-foreach"},{"level":2,"title":"三、数组扩展","slug":"三、数组扩展"},{"level":2,"title":"四、reduce","slug":"四、reduce"},{"level":3,"title":"简单使用","slug":"简单使用"},{"level":3,"title":"数组去重案例","slug":"数组去重案例"},{"level":3,"title":"对象案例","slug":"对象案例"},{"level":3,"title":"修改对象的值（常用）","slug":"修改对象的值（常用）"},{"level":3,"title":"reduce代替map","slug":"reduce代替map"},{"level":3,"title":"reduce代替filter","slug":"reduce代替filter"},{"level":2,"title":"补充","slug":"补充"},{"level":3,"title":"将类数组转换为真正的数组","slug":"将类数组转换为真正的数组"},{"level":3,"title":"添加指定长度的空数组","slug":"添加指定长度的空数组"},{"level":3,"title":"修改原数组代替concat","slug":"修改原数组代替concat"},{"level":3,"title":"测试随机数取哪些数","slug":"测试随机数取哪些数"},{"level":3,"title":"随机验证码","slug":"随机验证码"},{"level":2,"title":"高频面试题","slug":"高频面试题"},{"level":3,"title":"数组去重","slug":"数组去重"},{"level":3,"title":"选择数组排序","slug":"选择数组排序"},{"level":3,"title":"冒泡数组排序","slug":"冒泡数组排序"},{"level":3,"title":"其他","slug":"其他"}],"relativePath":"src/frontend/Javascript/js-08 数组.md","lastUpdated":1615699077385}',t={},o=s('<h1 id="js-08-数组"><a class="header-anchor" href="#js-08-数组" aria-hidden="true">#</a> js-08 数组</h1><h2 id="一、数组常用方法"><a class="header-anchor" href="#一、数组常用方法" aria-hidden="true">#</a> 一、数组常用方法</h2><h3 id="添加与删除-splice"><a class="header-anchor" href="#添加与删除-splice" aria-hidden="true">#</a> 添加与删除 splice</h3><ol><li><p><strong>从前添加或删除单个</strong>：<code>unshift</code>、<code>shift</code></p><p><code>unshift()</code>；从前添加多个，返回数组的长度，改变数组</p><p><code>shift()</code>；没有参数，删除第一项，返回删除值，</p></li><li><p><strong>从后添加或删除单个</strong>：<code>push</code>、<code>pop</code></p><p><code>push()</code>；从后添加多个，返回数组长度，改变数组；</p><p><code>pop()</code>；不写参数，从后删除一项，返回被删除的值。</p><p><code>arr.push(arr.shift())</code>; 删除第一项并添加到最后一项；</p></li><li><p><strong>复合写法</strong>：<code>splice(n[,m][,add])</code></p><ul><li><p>一个参数：删除n个；</p></li><li><p>两个参数：从n删除m个；</p></li><li><p>三个以上：从n删除m个，并开始添加；</p></li></ul><p>改变原数组，返回被删除的项组成的数组，如果没有被删除的项，返回一个空数组；</p><p>注意：如果第一个为负数，表示从后面截取多少个，第二个参数则无效，第三个参数为添加；</p><p>如果是负数，是添加的数组的length，因此是从后面截取；</p></li></ol><h3 id="排序-sort"><a class="header-anchor" href="#排序-sort" aria-hidden="true">#</a> 排序 sort</h3><p><code>变量.sort()</code>；默认是以字符串的Unicode码一位一位比较的；</p><ul><li><p><code>function(a,b){return a-b}</code> 从小到大或从大到小，字符串不按照一位一位比较，返回排序完的数组，原数组改变。</p></li><li><p><code>function(a,b){return a.localeCompare(b)}</code> 字符串从小到大或从大到小。</p></li><li><p><code>function(a,b){return a.localeCompare(b,&quot;zh&quot;)}</code> 字符串包含汉字以26字母从小到大或从大到小排列。</p><p>sort还可以对对象排序</p></li><li><p>乱序：<code>arr.sort(function(){return Math.random()-0.5})</code> ；</p><p>理解：正序是大于1，倒序是小于1，乱序则在中间；</p></li></ul><p>当数组对象的时候，这样使用；</p><div class="language-js"><pre><code><span class="token keyword">var</span> ary3<span class="token operator">=</span><span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&quot;战三&quot;</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\nary3<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">&quot;zh&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="拼接-join"><a class="header-anchor" href="#拼接-join" aria-hidden="true">#</a> 拼接 join</h3><p><code>arr.join()</code></p><p>把数组变成字符串，参数就是拼接符；</p><p>将数组逗号连接字符串，如果括号为引号则拼接；可以指定字符串拼接；</p><p>参数也可以是标签，返回设置好的变量，原数组不会改变。</p><p>小练习：查找文字</p><div class="language-js"><pre><code><span class="token keyword">var</span> h <span class="token operator">=</span> p<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>\nbtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> val <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token comment">//获取value值</span>\n    <span class="token keyword">var</span> ary <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//以搜索框的文字来分割成数组</span>\n    <span class="token keyword">var</span> str <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;mark&gt;&#39;</span> <span class="token operator">+</span> val <span class="token operator">+</span> <span class="token string">&#39;&lt;/mark&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//join将分隔好的数组组成字符串；</span>\n    p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> str<span class="token punctuation">;</span>  <span class="token comment">//把组好的字符串返回文本标签；</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="翻转-reverse"><a class="header-anchor" href="#翻转-reverse" aria-hidden="true">#</a> 翻转 reverse</h3><p><code>arr.reverse()</code></p><p>数组倒过来排序，不用传参数，返回值倒过来的数组，原数组变为倒过来的；</p><h3 id="合并-concat"><a class="header-anchor" href="#合并-concat" aria-hidden="true">#</a> 合并 concat</h3><p><code>arr1.concat(arr2)</code></p><p>将多个数组拼接起来，参数要拼接的数组，多个用逗号隔开，</p><p>参数可以是数组，也可以是单个项，</p><p>返回值，拼接后的数组，原数组不改变；</p><p>ES6的语法：<code>[...arr1,...arr2]</code>，不用使用<code>concat()</code>；</p><h3 id="查找-indexof"><a class="header-anchor" href="#查找-indexof" aria-hidden="true">#</a> 查找 indexOf</h3><p><code>arr.indexOf(str)</code></p><p>查找，参数要查找的值，返回值有则返回下标，没有返回-1，原数组不会改变；，</p><p>查找的值要全等，IE8及以下不支持；</p><h3 id="截取-slice"><a class="header-anchor" href="#截取-slice" aria-hidden="true">#</a> 截取 slice</h3><p><code>arr.slice(n, m)</code></p><p>和字符串用法一样；</p><ul><li><p>不填参数，返回全部；</p></li><li><p>只有n时，从n开始截取到结束；，返回被截取的字符；</p></li><li><p>n,m时，从n截取到m，不包括m；</p></li><li><p>m大于n时，不置换下标，返回空字符串，不报错；</p></li><li><p>当有值为负数时，负数加字符串长度，返回参数，加完还是负数，从0开始；</p></li></ul><p>也可以使用<code>arr.length = 10</code>，将20个对象的数组只留前面10个；</p><p>总结：</p><p>会改变原数组的：<code>push</code>,<code>pop</code>,<code>unshift</code>,<code>shift</code>,<code>splice</code>,<code>sort</code>,<code>reverse</code>,<code>fill</code>,<code>copyWithin</code></p><p>其他的方法都不会改变原数组；</p><p><strong>实现a克隆b能想到几种方法</strong></p><ol><li><code>for</code>循环，</li><li><code>slice</code>截取不传参数，</li><li><code>concat</code>利用空数组拼接a；</li></ol><h2 id="二、数组迭代方法"><a class="header-anchor" href="#二、数组迭代方法" aria-hidden="true">#</a> 二、数组迭代方法</h2><p>下面所有的项都可以用for循环办到，只是将for循环包装了一下；</p><p>参数：<code>function(数据，下标，数组本身){比较表达式}</code>。</p><h3 id="全部-every"><a class="header-anchor" href="#全部-every" aria-hidden="true">#</a> 全部 every</h3><blockquote><p>比较数组，返回布尔值，全真为真，一假全假。</p></blockquote><p>返回值：<code>true/false</code>；</p><p>不会改变原数组；</p><p>vue中实例：常用于在全选上面;</p><div class="language-js"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>checkedAll <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token operator">=&gt;</span>items<span class="token punctuation">.</span>flag<span class="token punctuation">)</span>  \n<span class="token comment">//当全部选中时，则改变checkdAll复选框的状态;</span>\n</code></pre></div><h3 id="一些-some"><a class="header-anchor" href="#一些-some" aria-hidden="true">#</a> 一些 some</h3><blockquote><p>比较数组，返回布尔值，一真为真，全假为假。</p></blockquote><p>返回值：<code>true/false</code>；不会改变原数组；</p><h3 id="过滤-filter"><a class="header-anchor" href="#过滤-filter" aria-hidden="true">#</a> 过滤 filter</h3><blockquote><p>过滤，满足条件的组成新数组并返回。</p></blockquote><div class="language-js"><pre><code>ary<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    value<span class="token operator">&gt;</span><span class="token number">3</span>   将大于<span class="token number">3</span>的数组成一个新数组，并返回；\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="改变-map"><a class="header-anchor" href="#改变-map" aria-hidden="true">#</a> 改变 map</h3><blockquote><p>改变数组中的数据，返回改变的数组</p></blockquote><p>定义：对数组的每一项都运行给定函数，返回每次函数调用的结果组成的数组；</p><p>比如：<code>变量.map((value,index,ary){return value*3})</code>；让每一个value都*3并返回新数组；</p><p>map可以直接修改引用类型的数组（数组套对象），不需要返回；</p><div class="language-js"><pre><code><span class="token comment">// 第三个参数的使用方法</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>i<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token operator">=&gt;</span>e<span class="token operator">%</span><span class="token number">5</span><span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">//map修改数组对象优雅的方式</span>\narr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>item<span class="token punctuation">,</span>\n        obj<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>obj<span class="token punctuation">)</span>  <span class="token comment">//使用对象解构的方式,之后再替换里面的对象;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="循环-foreach"><a class="header-anchor" href="#循环-foreach" aria-hidden="true">#</a> 循环 forEach</h3><p>循环数组，参数是一样的，没有返回值，不需要return，原数组不改变；和for循环使用方法一样，</p><p>循环元素时第一个形参是每一个元素；</p><p><code>参数funtion(数据，下标，数组本身)</code>;，IE8以下不兼容；</p><p>只能循环NodeList数组：不能循环HTMLCollection类数组，对于HTMLCollection的数组，可以使用Array.from进行转换</p><div class="language-js"><pre><code><span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> f <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    str<span class="token operator">+=</span>value<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回是1234567；</span>\n</code></pre></div><p><strong>注意：</strong></p><p>使用迭代数组无法终止数组循环，不能break和containue，解决办法如下：</p><ol><li><p>使用try代码块，在需要中断的地方抛出异常</p><div class="language-js"><pre><code><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">try</span><span class="token punctuation">{</span>\n    Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span>i</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        sum<span class="token operator">+=</span><span class="token number">1</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">===</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div></li><li><p>使用every、some来代替forEach循环解决，every可以return false来终止循环，some可以return true来终止循环，强烈推荐使用some，简单方便；</p><div class="language-js"><pre><code><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span>i</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>i<span class="token punctuation">)</span>\n<span class="token comment">// every写法</span>\narr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  sum<span class="token operator">+=</span><span class="token number">1</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token comment">// 52</span>\n<span class="token comment">// some写法</span>\narr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    sum<span class="token operator">+=</span><span class="token number">1</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token comment">// some不需要在后面返回true了</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ol><h2 id="三、数组扩展"><a class="header-anchor" href="#三、数组扩展" aria-hidden="true">#</a> 三、数组扩展</h2><ol><li><p><code>Array.from(v)</code> : 将伪数组对象或可遍历对象转换为真数组，需要一个变量来接收；</p></li><li><p><code>Array.of(v1, v2, v3)</code> : 将一系列值转换成数组，和new Array传值是一样的；</p></li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 这个3不是数组的长度，是一个数组</span>\n</code></pre></div><ol start="3"><li><code>find()</code>；find返回符合条件的元素，之后的值不会再调用执行函数，如果找不到返回undefined，不会改变原数组；</li></ol><div class="language-js"><pre><code>arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><ol start="4"><li><code>findIndex</code>：返回符合条件的元素的索引位置，没有返回-1，不改变原数组；</li></ol><div class="language-js"><pre><code><span class="token function">findIndex</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span><span class="token parameter">arr</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><ol start="5"><li><p><code>includes()</code>：判断数组是否包含否个值</p></li><li><p><code>fill()</code> 如果括号不填参，则将数组的每一项都返回undefined；</p></li></ol><p>括号共有三个参数，第一个要置换的内容(必填)，第二个从什么位置开始，第三个停止置换的前一个位置；</p><ol start="7"><li><code>flat()</code> 将一个多维数组深度转成一维(扁平化或称作降维)；</li></ol><p>常用于扁平化数组，括号填写扁平化多少层，填写Infinity，扁平所有；</p><p>flat方法会移除数组中的空项，[1,2,,4,5]，会将2和4中间的移除；</p><div class="language-js"><pre><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\narr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">// 遍历一组</span>\n</code></pre></div><ol start="8"><li><p><code>flatMap()</code> 相当于flat和map的组合，在运算后直接将数组扁平化处理</p><div class="language-js"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token operator">=&gt;</span>e<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token operator">=&gt;</span>e<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment">// [2,3,&#39;31&#39;,&#39;4,51&#39;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment">// 如上</span>\n</code></pre></div></li><li><p><code>copyWithin</code>能复制数组中的某些元素，并将它放到同一个数组指定的位置；</p></li></ol><p>三个参数：第一个要置换的位置(必填)，第二个从什么位置开始复制，第三个要停止复制的前一个位置；</p><ol start="10"><li><code>valueOf()</code> 返回原数组，可以用来浅拷贝；</li><li><code>keys()</code> 返回数组的下标；会生成iterator接口，使用for..of取值或者Array.from；</li></ol><h2 id="四、reduce"><a class="header-anchor" href="#四、reduce" aria-hidden="true">#</a> 四、reduce</h2><p><code>arr.reduce(callback,[init])</code></p><p>第一个回调函数，回调函数必须有返回值，，一般返回第一个prev的值；</p><p>回调函数的四个参数：上一次回调函数的结果，当前值，项的索引，数组对象；</p><p>第二个参数为可选值，用于初始值，放到callback里进行计算；（可以放一个空数组，之后可以使用第一个值concat）</p><p><code>reduceRight</code></p><p>从后边开始循环；</p><p>理解：</p><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> p\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">// 第二个参数作为p第一次循环的值,如果没有则取数组中第一项,则c从第二项开始;</span>\n<span class="token comment">// p为上一次回调函数的结果,如果没有return p,则没有结果,则reduce没有意义; </span>\n<span class="token comment">// 上述代码中,p没有和c进行交互,p一直是[],则arr2结果为[];</span>\n</code></pre></div><h3 id="简单使用"><a class="header-anchor" href="#简单使用" aria-hidden="true">#</a> 简单使用</h3><div class="language-js"><pre><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span>   <span class="token comment">//15</span>\n<span class="token keyword">var</span> mul <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span>  <span class="token comment">//</span>\n</code></pre></div><h3 id="数组去重案例"><a class="header-anchor" href="#数组去重案例" aria-hidden="true">#</a> 数组去重案例</h3><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>cur</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pre<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> pre\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 当有第二个参数时，第一次先循环一个空数组，第二次循环添加了一个的数组</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [1, 2, 3, 4]</span>\n</code></pre></div><h3 id="对象案例"><a class="header-anchor" href="#对象案例" aria-hidden="true">#</a> 对象案例</h3><p>仅演示使用方法,案例不在</p><div class="language-js"><pre><code>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>curr</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>length <span class="token operator">===</span> maxLen<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        pre<span class="token punctuation">[</span>curr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> curr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token comment">// 将pre对象的键名,等于键值，这里的curr[0]为第一个;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> pre <span class="token comment">// 返回的是上一次回调函数的结果,最终会把最后一个结果返回出去;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="修改对象的值（常用）"><a class="header-anchor" href="#修改对象的值（常用）" aria-hidden="true">#</a> 修改对象的值（常用）</h3><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;hhh&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token string">&#39;18&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  o<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>c<span class="token punctuation">]</span>\n  <span class="token keyword">return</span> o\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">// {name: &#39;18hhh&#39;, age: &#39;1818&#39;}</span>\n</code></pre></div><h3 id="reduce代替map"><a class="header-anchor" href="#reduce代替map" aria-hidden="true">#</a> reduce代替map</h3><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>\narr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span>item<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>\narr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    p<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> p\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="reduce代替filter"><a class="header-anchor" href="#reduce代替filter" aria-hidden="true">#</a> reduce代替filter</h3><div class="language-js"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\narr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span>item<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span>\narr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    c <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> p\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="补充"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h2><h3 id="将类数组转换为真正的数组"><a class="header-anchor" href="#将类数组转换为真正的数组" aria-hidden="true">#</a> 将类数组转换为真正的数组</h3><p>该函数可以调用任意数量的形参；</p><ul><li><p><code>Array.prototype.slice.call(arguments)</code>;</p></li><li><p><code>[].slice.call(arguments)</code></p></li><li><p><code>Array.from(arguments)</code></p></li></ul><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addOne</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="添加指定长度的空数组"><a class="header-anchor" href="#添加指定长度的空数组" aria-hidden="true">#</a> 添加指定长度的空数组</h3><p><code>Array.apply(null,{length:20})</code></p><p>会加入20个空的数组，20个长度的数组；</p><p>可以简写：<code>Array.apply(null,Array(20))</code>；</p><p>es6写法：<code>Array.from({length:20})或Array(20).fill()</code>； // fill里面也可以填写内容，以什么来填充；</p><div class="language-js"><pre><code><span class="token function">Array</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">{</span>length<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>  <span class="token comment">// 打印20次</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="修改原数组代替concat"><a class="header-anchor" href="#修改原数组代替concat" aria-hidden="true">#</a> 修改原数组代替concat</h3><p><code>Array.prototype.push.apply(arr1,arr2)</code></p><p>由于concat不能直接修改原数组，可以通过此方法将arr2合并到arr1身上，apply第二个参数接受数组；</p><p>缺点：如果第二个数组太大时，不建议使用此方法来进行合并，因为一个函数能够接收的参数个数是有限的；</p><p>解决方法：将参数数组切块后循环传入目标</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">concatOfArray</span> <span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> <span class="token constant">QUANTUM</span> <span class="token operator">=</span> <span class="token number">32768</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token constant">QUANTUM</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>\n      arr1<span class="token punctuation">,</span>\n      arr2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token constant">QUANTUM</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> arr1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 验证: </span>\n<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>   <span class="token comment">//循环添加多个i</span>\n<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span>   <span class="token comment">//爆栈</span>\n<span class="token function">concatOfArray</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span> <span class="token comment">//正常输出;</span>\n</code></pre></div><h3 id="测试随机数取哪些数"><a class="header-anchor" href="#测试随机数取哪些数" aria-hidden="true">#</a> 测试随机数取哪些数</h3><p>如果需要测试随机数都取到了哪些数，通过创建空数组方法，添加到数组里面去；</p><div class="language-js"><pre><code>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token operator">=&gt;</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="随机验证码"><a class="header-anchor" href="#随机验证码" aria-hidden="true">#</a> 随机验证码</h3><div class="language-js"><pre><code>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="高频面试题"><a class="header-anchor" href="#高频面试题" aria-hidden="true">#</a> 高频面试题</h2><h3 id="数组去重"><a class="header-anchor" href="#数组去重" aria-hidden="true">#</a> 数组去重</h3><p>判断问题：拿第一个和每一个去做比较，所以需要用到两个循环；</p><ol><li>写两个循环，第一个循环数组第一个数据，第二个循环让每一个和第一个做比较。</li><li>第二循环j=i+1，再判断第二个循环的下标是否和第一个循环的下标的字符相同，如果是相同的，则删除一个</li><li>删除之后数组变短，让j减一，重新做比较。</li></ol><div class="language-js"><pre><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n        <span class="token keyword">if</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> ary<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//如果k等于0，则需要这一步</span>\n                <span class="token keyword">continue</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            k<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//前面删除一个之后数组的长度会进1，此时的k会直接跳到循环去加1，让k减1；</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="选择数组排序"><a class="header-anchor" href="#选择数组排序" aria-hidden="true">#</a> 选择数组排序</h3><p>判断问题：拿第一个和每一个去做比较，如果大于第二个，则让第一个到第二个位置去；</p><p>（1）写两个循环，第二个循环j=i+1;，不比较本身。</p><p>（2）判断数组的第一个字符i是否大于数组的第二个j字符，如果大于第一个字符，则调换位置。</p><h3 id="冒泡数组排序"><a class="header-anchor" href="#冒泡数组排序" aria-hidden="true">#</a> 冒泡数组排序</h3><p>跟自己紧挨着的做比较，j&gt;j+1，判断大于调换位置。</p><div class="language-js"><pre><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;</span> ary<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//2k &gt; 1n 1n 2k</span>\n            <span class="token keyword">var</span> n<span class="token operator">=</span>ary<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            ary<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>ary<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            ary<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token comment">//自身和紧挨着的后一个比较；</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="其他"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><p>● 数组方法 pop() push() unshift() shift() ？</p><p>● split() join() 的区别？</p><p>● 编写一个数组去重的方法。</p><p>● [“1”, “2”, “3”].map(parseInt) 答案是多少？</p><p>● 冒泡算法排序？</p>',147);t.render=function(s,p,t,e,c,u){return n(),a("div",null,[o])};export default t;export{p as __pageData};
