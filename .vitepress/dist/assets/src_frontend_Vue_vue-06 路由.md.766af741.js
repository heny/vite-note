import{o as n,c as a,d as s}from"./app.ca2be113.js";const t='{"title":"Vue-06 路由","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、路由","slug":"一、路由"},{"level":3,"title":"搭建路由","slug":"搭建路由"},{"level":2,"title":"二、配置路由","slug":"二、配置路由"},{"level":3,"title":"配置方法","slug":"配置方法"},{"level":3,"title":"路由显示","slug":"路由显示"},{"level":2,"title":"三、动态路由","slug":"三、动态路由"},{"level":3,"title":"path路径","slug":"path路径"},{"level":3,"title":"查询字符串","slug":"查询字符串"},{"level":3,"title":"使用props代替$route.params接收参数","slug":"使用props代替-route-params接收参数"},{"level":3,"title":"路由参数变化组件不更新","slug":"路由参数变化组件不更新"},{"level":2,"title":"四、路由嵌套","slug":"四、路由嵌套"},{"level":2,"title":"五、router激活的类","slug":"五、router激活的类"},{"level":2,"title":"六、编程式导航","slug":"六、编程式导航"},{"level":3,"title":"$route和$router的区别","slug":"route和-router的区别"},{"level":2,"title":"七、命名视图","slug":"七、命名视图"},{"level":2,"title":"八、路由守卫","slug":"八、路由守卫"},{"level":3,"title":"全局守卫","slug":"全局守卫"},{"level":3,"title":"路由独享守卫","slug":"路由独享守卫"},{"level":3,"title":"组件内守卫","slug":"组件内守卫"},{"level":3,"title":"数据获取方式","slug":"数据获取方式"},{"level":3,"title":"watch监听路由","slug":"watch监听路由"},{"level":2,"title":"八、路由实例方法","slug":"八、路由实例方法"},{"level":2,"title":"九、vue组件name作用","slug":"九、vue组件name作用"},{"level":2,"title":"十、Vue的路由实现","slug":"十、vue的路由实现"}],"relativePath":"src/frontend/Vue/vue-06 路由.md","lastUpdated":1615699077430}',p={},o=s('<h1 id="vue-06-路由"><a class="header-anchor" href="#vue-06-路由" aria-hidden="true">#</a> Vue-06 路由</h1><h2 id="一、路由"><a class="header-anchor" href="#一、路由" aria-hidden="true">#</a> 一、路由</h2><ul><li>后端路由：对于普通的网站，所有的超链接都是url地址，所有的url地址都对应服务器上对应的资源</li><li>前端路由：在SPA单页面应用程序中，主要通过url中的<code>hash</code>（#号）来实现不同页面之间的切换；因为<code>hash</code>有个特点，http请求中不会包含<code>hash</code>相关的内容；</li></ul><h3 id="搭建路由"><a class="header-anchor" href="#搭建路由" aria-hidden="true">#</a> 搭建路由</h3><ul><li>src/router/index.js</li></ul><div class="language-js"><pre><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  base<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 默认为/, 针对页面的根路径</span>\n  mode<span class="token operator">:</span> <span class="token string">&#39;history&#39;</span><span class="token punctuation">,</span>\n  routes<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      path<span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span>\n      name<span class="token operator">:</span> <span class="token string">&#39;HelloWorld&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 用来路由跳转的;</span>\n      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/components/HelloWorld&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      children<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            path<span class="token operator">:</span> <span class="token string">&#39;article&#39;</span><span class="token punctuation">,</span> <span class="token comment">// children下面的地址访问是: /home/article;</span>\n            name<span class="token operator">:</span> <span class="token string">&#39;article&#39;</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token parameter">_</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/components/article&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;_&#39;是占位符, 不用写小括号</span>\n          <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li>修改main.js文件</li></ul><div class="language-js"><pre><code><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;./router&#39;</span>\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    router\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="二、配置路由"><a class="header-anchor" href="#二、配置路由" aria-hidden="true">#</a> 二、配置路由</h2><h3 id="配置方法"><a class="header-anchor" href="#配置方法" aria-hidden="true">#</a> 配置方法</h3><p>在src/router/index.js，导入组件名，并在routers里面配置路由</p><ul><li><code>path</code> 为配置的路由地址</li><li><code>name </code>为组件里面定义的name名字，组件里name名字还可以用在调试的时候；</li><li><code>component</code> 为填写导入路由要显示的组件；</li></ul><h3 id="路由显示"><a class="header-anchor" href="#路由显示" aria-hidden="true">#</a> 路由显示</h3><p>在app.vue文件中填写</p><ul><li>路由中转：<code>&lt;router-link to=&#39;/menu&#39;&gt;菜单&lt;/router-link&gt;</code></li><li>用来显示要加载的组件：<code>&lt;router-view/&gt;</code></li></ul><h2 id="三、动态路由"><a class="header-anchor" href="#三、动态路由" aria-hidden="true">#</a> 三、动态路由</h2><h3 id="path路径"><a class="header-anchor" href="#path路径" aria-hidden="true">#</a> path路径</h3><div class="language-js"><pre><code>path<span class="token operator">:</span><span class="token string">&#39;/movie/:id&#39;</span>\npath<span class="token operator">:</span> &#39;<span class="token operator">/</span>shop<span class="token operator">/</span><span class="token operator">:</span>type<span class="token operator">/</span><span class="token operator">:</span>id<span class="token operator">?</span>  <span class="token comment">// 路由后面加问号表示可有可无</span>\n<span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">&#39;/movie/123&#39;</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">&#39;{name:&#39;</span>Movie&#39;<span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">{</span>id<span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n<span class="token comment">// 接收参数：$route.params.id  传递params必须使用路由的name名</span>\n</code></pre></div><h3 id="查询字符串"><a class="header-anchor" href="#查询字符串" aria-hidden="true">#</a> 查询字符串</h3><div class="language-js"><pre><code>path<span class="token operator">:</span><span class="token string">&#39;/movie&#39;</span>\n<span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">&#39;movie?id=123&#39;</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">&#39;{path:&#39;</span>movie<span class="token string">&#39;,query:{id:123}}&#39;</span><span class="token operator">&gt;</span>\n<span class="token comment">// 接收参数：$route.query.id</span>\n</code></pre></div><h3 id="使用props代替-route-params接收参数"><a class="header-anchor" href="#使用props代替-route-params接收参数" aria-hidden="true">#</a> 使用props代替$route.params接收参数</h3><ul><li>单个时</li></ul><div class="language-js"><pre><code><span class="token punctuation">{</span>\n    component<span class="token operator">:</span> User<span class="token punctuation">,</span>\n    props<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// or </span>\n<span class="token punctuation">{</span>\n    component<span class="token operator">:</span> User<span class="token punctuation">,</span>\n    <span class="token function-variable function">props</span><span class="token operator">:</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        id<span class="token operator">:</span> route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>多个时</li></ul><div class="language-js"><pre><code><span class="token punctuation">{</span>components<span class="token operator">:</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\nprops<span class="token operator">:</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//true为支持props，false为不支持;</span>\n</code></pre></div><p>在组件内像接收父组件传值一样传入</p><h3 id="路由参数变化组件不更新"><a class="header-anchor" href="#路由参数变化组件不更新" aria-hidden="true">#</a> 路由参数变化组件不更新</h3><ul><li>解决方案一：</li></ul><div class="language-js"><pre><code>watch<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;$route&#39;</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id <span class="token operator">!==</span> <span class="token keyword">from</span><span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> to<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 重新加载数据</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 方法二：设置路径变化时的处理函数</span>\nwatch<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;$route&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        handler<span class="token operator">:</span> <span class="token string">&#39;init&#39;</span><span class="token punctuation">,</span>\n        immediate<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>解决方案二：</li></ul><p>为了实现这样的效果可以给router-view添加一个不同的key，这样即使是公用组件，只要url变化了，就一定会重新创建这个组件</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>$route.fullpath<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre></div><h2 id="四、路由嵌套"><a class="header-anchor" href="#四、路由嵌套" aria-hidden="true">#</a> 四、路由嵌套</h2><ol><li><p>在父路由填写：children:[{path:&#39;&#39;...}...]</p><p>注意：组件嵌套时，子路由的开头位置不要加 / 路径符</p></li><li><p>填写router-link时，可以直接写路由name名称</p></li><li><p>在父组件里面需要添加&lt;router-view/&gt;标签；要显示的位置</p></li><li><p>使用redirect 实现路由重定向；指向另外一个地址</p></li></ol><div class="language-js"><pre><code><span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>redirect<span class="token operator">:</span><span class="token string">&#39;/account/login&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">&#39;/account&#39;</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="五、router激活的类"><a class="header-anchor" href="#五、router激活的类" aria-hidden="true">#</a> 五、router激活的类</h2><ol><li>在router/index.js文件中指定类名</li></ol><div class="language-js"><pre><code><span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>linkActiveClass<span class="token operator">:</span><span class="token string">&#39;myactive&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>；\n</code></pre></div><ol start="2"><li>给router-link添加属性 active-class=&#39;select&#39;，给select添加样式即可</li><li>active-class被激活的路由，当路由为&#39;/&#39;路径和&#39;/a&#39;路径都会被添加类名，可以使用exact，精确激活，也可以使用exact-active-class=&#39;select&#39;被精确激活</li></ol><h2 id="六、编程式导航"><a class="header-anchor" href="#六、编程式导航" aria-hidden="true">#</a> 六、编程式导航</h2><ol><li><p><code>push</code>：<code>this.$router.push(url)</code>；跳转带历史记录</p></li><li><p><code>replace</code>：<code>this.$router.replace(url)</code>；跳转不带历史记录</p></li><li><p><code>go</code>：<code>this.$router.go(num)</code>；1为前进，-1为后退</p></li><li><p>重复点击路由报错问题</p><p>修改router/index.js文件，添加以下代码</p></li></ol><div class="language-js"><pre><code><span class="token keyword">const</span> originalPush <span class="token operator">=</span> <span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">;</span>\n<span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">originalPush</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="route和-router的区别"><a class="header-anchor" href="#route和-router的区别" aria-hidden="true">#</a> $route和$router的区别</h3><ul><li><code>$route</code> 是“路由信息对象”，包括path，params，hash，query，fullPath，matched，name等路由信息参数。</li><li><code>$router </code>是“路由实例”对象包括了路由的跳转方法，钩子函数等</li></ul><h2 id="七、命名视图"><a class="header-anchor" href="#七、命名视图" aria-hidden="true">#</a> 七、命名视图</h2><p>定义多个router-view，实现一个url地址同时加载多个组件</p><ul><li>在父组件里添加多个router-view，并添加name属性区分</li></ul><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>left<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre></div><ul><li>在index.js文件里，导入父组件，并配置路由，在父组件里定义children，并给孩子定义一个path路径；在显示子组件时，记得带上子组件的path路径</li></ul><div class="language-js"><pre><code>children<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>components<span class="token operator">:</span><span class="token punctuation">{</span><span class="token keyword">default</span><span class="token operator">:</span>组件<span class="token punctuation">,</span>name名<span class="token operator">:</span>组件<span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><p>多个组件需要带s，components；default为不带name名的router-view</p><h2 id="八、路由守卫"><a class="header-anchor" href="#八、路由守卫" aria-hidden="true">#</a> 八、路由守卫</h2><p>可以在路由地址变化的过程中进行一些验证</p><p>场景：登录验证、VIP身份验证、只允许从组件A跳转到组件B,其它组件不允许跳转到组件B</p><p>通过next可以阻止路由跳转，如果不调用next就不会执行下一步</p><h3 id="全局守卫"><a class="header-anchor" href="#全局守卫" aria-hidden="true">#</a> 全局守卫</h3><p>填写位置：router/index.js</p><ul><li>前置</li></ul><div class="language-js"><pre><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\nrouter<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nto<span class="token operator">:</span>目标位置<span class="token punctuation">,</span>   <span class="token keyword">from</span><span class="token operator">:</span>原始位置   <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  必须调用，否则不执行代码\n<span class="token comment">// next()  进入到下一个钩子</span>\n<span class="token comment">// next(false)  中断当前导航</span>\n<span class="token comment">// next(&#39;/&#39;)或者next({path:&#39;&#39;})   跳转到另一个地址</span>\n<span class="token comment">// next({name: &#39;&#39;, params: {}}) params传参需要使用路由的name名字来跳转;</span>\n<span class="token comment">// next(error)  传递给onError()</span>\n</code></pre></div><ul><li>后置（后置守卫没有next）主要处理跳转之后的操作, 不需要拦截</li></ul><div class="language-js"><pre><code>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="路由独享守卫"><a class="header-anchor" href="#路由独享守卫" aria-hidden="true">#</a> 路由独享守卫</h3><p>填写位置：router/index.js</p><div class="language-js"><pre><code><span class="token punctuation">{</span>\n    path<span class="token operator">:</span><span class="token string">&#39;/menu&#39;</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span>menu<span class="token punctuation">,</span>\n    <span class="token function">beforeEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="组件内守卫"><a class="header-anchor" href="#组件内守卫" aria-hidden="true">#</a> 组件内守卫</h3><p>路由生命周期钩子函数</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>\n    <span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 不能访问实例this </span>\n    <span class="token function">beforeRouteUpdate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 当动态路由/foo/:id, id改变时,页面不会有影响, 该方法会被调用</span>\n    <span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">//离开, 一般提示用户未保存修改离开</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li><code>beforeRouteEnter</code>由于不能访问this，可以通过传一个回调给next来访问组件实例,<code>beforeRouteUpdate</code>和<code>Leave</code>不支持传递，因为他们可以访问this</li></ul><div class="language-js"><pre><code><span class="token function">beforeRouteEnter</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">vm</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 通过vm访问组件实例</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="数据获取方式"><a class="header-anchor" href="#数据获取方式" aria-hidden="true">#</a> 数据获取方式</h3><ul><li>导航完成后获取数据</li></ul><div class="language-js"><pre><code><span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nwatch<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;$route&#39;</span><span class="token operator">:</span> <span class="token string">&#39;fetchData&#39;</span> <span class="token comment">// 路由变化之后会重新获取数据</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\nmethods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">async</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">getPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> res<span class="token punctuation">.</span>list\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>导航完成前获取数据</li></ul><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Loading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;element-ui&#39;</span>\n<span class="token function">beforeRouteEnter</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> loading <span class="token operator">=</span> Loading<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 在渲染时的等待界面添加Loading</span>\n    <span class="token function">getPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        loading<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">vm</span> <span class="token operator">=&gt;</span> vm<span class="token punctuation">.</span><span class="token function">fetchData</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\nmethods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> res<span class="token punctuation">.</span>list\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="watch监听路由"><a class="header-anchor" href="#watch监听路由" aria-hidden="true">#</a> watch监听路由</h3><div class="language-js"><pre><code>watch<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">$route</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    $route<span class="token punctuation">.</span><span class="token function">path</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    $route<span class="token operator">:</span> <span class="token string">&#39;fetchData&#39;</span> <span class="token comment">// 当路由发生变化会执行fetchData方法</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\nmethods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">fetchData</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>父组件导入其它组件时，将其他子组件放在components引入；</p><p>在路由中加载其他多个组件时，写多个router-view，在父路由写children定义多个components；</p><h2 id="八、路由实例方法"><a class="header-anchor" href="#八、路由实例方法" aria-hidden="true">#</a> 八、路由实例方法</h2><ul><li>router.addRoutes</li></ul><p>动态添加路由，当后台设置了admin权限之后，还要根据admin权限判断，是否显示或隐藏一部分路由</p><div class="language-js"><pre><code>router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 数组填写路由对象即可;</span>\n</code></pre></div><h2 id="九、vue组件name作用"><a class="header-anchor" href="#九、vue组件name作用" aria-hidden="true">#</a> 九、vue组件name作用</h2><ol><li>当项目使用<code>keep-alive</code>时,可搭配组件name进行缓存过滤</li><li>vue-devtools调试工具里显示的组件名称是由vue中组件name决定的</li><li>在路由跳转传参时，可以不写path，直接写路由名称，并可以传递params参数</li><li>使用递归组件时，需要填写组件的name名字</li></ol><h2 id="十、vue的路由实现"><a class="header-anchor" href="#十、vue的路由实现" aria-hidden="true">#</a> 十、Vue的路由实现</h2><blockquote><p>使用hash模式和history两种模式实现</p></blockquote><ul><li><code>hash</code>模式：在浏览器中符号“#”，#以及#后面的字符称之为hash，用 window.location.hash 读取。特点：hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，hash不会重加载页面。</li><li><code>history</code>模式：history采用HTML5的新特性；且提供了两个新方法： pushState()， replaceState()可以对浏览器历史记录栈进行修改，以及popState事件的监听到状态变更</li></ul><p>注意：使用history需要对后端进行配置</p><p>配置地址：<a href="./[https://router.vuejs.org/zh/guide/essentials/history-mode.html#后端配置例子](https://router.vuejs.org/zh/guide/essentials/history-mode.html#后端配置例子)">vue路由官网</a></p>',90);p.render=function(s,t,p,e,c,l){return n(),a("div",null,[o])};export default p;export{t as __pageData};
