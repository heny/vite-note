import{o as n,c as s,d as a}from"./app.246f1876.js";const t='{"title":"Vue-07 Vuex","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、Vuex","slug":"一、vuex"},{"level":3,"title":"概念","slug":"概念"},{"level":3,"title":"props和data和vuex的区别","slug":"props和data和vuex的区别"},{"level":3,"title":"注意","slug":"注意"},{"level":2,"title":"二、安装","slug":"二、安装"},{"level":2,"title":"三、Vuex成员介绍","slug":"三、vuex成员介绍"},{"level":3,"title":"State","slug":"state"},{"level":3,"title":"Getter","slug":"getter"},{"level":3,"title":"Mutation","slug":"mutation"},{"level":3,"title":"Action","slug":"action"},{"level":3,"title":"model","slug":"model"},{"level":2,"title":"四、插件开发","slug":"四、插件开发"},{"level":2,"title":"添加vuex操作日志","slug":"添加vuex操作日志"},{"level":2,"title":"v-model使用vuex中的state值","slug":"v-model使用vuex中的state值"},{"level":2,"title":"五、vuex数据持久化","slug":"五、vuex数据持久化"}],"relativePath":"src/frontend/Vue/vue-07 Vuex.md","lastUpdated":1615699077430}',p={},o=a('<h1 id="vue-07-vuex"><a class="header-anchor" href="#vue-07-vuex" aria-hidden="true">#</a> Vue-07 Vuex</h1><h2 id="一、vuex"><a class="header-anchor" href="#一、vuex" aria-hidden="true">#</a> 一、Vuex</h2><h3 id="概念"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><ul><li>Vuex是一个专为vue.js开发的状态管理模式，vuex也是单向数据流，当一个状态需要在多个页面中使用，发生改变，建议将数据储存在vuex中，比如登录token；</li></ul><h3 id="props和data和vuex的区别"><a class="header-anchor" href="#props和data和vuex的区别" aria-hidden="true">#</a> props和data和vuex的区别</h3><p>vuex是一个全局的共享数据存储区域，就相当于是一个数据的仓库；</p><p>data是组件中的私有数据，props是父组件与子组件传递数据的；</p><h3 id="注意"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><p>vuex的数据修改后在页面刷新之后就没有了，如果是请求数据建议使用其他的方法；vuex本质上是全局变量，因此刷新则会没了；</p><h2 id="二、安装"><a class="header-anchor" href="#二、安装" aria-hidden="true">#</a> 二、安装</h2><ol><li><p>安装：yarn add vuex</p></li><li><p>在src下面创建一个store文件夹，在里面创建一个index.js文件，并引入</p><div class="language-js"><pre><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    state<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//相当于data</span>\n    mutations<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//相当于method</span>\n    actions<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//可以执行异步操作</span>\n    getters<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">//相当于计算属性,主要是过滤</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>mutations里面定义的函数接收两个形参，第一个为state，第二个是接收到的数据；</p></li><li><p>在main.js文件下引入</p><div class="language-js"><pre><code><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span>   <span class="token comment">//引入文件夹的时候会自动找index.js</span>\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">//放进实例中</span>\n</code></pre></div><p>这里的store引入之后就是全局的$store了，首字母大写的话全局也必须使用大写的首字母；</p><p>只要挂载到了实例中，就可以在全局访问store了；</p><p>在template标签里面访问，不需要加this；</p></li></ol><p><strong>store的对象所拥有的属性</strong></p><ul><li></li></ul><h2 id="三、vuex成员介绍"><a class="header-anchor" href="#三、vuex成员介绍" aria-hidden="true">#</a> 三、Vuex成员介绍</h2><h3 id="state"><a class="header-anchor" href="#state" aria-hidden="true">#</a> State</h3><blockquote><p>保存的状态，如同组件里面写入的data是一样的</p></blockquote><h4 id="获取state值"><a class="header-anchor" href="#获取state值" aria-hidden="true">#</a> 获取state值</h4><ul><li><p>直接获取</p><div class="language-js"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user   <span class="token comment">//获取state值</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>users   <span class="token comment">//获取getters值</span>\n</code></pre></div></li><li><p>使用mapState获取</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>\ncomputed<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        count<span class="token operator">:</span> state<span class="token punctuation">.</span>count\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><h3 id="getter"><a class="header-anchor" href="#getter" aria-hidden="true">#</a> Getter</h3><blockquote><p>相当于vue组件里面的computed，进行计算，返回state值</p></blockquote><h3 id="mutation"><a class="header-anchor" href="#mutation" aria-hidden="true">#</a> Mutation</h3><blockquote><p>vuex里唯一能改变state状态的属性</p></blockquote><p>如果要操作store中的state值，只能通过调用mutations提供的方法，才能操作对应的数据，不推荐直接操作state中的数据，因为万一导致了数据的紊乱，不能快速定位到错误的原因，因为每个组件都可能有操作数据的方法；<strong>mutations就像是一个仓库管理员；</strong></p><h4 id="创建mutation"><a class="header-anchor" href="#创建mutation" aria-hidden="true">#</a> 创建mutation</h4><div class="language-js"><pre><code><span class="token comment">// 定义mutation方法</span>\nmutations<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//第一个参数一定的state</span>\n        state<span class="token punctuation">.</span>count<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>注意：mutations不支持异步操作，异步只能使用action；</p><h4 id="调用mutation"><a class="header-anchor" href="#调用mutation" aria-hidden="true">#</a> 调用mutation</h4><ul><li><p>使用commit调用</p><div class="language-js"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;方法名&#39;</span><span class="token punctuation">,</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li><li><p>使用对象风格提交</p><div class="language-js"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span><span class="token string">&#39;方法名&#39;</span><span class="token punctuation">,</span>  mount<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>使用vuex方法mapMutations提交</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>mapMutations<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>\nmethods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 括号接收一个数组，数组填写方法名字即可,使用this.increment调用</span>\n    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    \n    <span class="token comment">// 如果需要更换mutation定义方法的名字</span>\n    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span>add<span class="token operator">:</span> <span class="token string">&#39;increment&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 将increment修改成add，在组件里面使this.add即可直接调用increment方法；</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><h4 id="工作中建议"><a class="header-anchor" href="#工作中建议" aria-hidden="true">#</a> 工作中建议</h4><p>由于mutations是唯一管理仓库的成员，因此建议创建一个types.js的文件夹，用于专门管理mutation函数名字</p><ol><li><p>新建types.js</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SET_COUNT</span> <span class="token operator">=</span> <span class="token string">&#39;SET_COUNT&#39;</span>\n</code></pre></div></li><li><p>在需要定义mutations的函数里面引入该名字</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> types <span class="token keyword">from</span> <span class="token string">&#39;./types&#39;</span> <span class="token comment">// 使用as语法将*重命名为types</span>\nmutations<span class="token operator">:</span> <span class="token punctuation">{</span>\n    types<span class="token punctuation">.</span><span class="token constant">SET_COUNT</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ol><h3 id="action"><a class="header-anchor" href="#action" aria-hidden="true">#</a> Action</h3><blockquote><p>与mutation使用方法雷同，action想要修改state状态，需要在action里面调用mutation事件</p></blockquote><p>action可以包含任意异步操作，一般使用与含有回调函数的事件</p><h4 id="创建action"><a class="header-anchor" href="#创建action" aria-hidden="true">#</a> 创建action</h4><div class="language-js"><pre><code>actions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 接收一个context，里面有commit，用来触发mutation事件, 第二个参数为传入的值</span>\n    <span class="token keyword">async</span> <span class="token function">setIncrement</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 使用解构方式</span>\n    <span class="token keyword">async</span> <span class="token function">setIncrement</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>commit<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>action函数接受一个与store实例具有相同方法和属性的<code>context</code>对象，因此可以调用<code>commit</code>方法，提交一个mutation，当然也可以调用<code>dispatch</code>，也可以通过<code>context.state</code>和<code>context.getters</code>来获取当前状态</p><h4 id="调用action"><a class="header-anchor" href="#调用action" aria-hidden="true">#</a> 调用action</h4><ul><li><p>dispatch触发</p><div class="language-js"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>使用mapActions触发</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>mapActions<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>\nmethods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;setIncrement&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><h3 id="model"><a class="header-anchor" href="#model" aria-hidden="true">#</a> model</h3><blockquote><p>model包含五个方法，分别是state、mutations、actions、getters、model，由于项目太大，因此可以使用model可以创建模块，每个模块都包含这五个方法</p></blockquote><h4 id="基本使用方法"><a class="header-anchor" href="#基本使用方法" aria-hidden="true">#</a> 基本使用方法</h4><ol><li><p>创建store/login.js</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    state<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    mutations<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    actions<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    getters<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>在store/index.js引入</p><div class="language-js"><pre><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;Vuex&#39;</span>\n<span class="token keyword">import</span> login <span class="token keyword">from</span> <span class="token string">&#39;./login&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    state<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    getters<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    mutations<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    actions<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    model<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 里面放其他的模块即可</span>\n        login<span class="token operator">:</span> login\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ol><h2 id="四、插件开发"><a class="header-anchor" href="#四、插件开发" aria-hidden="true">#</a> 四、插件开发</h2><blockquote><p>Vuex.Store对象中，接收一个plugins属性，值是一个数组，里面放置的都是函数</p></blockquote><p>简单的开发插件例子：</p><div class="language-js"><pre><code><span class="token comment">// 插件接收一个store作为形参</span>\n<span class="token keyword">const</span> <span class="token function-variable function">myPlugin</span> <span class="token operator">=</span> <span class="token parameter">store</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 当store初始化时调用</span>\n    store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 每次mutation之后调用</span>\n        <span class="token comment">// mutation的格式为：{type, payload}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>使用：</p><div class="language-js"><pre><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>myPlugin<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>简单的本地储存开发例子：</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token parameter">store</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在初始化时（页面刷新），如果store有数据则替换原有的store;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>localStore<span class="token punctuation">.</span>_vuex<span class="token punctuation">)</span> state<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStore<span class="token punctuation">.</span>_vuex<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        localStore<span class="token punctuation">.</span>_vuex <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="添加vuex操作日志"><a class="header-anchor" href="#添加vuex操作日志" aria-hidden="true">#</a> 添加vuex操作日志</h2><p>store/index.js常用</p><div class="language-js"><pre><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>\n<span class="token keyword">import</span> createLogger <span class="token keyword">from</span> <span class="token string">&#39;vuex/dist/logger&#39;</span>  <span class="token comment">//用于操作之后可以返回一个日志，记录了信息;</span>\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  actions<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  getters<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  state<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  mutations<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  strict<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 开启严格模式，保证状态变更是由mutation发起的，注意生产环境不能用</span>\n  plugins<span class="token operator">:</span> debug <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="v-model使用vuex中的state值"><a class="header-anchor" href="#v-model使用vuex中的state值" aria-hidden="true">#</a> v-model使用vuex中的state值</h2><div class="language-js"><pre><code><span class="token operator">&lt;</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&#39;message&#39;</span><span class="token operator">&gt;</span>\ncomputed<span class="token operator">:</span> <span class="token punctuation">{</span>\n    message<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>message\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">set</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;updateMessage&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="五、vuex数据持久化"><a class="header-anchor" href="#五、vuex数据持久化" aria-hidden="true">#</a> 五、vuex数据持久化</h2><ol><li><p>安装：<code>npm i vuex-persistedstate</code></p></li><li><p>修改<code>store</code>的入口文件</p><div class="language-js"><pre><code><span class="token keyword">import</span> createPersistedState <span class="token keyword">from</span> <span class="token string">&#39;vuex-persistedstate&#39;</span>\n<span class="token keyword">const</span> persistedStateOpt <span class="token operator">=</span> <span class="token punctuation">{</span>\n    storage<span class="token operator">:</span> window<span class="token punctuation">.</span>localStorage <span class="token comment">// 默认为localStorage, 可以配置sesstionStorage</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">createPersistedState</span><span class="token punctuation">(</span>persistedStateOpt<span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>不需要持久化的数据</p><p>该插件只能是包含某个持久化的数据，没有不包含的某个持久化数据</p><div class="language-js"><pre><code><span class="token keyword">const</span> persistedStateOpt <span class="token operator">=</span> <span class="token punctuation">{</span>\n    paths<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;theme&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;menu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;demo.title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 如果想持久化一个模块，如：theme、menu里的所有数据或&#39;demo.title&#39;。它跟reducer是不能共用的，配置了reducer，paths失效。</span>\n    <span class="token function-variable function">reducer</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果要选择持久化部分数据，请把reducer放开。这个方法用于部分数据持久化。</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token comment">// 需要持久化的对象，对象为空为所有数据都不持久化</span>\n            menu<span class="token punctuation">,</span>  <span class="token comment">// 如果放置一个模块，这个模块里的getters、actions和mutations都会在storage里（是一个空对象），paths则不会有getters、actions和mutations</span>\n            demo<span class="token operator">:</span> <span class="token punctuation">{</span>\n                title<span class="token operator">:</span> val<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>title\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>手写不需要持久化的数据</p><div class="language-js"><pre><code><span class="token comment">// 不需要持久化的数据</span>\n<span class="token keyword">const</span> notPersistedState <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token comment">// 部分数据需要持久化</span>\n<span class="token comment">// 当写部分数据时，需要在不需要持久化的数组填写模块名</span>\n<span class="token keyword">const</span> partData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> \n<span class="token keyword">const</span> persistedStateOpt <span class="token operator">=</span> <span class="token punctuation">{</span>\n  storage<span class="token operator">:</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">,</span>\n  paths<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>modules<span class="token punctuation">)</span> <span class="token comment">// 取所有的模块名字并过滤掉</span>\n      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>notPersisted<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>partData\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ol>',58);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
