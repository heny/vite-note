import{o as n,c as a,d as s}from"./app.246f1876.js";const p='{"title":"js-02 javascript数据类型篇","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、typeof操作符(检测数据类型)","slug":"一、typeof操作符-检测数据类型"},{"level":2,"title":"二、Undefined类型","slug":"二、undefined类型"},{"level":2,"title":"三、Null类型","slug":"三、null类型"},{"level":2,"title":"四、Boolean类型","slug":"四、boolean类型"},{"level":2,"title":"五、Number类型","slug":"五、number类型"},{"level":2,"title":"六、String类型","slug":"六、string类型"},{"level":2,"title":"七、复杂数据类型（引用类型）","slug":"七、复杂数据类型（引用类型）"},{"level":3,"title":"object（对象）","slug":"object（对象）"},{"level":3,"title":"Array（数组）","slug":"array（数组）"},{"level":3,"title":"function函数","slug":"function函数"},{"level":3,"title":"关于Javascript中数字的部分知识总结：","slug":"关于javascript中数字的部分知识总结："},{"level":2,"title":"三、检测数据类型：","slug":"三、检测数据类型："},{"level":3,"title":"instanceof 检测数据类","slug":"instanceof-检测数据类"},{"level":3,"title":"toString.call","slug":"tostring-call"},{"level":3,"title":"constructor判断（扩展）","slug":"constructor判断（扩展）"},{"level":3,"title":"使用原型链判断是否是类型的原型；","slug":"使用原型链判断是否是类型的原型；"},{"level":2,"title":"八、基本包装数据类型","slug":"八、基本包装数据类型"},{"level":2,"title":"九、堆和栈","slug":"九、堆和栈"},{"level":2,"title":"十、new操作符","slug":"十、new操作符"},{"level":2,"title":"十一、运算符","slug":"十一、运算符"},{"level":3,"title":"数字运算符：","slug":"数字运算符："},{"level":3,"title":"赋值运算符：","slug":"赋值运算符："},{"level":3,"title":"比较运算符：","slug":"比较运算符："},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符"},{"level":2,"title":"十二、位运算","slug":"十二、位运算"},{"level":3,"title":"用\'|\'取整","slug":"用-取整"},{"level":3,"title":"用>>取半","slug":"用-取半"},{"level":3,"title":"用<<加倍","slug":"用-加倍"},{"level":3,"title":"用\'^\'两值交换","slug":"用-两值交换"},{"level":3,"title":"用&判断奇数","slug":"用-判断奇数"},{"level":3,"title":"用\'~\'判断项是否存在","slug":"用-判断项是否存在"},{"level":3,"title":"用\'+\'快速转换数字类型；","slug":"用-快速转换数字类型；"},{"level":3,"title":"用 ** 表示平方","slug":"用-表示平方"},{"level":2,"title":"十三、隐式转换","slug":"十三、隐式转换"},{"level":3,"title":"连等运算符","slug":"连等运算符"},{"level":2,"title":"十四、json","slug":"十四、json"},{"level":2,"title":"高频面试题：","slug":"高频面试题："}],"relativePath":"src/frontend/Javascript/js-02 javascript数据类型篇.md","lastUpdated":1615699077382}',t={},e=s('<h1 id="js-02-javascript数据类型篇"><a class="header-anchor" href="#js-02-javascript数据类型篇" aria-hidden="true">#</a> js-02 javascript数据类型篇</h1><p>ECMAScript中有5种基本数据类型：Undefined、Null、Boolean、Number、String</p><p>三种基本包装数据类型：String、Number、Boolean</p><p>有一种复杂数据类型：Object；</p><p><strong>弱类型语言：</strong> javascript是弱类型语言，在声明时是不需要定义类型的，变量的类型就是其值的类型；</p><p>缺点：在不确定的地方就会发生类型转换，无法确定类型，必须要掌握类型转换的原理；</p><h2 id="一、typeof操作符-检测数据类型"><a class="header-anchor" href="#一、typeof操作符-检测数据类型" aria-hidden="true">#</a> 一、typeof操作符(检测数据类型)</h2><ol><li>对一值使用了typeof操作符，会返回以下某个字符串；</li></ol><p>&#39;undefined&#39; //如果这个值未定义</p><p>&#39;boolean&#39; // 如果是布尔值</p><p>&#39;string&#39; // 如果是字符串</p><p>&#39;number&#39; // 如果是数值</p><p>&#39;object&#39; // 如果值是对象或null</p><p>&#39;function&#39; // 如果是函数;</p><p>例子:</p><div class="language-js"><pre><code><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> message<span class="token punctuation">)</span> <span class="token comment">// &#39;string&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">95</span><span class="token punctuation">)</span> <span class="token comment">// &#39;number&#39;</span>\n</code></pre></div><ol start="2"><li>typeof操作符的操作数可以是变量，也可以是字面量</li><li>typeof不能准确判断变量是什么类型，null会返回object，因为null的定义是空对象指针；</li></ol><p>常使用的环境：</p><p>判断函数是否有传值：typeof val == &#39;undefined&#39;；val是形参；</p><p>判断函数传值的类型：typeof val == &#39;number&#39;；</p><p>因为检测数据类型时，输入的结果是字符串，所以需要加引号；typeof (typeof a) 检测传入的a的类型的类型；</p><h2 id="二、undefined类型"><a class="header-anchor" href="#二、undefined类型" aria-hidden="true">#</a> 二、Undefined类型</h2><ol><li>Undefined类型只有一个值，即特殊的undefined，</li><li>在使用var声明变量时，没有赋值，就是undefined；</li><li>函数没有明确返回值，如果接受了，结果是undefined；</li></ol><p>注意：即使不声明，使用typeof也会返回&#39;undefined&#39;；</p><div class="language-js"><pre><code><span class="token keyword">var</span> name<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name<span class="token punctuation">)</span> <span class="token comment">// &#39;undefined&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> age<span class="token punctuation">)</span>  <span class="token comment">// &#39;undefined&#39;</span>\n</code></pre></div><h2 id="三、null类型"><a class="header-anchor" href="#三、null类型" aria-hidden="true">#</a> 三、Null类型</h2><ol><li>Null类型是第二个只有一个值的数据类型，这个特殊的值是null；</li><li>null表示一个空对象指针，因此检测null的数据类型时，会返回object；</li><li>如果需要保存的值类型为对象，建议赋值为null；</li></ol><p>注意：判断undefined == null时，结果为true，因为undefined值是派生自null值的，无论在什么情况下都没有必要把一个变量的值显式地设置为undefined；</p><p>面试题：</p><p>（1）undefined和null的区别：</p><p>null表示值为空，但是是object对象，</p><p>undefined表示变量没有初始化，值为空缺；</p><p>null ==undefined // 因为都为空，不对比类型；</p><p>null === undefined //false 类型不同</p><p>（2）null 是对象吗？</p><p>null的返回值是object，但是null不是对象，而是基本数据类型的一种；</p><h2 id="四、boolean类型"><a class="header-anchor" href="#四、boolean类型" aria-hidden="true">#</a> 四、Boolean类型</h2><ol><li>boolean类型是使用最多的类型，只有两个值：true(真)和false(假)，在ECMAScript中是区分大小写的，True和False都不是boolean类型，只是标识符；</li><li>boolean类型的转换规则</li></ol><p>数据类型 转换true的值 转换false的值</p><p>Boolean true false</p><p>String 任何非空字符串 &#39;&#39;(空字符串)</p><p>Number 任何非零数值 0和NaN</p><p>Object 任何对象 null</p><p>Undefined 不适用转换true undefined</p><h2 id="五、number类型"><a class="header-anchor" href="#五、number类型" aria-hidden="true">#</a> 五、Number类型</h2><ol><li>最基本的数值字面量格式是十进制整数，</li></ol><p>八进制字面值第一位必须是0且后面的值必须小于8，否则还是十进制；</p><p>十六进制以0x开头，十六进制一般用在表示颜色上；</p><ol start="2"><li><p>浮点数值：在表示0.1时，通常可以直接.1，去掉0，浮点数值的最高精度是17位小数，0.1加0.2的结果不是0.3，而是0.300000000000000004，这是使用基于IEEE754数值的浮点计算的通病，所有语言如此，永远不要测试某个特点的浮点数值；</p></li><li><p>数值范围：Number.MIN_VALUE 最小值，这个值是5e-324，</p><pre><code>           Number.MAX_VALUE   最大值，这个值是1.7976931348623157e+308\n          Infinity  无穷大    -Infinity  无穷小，isFinite() 判断是还是无穷数；\n</code></pre></li></ol><p>e的表示法：3.125e7 == 31250000，实际是3.125乘以10的7次幂；0.0000003表示3e-7；</p><ol start="4"><li>NaN</li></ol><p>（1）即非数值，是一个特殊值，任何数值除以非数值会返回NaN，不会影响其他代码的执行；</p><p>（2）NaN与任何值都不相等，NaN不等于NaN；</p><p>（3）判断是不是NaN，使用isNaN，在判断时会尝试将这个值转换为数值再进行判断；isNaN在对对象调用时，会首先调用对象的valueOf方法，然后再确定该方法返回的值是否可以转换为数值，如果不能，则基于这个返回值再调用toString()方法；</p><div class="language-js"><pre><code><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>  <span class="token comment">//true</span>\n<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">//false</span>\n<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//false</span>\n<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//true</span>\n<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">// false  (true被转换为1)</span>\n</code></pre></div><ol start="5"><li>数值的转换 （1）Number()、parseInt()、parseFloat()，第一个函数可以用于任何数据类型，另外两个函数则专门用于把字符串转换成数值；</li></ol><p>（2）Number转换规则</p><ul><li><p>如果是boolean值，true为1，false为0</p></li><li><p>如果是数字，直接返回传入的数值；</p></li><li><p>如果是null，返回0</p></li><li><p>如果是undefined，返回NaN，特殊值</p></li><li><p>如果是字符串,遵循以下规则</p><ul><li>如果字符串只包含数字，&#39;1&#39;转换1，&#39;011&#39;转换为11；</li><li>如果包含有效浮点格式，如：&#39;1.1&#39;，则将转换对应的浮点数值；</li><li>如果字符串包含有效十六进制，则将其转换相同大小的十进制</li><li>如果字符串是空的，转换为0</li><li>如果字符串除以上规则，转换为NaN；</li></ul></li><li><p>如果是对象，则调用对象的valueOf方法，如果转换结果是NaN，则调用对象的toString方法；</p></li></ul><div class="language-js"><pre><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;00011&#39;</span><span class="token punctuation">)</span> <span class="token comment">//11</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\n</code></pre></div><p>注意：空的数组转换为0，空的对象转换为NaN； 一般在需要转换的值前面带上+符，可以直接转换，+[]，转换为0；</p><p>（3）parseInt转换规则</p><p>由于Number()函数在转换字符串时比较复杂而且不够合理，因此在处理整数的时候更常用的是parseInt函数；</p><ul><li><p>parseInt会忽略空格，直到找到第一个非空格字符，如果第一个不是数字或者负号，则返回NaN；</p></li><li><p>parseInt在转换查找时，如果第一个是数字，则会继续解析第二个字符，直到后续字符遇到一个非数字字符，如：&#39;12px&#39;转换为12；</p></li><li><p>在遇到小数点时，也不会解析，需要使用parseFloat；</p></li><li><p>parseInt转换空字符串时，返回NaN，Number转换空字符串返回0；</p></li><li><p>parseInt有第二个参数，以什么进制来转换；</p><ul><li>如：由于16进制是以0x开头的,如果没有0x，&#39;af&#39;转换为NaN，如果是parseInt(&#39;af&#39;,16)，则转换是175；</li><li>&#39;070&#39;是以0开头，转换是以8进制，则是56，如果是parseInt(&#39;070&#39;,10)，则是70；</li></ul></li></ul><p>（4）parseFloat转换规则</p><ul><li>主要是解决parseInt不能识别小数点而诞生的；</li><li>parseFloat只解析10进制，如果是0xA，则解析是0；</li></ul><ol start="6"><li>额外的方法：toFxied(n)，小数点后保留多少位；</li></ol><p>toExponential(n)，返回指数表示法（也称e表示法）；</p><p>toPrecision(n)，根据要处理的数值决定使用toFxied还是toExponential；</p><div class="language-js"><pre><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//&quot;1e+2&quot;</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//&quot;99&quot;</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//&quot;99.0&quot;</span>\n</code></pre></div><p>``|0<code></code> 可以直接取整，比如：12.3|0 结果是12；</p><h2 id="六、string类型"><a class="header-anchor" href="#六、string类型" aria-hidden="true">#</a> 六、String类型</h2><ol><li>String类型用于表示由零或多个16位Unicode字符组成的字符序列，字符串可以由双引号(&quot;&quot;)，或单引号(&#39;&#39;)表示；</li><li>字符串的长度可以使用length属性来读取；</li><li>转换为字符串：</li></ol><p>（1）使用toString()方法转换，可以传入的参数有2-36之间，一般传入2. 8. 10. 16；</p><p>（2）String()转换规则</p><ul><li>如果值有toString()方法，则调用该方法并返回相应的结果；</li><li>如果值是null或undefined，则返回&#39;null&#39;或&#39;undefined&#39;；</li></ul><p>注意：<code>null</code>和<code>undefined</code>值没有<code>toString()</code>这个方法，需要使用<code>String()</code>来转换；</p><p>整数直接<code>.toString()</code>会报错，可以添加小括号转换； (1)<code>.toString()</code>；</p><p>如果是对象<code>.toString()</code>，转换成<code>[object Object]</code>；</p><h2 id="七、复杂数据类型（引用类型）"><a class="header-anchor" href="#七、复杂数据类型（引用类型）" aria-hidden="true">#</a> 七、复杂数据类型（引用类型）</h2><p>Object（对象）、Array（数组）、function（函数）</p><p>引用类型任何数据类型都可以储存；</p><p>引用类型的地址存储在堆里面，当别的值修改了原始值之后，都会被修改；</p><p>基本类型存储的是值，引用类型存储的是地址（指针）</p><h3 id="object（对象）"><a class="header-anchor" href="#object（对象）" aria-hidden="true">#</a> object（对象）</h3><ol><li><p>以花括号的形式为对象；</p></li><li><p>万物皆对象，页面中的任何一个元素都是对象，包括document,window,对象就相当于地球</p></li><li><p>创建对象的两个方式：</p><p>a. 实例化方式：var 变量=new Object()；输出是一个空的花括号，表示对象；</p><p>b. 字面量：var 变量 = {}；</p><p>c. Object.create(null) 也可以创建一个新对象；</p></li><li><p>对象中以键值对表示存储值，键名：键值；也可以叫属性名：属性值；多个键名之间用逗号隔开；</p></li><li><p>设置对象的元素值：对象名.键名 = 键值； 一般称作键值对；</p></li><li><p>获取值的方法：①变量名.键名；②变量名[&quot;&quot;]</p></li></ol><h3 id="array（数组）"><a class="header-anchor" href="#array（数组）" aria-hidden="true">#</a> Array（数组）</h3><ol><li><p>创建方式：</p><p>a. 实例化：var 变量 = new Array()；以中括号形式为数组，一个值表示数组的长度，多个值表示数组的数据；</p><p>如果是一个引号引起来的，则是单个数组；</p><p>b. 字面量：var 变量 = [ ]</p></li><li><p>数组的长度是下标加一；</p></li><li><p>数组的长度可读可写，可以删除数组的数据；</p></li><li><p>数组不能用typeof来判断是不是数组，判断的是object，判断是不是数组可以用Array.isArray(参数)来判断，返回结果是布尔型；IE9以上支持判断；</p></li><li><p>数组可以储存所有类型，也可以存储数组和对象；</p></li><li><p>设置数组：数组名[索引] = 值</p></li><li><p>获取数据：数组名[索引]；</p></li></ol><p>面试题：</p><div class="language-js"><pre><code><span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ary<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span>\n</code></pre></div><p>数组的长度是6，没有声明的为<code>undefined</code>；</p><h3 id="function函数"><a class="header-anchor" href="#function函数" aria-hidden="true">#</a> function函数</h3><p><code>function ()</code>; 事件处理函数；空格后面可以设置函数名；</p><p>调用函数：函数名()；加小括号是直接执行，事件不需要加小括号；</p><p><strong>总结:</strong></p><p>基本数据类型：Number，String，Boolean，Undefined，Null</p><p>引用数据类型：Object，Array，Function，RegExp，Date，Error</p><p>全局数据类型：Math</p><h3 id="关于javascript中数字的部分知识总结："><a class="header-anchor" href="#关于javascript中数字的部分知识总结：" aria-hidden="true">#</a> 关于Javascript中数字的部分知识总结：</h3><ol><li>Javascript中，由于其变量内容不同，变量被分为基本数据类型变量和引用数据类型变量。基本类型变量用八字节内存，存储基本数据类型(数值、布尔值、null和未定义)的值，引用类型变量则只保存对对象、数组和函数等引用类型的值的引用(即内存地址)。</li><li>JS中的数字是不分类型的，也就是没有byte/int/float/double等的差异。</li><li>基本类型：null，undefined，number，boolean；string比较特殊！！！ 引用类型 Obeject,function，array；</li></ol><p>计算机最小的计量单位是bit,翻译为位</p><p>8bit = 1byte,byte翻译为字节</p><p>所以32bit = 4 byte</p><p>八字节为64位</p><h2 id="三、检测数据类型："><a class="header-anchor" href="#三、检测数据类型：" aria-hidden="true">#</a> 三、检测数据类型：</h2><h3 id="instanceof-检测数据类"><a class="header-anchor" href="#instanceof-检测数据类" aria-hidden="true">#</a> instanceof 检测数据类</h3><p>（1）检测前面的变量是不是某个类型，是的话返回true，不是返回false 如果是new 出来的函数，可以使用这个判断。</p><p>（2）检测类型时类型首字母需要大写；</p><p>（3）检测基本数据类型时需要new实例化，复杂数据类型不需要new实例化；必须要new Number()</p><p>（4）数组看是不是Object对象时，返回值是true，但是Array大类的；</p><p>示例：<code>console.log(obj instanceof Object)</code>；</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span> <span class="token comment">// false 必须new实例化</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="tostring-call"><a class="header-anchor" href="#tostring-call" aria-hidden="true">#</a> toString.call</h3><div class="language-js"><pre><code><span class="token string">&#39;[object 类型]&#39;</span> <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>形参<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">types</span> <span class="token operator">=</span> <span class="token parameter">type</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">//或者：</span>\n<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span>  <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>object Math<span class="token punctuation">]</span>\n<span class="token keyword">const</span> <span class="token function-variable function">type</span> <span class="token operator">=</span> <span class="token parameter">type</span> <span class="token operator">=&gt;</span> <span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 转换的函数</span>\n<span class="token keyword">const</span> types <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">)</span>\n<span class="token comment">// 这个方法始终将Object.prototype.toString作为函数传递给call,等价于:Object.prototype.toString.call();</span>\n</code></pre></div><p><strong>理解:</strong></p><ol><li>Object.prototype.toString.call, call前面的代码就是this指向;</li><li>因为bind是返回绑定的函数, 因此将toString函数放进去作为第一个参数;</li><li>由于call需要一个方法来调用, 因此将Function.prototype作为前缀;</li></ol><p>改造:</p><div class="language-js"><pre><code><span class="token function">types</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// [object String];    直接使用types来判断;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">t</span> <span class="token operator">=</span> <span class="token parameter">type</span> <span class="token operator">=&gt;</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="constructor判断（扩展）"><a class="header-anchor" href="#constructor判断（扩展）" aria-hidden="true">#</a> constructor判断（扩展）</h3><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span>  <span class="token comment">// true</span>\n<span class="token class-name">通过constructor判断的，Math</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Math       <span class="token comment">//false，在javascript中，没有Math的构造函数，Math的构造函数在Object上，可以使用toString.call来判断；</span>\n</code></pre></div><p>不推荐此方法，因为</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\na<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">;</span> <span class="token comment">//true</span>\n</code></pre></div><p>如果a=null，则报错;</p><h3 id="使用原型链判断是否是类型的原型；"><a class="header-anchor" href="#使用原型链判断是否是类型的原型；" aria-hidden="true">#</a> 使用原型链判断是否是类型的原型；</h3><div class="language-js"><pre><code>reg<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">RegExp</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n</code></pre></div><h2 id="八、基本包装数据类型"><a class="header-anchor" href="#八、基本包装数据类型" aria-hidden="true">#</a> 八、基本包装数据类型</h2><ol><li>javascript中有三个基本包装数据类型：String、Number、Boolean；</li></ol><p>每当读取一个基本类型值的时候，后台就会创建一个对应的基本包装类型的对象，从而让我们能够调用一些方法来操作这些数据，其实String、Number、Boolean三种类型的值在读取的时候由于是基本包装类型（也可以称是引用类型），因此有属性和方法，可以使用点操作符，读取不到的属性返回undefined，而undefind和null两种类型会直接报错；</p><p>具体了解查看：高程118页；</p><ol start="2"><li>基本包装数据类型的特征：</li></ol><ul><li>可以使用new 操作符，当使用new操作符之后的类型使用typeof检测之后是object，但是可以使用instanceof来检测；</li></ul><ol start="3"><li>使用new和不使用new的特点 引用类型与基本包装类型的主要区别就是对象的生存期。使用 new 操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中。而自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁。</li></ol><h2 id="九、堆和栈"><a class="header-anchor" href="#九、堆和栈" aria-hidden="true">#</a> 九、堆和栈</h2><ol><li>基本数据类型，储存在栈里面，两个基本数据类型是相等的</li><li>引用数据类型，地址存储在栈里面，数据存在堆里面，调用时先从栈里获取地址，再从堆中获取数据，两个复杂数据类型是不相等的；堆里面反复存数据会导致内存占满；</li></ol><h2 id="十、new操作符"><a class="header-anchor" href="#十、new操作符" aria-hidden="true">#</a> 十、new操作符</h2><ol><li><p>new操作符创建出来的一定是一个空对象；</p></li><li><p>如果在构造函数里面，显式写了一个返回值，会发生的情况？</p></li></ol><p>如果返回的不是一个对象，相当于没写，会被忽略，也就是说如果在构造函数中显式的返回了一个不是对象的数据类型，最后得到的还是对象，如果是对象，会把设置的对象返回出来</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>age<span class="token operator">:</span>age<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&#39;lishi&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>\ncar<span class="token punctuation">.</span>name  <span class="token comment">//undefined  因为返回没有name;</span>\ncar   <span class="token comment">// {age:18} 并且不能标识具体谁创建的;</span>\n\n<span class="token comment">// 第二种情况,返回不是对象;</span>\n<span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n    <span class="token keyword">return</span> age\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&#39;lishi&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>\ncar  <span class="token comment">// Car {name: &#39;lishi&#39;}   return 没有起作用;</span>\n</code></pre></div><ol start="3"><li>使用new操作符执行了哪些过程 <ul><li>创建一个空对象</li><li>将构造函数的作用域赋给新对象（因此this就指向了这个新对象）</li><li>执行构造函数中的代码（为这个新对象添加属性）；</li><li>返回新对象；</li></ul></li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>  <span class="token comment">//将第一个函数截取;</span>\n    obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> fn<span class="token punctuation">.</span>prototype\n    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj\n    <span class="token comment">//一般new一个函数,函数可以填写return,如果return了就得将函数返回值保存并返回,函数必须是对象,上面第2点已经讲过;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 实例</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span>\n<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>  <span class="token comment">// fn{age:18}</span>\n<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fn</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>  <span class="token comment">//fn{age:18}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> obj2<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">//true</span>\n</code></pre></div><p>增进问题</p><p>在使用new操作符时，如果没有参数，括号是可以省略的。</p><h2 id="十一、运算符"><a class="header-anchor" href="#十一、运算符" aria-hidden="true">#</a> 十一、运算符</h2><p>js赋值运算符是从右往左的，var a = 1，把1的值赋给a； &#39;.&#39;是优先级最高的运算符；</p><h3 id="数字运算符："><a class="header-anchor" href="#数字运算符：" aria-hidden="true">#</a> 数字运算符：</h3><p>+ - * / %(取余) ++(自增) --(自减)</p><p>+ 号遇到字符串变成拼接；</p><p>++(--) 在前，先运算，后赋值；</p><p>++(--) 在后，先赋值，后运算；</p><div class="language-js"><pre><code><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\nj<span class="token operator">=</span>i<span class="token operator">++</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">;</span>\nj<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">++</span><span class="token punctuation">;</span>\nj<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>\n\n\n<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\nb<span class="token operator">=</span><span class="token operator">++</span>a <span class="token operator">+</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>\nb<span class="token operator">=</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token operator">++</span><span class="token number">2</span><span class="token punctuation">;</span>\nb<span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="赋值运算符："><a class="header-anchor" href="#赋值运算符：" aria-hidden="true">#</a> 赋值运算符：</h3><p>= += -= *= /= %=</p><p>a+=2 为 a=a+2;</p><p>一个等号为赋值，</p><p>赋值运算表达式：由赋值运算符链接起来的叫赋值表达式；</p><h3 id="比较运算符："><a class="header-anchor" href="#比较运算符：" aria-hidden="true">#</a> 比较运算符：</h3><p>&gt; &gt;= &lt; &lt;= !=(不等于) !==(绝对不等于) ==(等于) ===(绝对等于)</p><p>&#39;!=&#39; 不等于只看值是否相同，不看类型</p><p>&#39;!==&#39; 绝对不等于除了看值不同，还看类型是否不同；</p><p>比较运算符的输出结果是boolear类型</p><p>&quot;two&quot;＞&quot;three&quot;//结果为true &quot;tw&quot;在字母表中的索引大于&quot;th&quot;</p><h3 id="逻辑运算符"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><p>&amp;&amp;(与--并且) ||(或---或者) !(非--取反或取非)</p><p>&amp;&amp; 只要有一个为假，就为假；</p><p>|| 只要有一个为真，就为真；</p><p>!表达式： 表达式1的结果是true，整个结果为false</p><pre><code>            表达式1的结果是false，整个结果为true；\n</code></pre><p>(!&quot;&quot;)为true 空字符串为假，取非就为真</p><h2 id="十二、位运算"><a class="header-anchor" href="#十二、位运算" aria-hidden="true">#</a> 十二、位运算</h2><p>位运算适用于32位整数，所以精度可能会丢失</p><h3 id="用-取整"><a class="header-anchor" href="#用-取整" aria-hidden="true">#</a> 用&#39;|&#39;取整</h3><div class="language-js"><pre><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1.5</span>\nnum <span class="token operator">=</span> num<span class="token operator">|</span><span class="token number">0</span>  <span class="token comment">// 1</span>\n</code></pre></div><h3 id="用-取半"><a class="header-anchor" href="#用-取半" aria-hidden="true">#</a> 用&gt;&gt;取半</h3><div class="language-js"><pre><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">4</span>\nnum <span class="token operator">=</span> num<span class="token operator">&gt;&gt;</span><span class="token number">1</span> <span class="token comment">//2</span>\n</code></pre></div><h3 id="用-加倍"><a class="header-anchor" href="#用-加倍" aria-hidden="true">#</a> 用&lt;&lt;加倍</h3><div class="language-js"><pre><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">2</span>\nnum <span class="token operator">=</span> num<span class="token operator">&lt;&lt;</span><span class="token number">2</span>  <span class="token comment">//4</span>\n</code></pre></div><h3 id="用-两值交换"><a class="header-anchor" href="#用-两值交换" aria-hidden="true">#</a> 用&#39;^&#39;两值交换</h3><div class="language-js"><pre><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>\na <span class="token operator">^=</span> b<span class="token punctuation">;</span>\nb <span class="token operator">^=</span> a\na <span class="token operator">^=</span> b\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  <span class="token comment">// 2 1;</span>\n</code></pre></div><h3 id="用-判断奇数"><a class="header-anchor" href="#用-判断奇数" aria-hidden="true">#</a> 用&amp;判断奇数</h3><div class="language-js"><pre><code><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">4</span>\nn <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// true 奇数</span>\nm <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">//false 偶数</span>\n</code></pre></div><h3 id="用-判断项是否存在"><a class="header-anchor" href="#用-判断项是否存在" aria-hidden="true">#</a> 用&#39;~&#39;判断项是否存在</h3><blockquote><p>~的特性是：操作数的负值-1；~12为-13；</p></blockquote><div class="language-js"><pre><code><span class="token keyword">let</span> firstname <span class="token operator">=</span> <span class="token string">&#39;ma&#39;</span>\n<span class="token keyword">let</span> fullname <span class="token operator">=</span> <span class="token string">&#39;jack ma&#39;</span>\n<span class="token operator">~</span>fullname<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>firstname<span class="token punctuation">)</span>  <span class="token comment">// true</span>\n</code></pre></div><p>由于负数-1，找不到是-1，-1就是0了</p><h3 id="用-快速转换数字类型；"><a class="header-anchor" href="#用-快速转换数字类型；" aria-hidden="true">#</a> 用&#39;+&#39;快速转换数字类型；</h3><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token operator">+</span><span class="token string">&#39;11&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//number</span>\n</code></pre></div><p>如果+号前面有数字则会成拼接符;</p><h3 id="用-表示平方"><a class="header-anchor" href="#用-表示平方" aria-hidden="true">#</a> 用 ** 表示平方</h3><div class="language-js"><pre><code><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">**</span> <span class="token number">4</span> <span class="token comment">// 256</span>\n</code></pre></div><h2 id="十三、隐式转换"><a class="header-anchor" href="#十三、隐式转换" aria-hidden="true">#</a> 十三、隐式转换</h2><ol><li>在进行计算时，会隐式转换；10+true 为11；，10-true为9；</li><li>当+号遇到字符串的时候，+变成拼接符，将前后拼接起来，多个相加时，碰到引号开始拼接；</li><li>隐式转换会首先调用toString方法，如果没有则调用valueOf方法；</li><li>undefined和谁进行运算都是NaN</li><li>两个+会是NaN： &#39;a&#39;+ + &#39;b&#39; aNaN 后面这一个b转`换为NaN</li></ol><p>上题相当于 &#39;a&#39;+(+&#39;b&#39;)</p><p>理解：由于+是一元正号，计算操作数的数值时，会进行Number转换：Number(&#39;b&#39;) 转换为NaN，剩下的就是字符串和其他类型相加，都会被转化为字符串；</p><p>例子：</p><div class="language-js"><pre><code><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token operator">+</span>date   <span class="token comment">// 将进行Number(date)转换,转换成时间戳</span>\n</code></pre></div><ol start="6"><li>{}空对象和谁进行运算都自动转换toString，为[object Object]；</li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;两个数的和为&quot;</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;两个数的和为&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//NaN;</span>\n<span class="token punctuation">}</span>\n<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//y没有传值，10+undefined; 为NaN undefined是字符串类型,+号遇到字符串时隐式转换了;</span>\n<span class="token comment">// 如果没有(x+y)的小括号,则会是10undefined,成拼接符;</span>\n</code></pre></div><h3 id="连等运算符"><a class="header-anchor" href="#连等运算符" aria-hidden="true">#</a> 连等运算符</h3><p><code>a=b=c</code> 为b=c是a=b；永远取等号右边的表达式结果赋值到等号的左侧；</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>n<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> a\na<span class="token punctuation">.</span>x <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>n<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span>   <span class="token comment">// undefined;</span>\n</code></pre></div><p>理解:</p><p>var a = {n:1}</p><p>var b = a</p><p>a = {n:2} // 这里a指向了新的地址,b还是指向原来的地址,b没有重新被赋值;</p><p>上题中点的优先级最高,首先a.x = a,赋值了,a又被重新赋值,因此b.x有值;a.x为新对象为undefined;</p><h2 id="十四、json"><a class="header-anchor" href="#十四、json" aria-hidden="true">#</a> 十四、json</h2><p>json 是一种数据交换格式，从后台请求下来的数据基本上都是 json 类型，</p><p>json 数据用｛｝括起来，里面的数据以 key：value 存储。</p><h2 id="高频面试题："><a class="header-anchor" href="#高频面试题：" aria-hidden="true">#</a> 高频面试题：</h2><p>● js 数据类型？</p><p>● null 和 undefined 的区别？</p><p>● 运算符的种类？</p><p>● var a = 10;var b = a++; a、b 最后的结果是？</p><p>● “==”与“===”的区别？</p><p>● console.log(0.1+0.2 == 0.3)。</p><p>● NaN 会在什么样的情况下出现呢？列举出现这种情况的代码。</p><p>● 列举三种强制类型转换和 2 种隐式类型转换；</p>',216);t.render=function(s,p,t,o,c,l){return n(),a("div",null,[e])};export default t;export{p as __pageData};
