import{o as s,c as n,d as a}from"./app.b352b1d4.js";const p='{"title":"Webpack-01 服务、配置项","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、安装","slug":"一、安装"},{"level":2,"title":"二、手动配置webpack","slug":"二、手动配置webpack"},{"level":3,"title":"取命令行的参数","slug":"取命令行的参数"},{"level":2,"title":"三、启动服务","slug":"三、启动服务"},{"level":2,"title":"四、配置loader","slug":"四、配置loader"}],"relativePath":"src/frontend/Webpack/webpack-01 服务、配置项.md","lastUpdated":1615699077433}',e={},t=a('<h1 id="webpack-01-服务、配置项"><a class="header-anchor" href="#webpack-01-服务、配置项" aria-hidden="true">#</a> Webpack-01 服务、配置项</h1><h2 id="一、安装"><a class="header-anchor" href="#一、安装" aria-hidden="true">#</a> 一、安装</h2><ol><li><code>yarn init -y</code> 安装依赖</li><li><code>yarn add webpack webpack-cli -D</code> 需要安装开发依赖，上线不需要； <code>webpack</code>可以进行0配置，配置很弱；</li><li>打包命令：<code>npx webpack</code></li></ol><p><code>webpack</code>是一个打包工具，打包输出后的结果；</p><p>默认直接js模块化；</p><h2 id="二、手动配置webpack"><a class="header-anchor" href="#二、手动配置webpack" aria-hidden="true">#</a> 二、手动配置webpack</h2><ol><li>默认配置文件的名字：<code>webpack.config.js</code></li></ol><div class="language-js"><pre><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    mode<span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span> \n        <span class="token comment">/* 默认两个环境 \n         * development  打包之后不会压缩一行\n         * production 打包之后会将文件代码压缩一行\n         */</span>\n    entry<span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span>\n        filename<span class="token operator">:</span> <span class="token string">&#39;bundle.[hash:8].js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 打包的同时添加hash戳,解决缓存,:8只显示8位</span>\n        path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 必须使用绝对路径</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="2"><li><p>指定配置文件的名字：<code>npx webpack --config &lt;名字&gt;</code></p><p>如果执行的代码太长，可以在<code>package.json</code>里面的scripts来添加；</p></li></ol><div class="language-json"><pre><code><span class="token comment">// package.json</span>\n<span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --config&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="3"><li><code>npm run build</code>，默认运行的script脚本里面的代码，如果需要传入参数，需要带--两个横杠；</li></ol><h3 id="取命令行的参数"><a class="header-anchor" href="#取命令行的参数" aria-hidden="true">#</a> 取命令行的参数</h3><p><code>process.argv</code>：返回一个数组，第一个元素是<code>process.execPath</code>（<code>node</code>的位置），第二个元素是正在执行的<code>javascript</code>文件，其余元素是其他命令行的参数；</p><ol><li><code>process.argv</code>，数组最后一位可以取到 -- 后面的参数，如：<code>node scripts/build.js --dev</code> 取<code>dev</code>（<code>package/scripts</code>脚本下的命令，不是cmd终端下的命令）；</li><li><code>process.<wbr>env.npm_lifecycle_event</code>，取<code>script</code>脚本里面的命令，如：<code>npm run build</code>，取<code>build</code>；</li><li><code>process.<wbr>env.npm_config_cdn</code>，cdn为可改变的，当运行<code>npm run build --cdn</code>，会返回true，如果将cdn改成dev，则运行<code>npm run build --dev</code>会返回true，其他返回空或undefined；</li></ol><h2 id="三、启动服务"><a class="header-anchor" href="#三、启动服务" aria-hidden="true">#</a> 三、启动服务</h2><ol><li><code>webpack</code>打包时，默认是访问文件路径的；</li><li>安装：<code>yarn add webpack-dev-server -D</code> 安装开发依赖；</li><li>安装之后直接运行：<code>npx webpack-dev-server</code>，默认在本地启的服务器是<code>localhost:8080</code>，默认以当前目录作为静态目录，可以在<code>devServer</code>选项配置；</li></ol><div class="language-js"><pre><code><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span> \n    devServer<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 开发环境配置</span>\n        port<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment">// 端口</span>\n        progress<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 打包进度条</span>\n        contentBase<span class="token operator">:</span> <span class="token string">&#39;./build&#39;</span><span class="token punctuation">,</span> <span class="token comment">//静态服务的路径</span>\n        open<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 自动打开浏览器</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>之后可以在<code>package.json</code>里面配置启动了</p><div class="language-json"><pre><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack-dev-server&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="4"><li>自动创建html文件并引入；</li></ol><p>（1）安装：yarn add html-webpack-plugin -D</p><p>（2）配置html</p><div class="language-js"><pre><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 数组，放着所有的webpack插件</span>\n        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            template<span class="token operator">:</span> <span class="token string">&#39;./src/index.html&#39;</span><span class="token punctuation">,</span> <span class="token comment">//  模块目录;</span>\n            filename<span class="token operator">:</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 打包后的名字</span>\n            minify<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 对html文件进行处理,压缩html文件</span>\n                removeAttributeQuotes<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 删除html文件中的双引号</span>\n                collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 变成一行</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            hash<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 添加hash戳 解决缓存的问题</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="四、配置loader"><a class="header-anchor" href="#四、配置loader" aria-hidden="true">#</a> 四、配置loader</h2><ol><li><code>loader</code>的特点：希望单一；</li><li><code>loader</code>的用法：字符串只用一个loader，多个使用数组</li><li><code>loader</code>的顺序：从右向左执行，从下到上执行；</li><li><code>loader</code>还可以写成对象的形式</li></ol><p>如：<code>{use:[{loader:&#39;&#39;,options:{}}]}</code>，可以在<code>options</code>传入东西</p><p>案例：</p><p>配置css-loader</p><ol><li>yarn add css-loader style-loader -D</li></ol><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    module<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 模块</span>\n        rules<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 规则, 里面有很多 css-loader 解析@import这种语法</span>\n            <span class="token punctuation">{</span>\n                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 文件匹配正则</span>\n                <span class="token comment">// style-loader 他是把css插入到head的标签中</span>\n                use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                    loader<span class="token operator">:</span> <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>\n                    options<span class="token operator">:</span> <span class="token punctuation">{</span>\n                        insertAt<span class="token operator">:</span> <span class="token string">&#39;top&#39;</span> <span class="token comment">// 将模块中写的css样式默认插到层级的最下边, 在html模板中写的css层级更高</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="2"><li>添加scss处理</li></ol><p>（1）安装：<code>yarn add sass-loader node-sass -D</code>（sass-loader依赖node-sass）</p><div class="language-js"><pre><code>rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// use顺序从右向左, 需要先处理sass-loader之后再css;</span>\n    <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sass-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><ol start="3"><li>css抽离成单文件（默认是在html模块里面的）</li></ol><p>（1）安装：<code>yarn add mini-css-extract-plugin -D</code></p><p>（2）将<code>rules</code>里面的<code>style-loader</code>替换成该插件，如果需要多个文件，可以声明多个插件即可</p><div class="language-js"><pre><code><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 当需要多个css文件时, 可以复制一份;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    module<span class="token operator">:</span> <span class="token punctuation">{</span>\n        rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sass-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            filename<span class="token operator">:</span> <span class="token string">&#39;main.css&#39;</span>  \n            <span class="token comment">// 如果想输出到单独的文件夹，可以直接加路径 css/main.css</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="4"><li>自动添加兼容前缀</li></ol><p>（1）安装：<code>yarn add postcss-loader autoprefixer -D</code></p><p>（2）配置rules</p><div class="language-js"><pre><code>rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 先处理postcss-loader, 之后再处理css-loader</span>\n    <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span><span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;postcss-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;postcss-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sass-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><p>（3）在根目录创建<code>postcss.config.js</code></p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;autoprefixer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ol start="5"><li>css打包成一行</li></ol><p>（1）安装插件：<code>yarn add optimize-css-assets-webpack-plugin uglifyjs-webpack-plugin -D</code></p><div class="language-js"><pre><code><span class="token keyword">let</span> optimizeCssAssetsWebpackPlugin <span class="token operator">=</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;optimize-css-assets-webpack-plugin&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 用了css优化, 必须优化js, 否则js就不是一行了</span>\n<span class="token keyword">let</span> UglifyJSPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;uglifyjs-webpack-plugin&#39;</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    optimization<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 优化项</span>\n        minimizer<span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token keyword">new</span> <span class="token class-name">UglifyJSPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                cache<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 缓存</span>\n                parallel<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 并发</span>\n                sourceMap<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// sourceMap</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token keyword">new</span> <span class="token class-name">optimizeCssAssetsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',46);e.render=function(a,p,e,o,c,l){return s(),n("div",null,[t])};export default e;export{p as __pageData};
