import{o as n,c as s,d as a}from"./app.beda3532.js";const t='{"title":"TS-01 定义基本类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、定义类型","slug":"一、定义类型"},{"level":3,"title":"基础类型","slug":"基础类型"},{"level":3,"title":"数组类型","slug":"数组类型"},{"level":3,"title":"元组类型","slug":"元组类型"},{"level":3,"title":"any类型和void类型","slug":"any类型和void类型"},{"level":3,"title":"unknown","slug":"unknown"},{"level":3,"title":"null和undefined","slug":"null和undefined"},{"level":3,"title":"object类型","slug":"object类型"},{"level":3,"title":"类型推论","slug":"类型推论"},{"level":3,"title":"类型断言","slug":"类型断言"}],"relativePath":"src/frontend/Typescript/ts-01 基础类型.md","lastUpdated":1615699077416}',p={},e=a('<h1 id="ts-01-定义基本类型"><a class="header-anchor" href="#ts-01-定义基本类型" aria-hidden="true">#</a> TS-01 定义基本类型</h1><h2 id="一、定义类型"><a class="header-anchor" href="#一、定义类型" aria-hidden="true">#</a> 一、定义类型</h2><h3 id="基础类型"><a class="header-anchor" href="#基础类型" aria-hidden="true">#</a> 基础类型</h3><div class="language-js"><pre><code><span class="token keyword">let</span> bool<span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">//布尔</span>\n<span class="token keyword">let</span> num<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// 数字</span>\n<span class="token keyword">let</span> str<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span> <span class="token comment">// 字符串</span>\n</code></pre></div><h3 id="数组类型"><a class="header-anchor" href="#数组类型" aria-hidden="true">#</a> 数组类型</h3><div class="language-js"><pre><code><span class="token keyword">let</span> arr1<span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">// 数字数组</span>\n<span class="token keyword">let</span> arr2<span class="token operator">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token comment">// 写法二</span>\n<span class="token keyword">let</span> arr3<span class="token operator">:</span> <span class="token punctuation">(</span>string <span class="token operator">|</span> number<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 数字和字符串类型的数组, 检测联合类型</span>\n<span class="token keyword">let</span> mySons<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span>string<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;hhh&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token comment">// 对象数组</span>\n</code></pre></div><h3 id="元组类型"><a class="header-anchor" href="#元组类型" aria-hidden="true">#</a> 元组类型</h3><p>固定长度，必须按照定义的类型和长度</p><div class="language-js"><pre><code><span class="token keyword">let</span> tuple<span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">,</span> boolean<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span>\n</code></pre></div><p><strong>越界元素</strong></p><p>如果超过长度的值叫做越界元素, 2.6版本之前越界元素只要是规定的其中一种都行,2.6之后不能超过长度；</p><h3 id="any类型和void类型"><a class="header-anchor" href="#any类型和void类型" aria-hidden="true">#</a> any类型和void类型</h3><ol><li>any任何类型，any类型是不限制类型</li></ol><blockquote><p>什么类型都可以写（能不用尽量不用any）</p></blockquote><div class="language-js"><pre><code><span class="token keyword">let</span> arr<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span>\n</code></pre></div><ol start="2"><li>void类型，与any类型相反，什么类型都不是</li></ol><blockquote><p>经常用于一个函数不需要返回值，undefined和null也可以赋值给void类型；（当null赋值给void时需要关闭tsconfig的strict）</p></blockquote><div class="language-js"><pre><code><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter"><span class="token keyword">void</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 只能传字符串, 否则报错;</span>\n\n<span class="token keyword">let</span> v<span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\nv <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\nv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="unknown"><a class="header-anchor" href="#unknown" aria-hidden="true">#</a> unknown</h3><blockquote><p>ts3.0新增的一个<strong>顶级类型</strong>，相对于<code>any</code>来说是安全的</p></blockquote><ol><li><p>任何类型的值都可以赋值给<code>unknown</code>类型</p><div class="language-ts"><pre><code><span class="token keyword">let</span> value1<span class="token operator">:</span> <span class="token builtin">unknown</span>\nvalue1 <span class="token operator">=</span> <span class="token number">1</span>\nvalue1 <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>\n</code></pre></div></li><li><p><code>never</code>是<code>unknow</code>的子类型</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">type6</span> <span class="token operator">=</span> <span class="token builtin">never</span> <span class="token keyword">extends</span> <span class="token class-name">unknow</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 返回true</span>\n</code></pre></div></li></ol><h3 id="null和undefined"><a class="header-anchor" href="#null和undefined" aria-hidden="true">#</a> null和undefined</h3><blockquote><p>在ts中即是值也是类型</p></blockquote><div class="language-js"><pre><code><span class="token keyword">let</span> u<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\nu <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\nnum <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 将undefined赋值给num,如果开了tsconfig的严格检查则不能赋值;</span>\n</code></pre></div><h3 id="object类型"><a class="header-anchor" href="#object类型" aria-hidden="true">#</a> object类型</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">getObj</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token operator">:</span> object</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">getObj</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;hhh&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 只能传入对象</span>\n</code></pre></div><h3 id="类型推论"><a class="header-anchor" href="#类型推论" aria-hidden="true">#</a> 类型推论</h3><div class="language-ts"><pre><code><span class="token keyword">let</span> myNumber <span class="token operator">=</span> <span class="token number">5</span>\nmyNumber <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token comment">// 报错, 再第一次定义时已经给出类型了</span>\n</code></pre></div><h3 id="类型断言"><a class="header-anchor" href="#类型断言" aria-hidden="true">#</a> 类型断言</h3><blockquote><p>类型断言像是一种类型转换，在我们知道该类型是什么类型，通过特定语法强行转换成该类型；</p></blockquote><div class="language-ts"><pre><code><span class="token keyword">const</span> getLength <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这里如果直接使用target.length会报错, 因为number是没有length属性的;</span>\n    <span class="token comment">// 支持两种写法定义类型;</span>\n    <span class="token comment">// jsx时, 只能使用as语法断言, 因为前者会被识别为标签</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token punctuation">(</span>target <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>length\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>1、<code>&lt;string&gt;target</code> 断言</p><p>2、<code>(target as string).length</code> 断言</p><p>3、非空断言</p><p>非空断言 使用!后缀，断言值不是undefined或null 如: <code>let x = name!</code> 函数调用时: <code>cb!()</code></p><p>4、确定赋值断言 先声明类型后断言，有时使用时检测到未赋值就使用，可以加上该断言 <code>let a!: number;</code></p><p>5、 const断言 将值锁为死值，可以使用as const或者<code>&lt;const&gt;</code>来断言</p><div class="language-ts"><pre><code><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">;</span> <span class="token comment">// x: &#39;x&#39;</span>\n<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">;</span> <span class="token comment">// y: string; 这里的y为string类型不为死值</span>\n<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token string">&#39;y&#39;</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">// y: string;</span>\n\n<span class="token comment">// 对象时</span>\n<span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token keyword">const</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&#39;SET_VALUE&#39;</span><span class="token punctuation">,</span>\n    payload<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\naction<span class="token punctuation">.</span>payload<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 报错</span>\n</code></pre></div><p>在访问window上的属性并赋值，可以使用as any来断言</p><div class="language-TS"><pre><code><span class="token punctuation">(</span>window <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">1</span>\n</code></pre></div><p>总结类型：</p><ul><li><code>string</code>、<code>number</code>、<code>boolean</code></li><li><code>number[]</code>、<code>Array&lt;string&gt;</code>、<code>(string|number)[]</code></li><li><code>void</code>、<code>never</code></li><li><code>unknown、undefined</code>、<code>null</code></li><li><code>(&lt;string&gt;target)</code></li><li><code>(target as string)</code></li><li><code>(window as any)</code></li></ul>',42);p.render=function(a,t,p,o,c,l){return n(),s("div",null,[e])};export default p;export{t as __pageData};
