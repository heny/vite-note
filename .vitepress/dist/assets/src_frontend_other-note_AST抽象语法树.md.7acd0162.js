import{o as n,c as s,d as a}from"./app.1237ae02.js";const t='{"title":"AST抽象语法树","description":"","frontmatter":{},"headers":[{"level":2,"title":"常用方法","slug":"常用方法"},{"level":2,"title":"解析代码","slug":"解析代码"},{"level":2,"title":"recast.types.builders 制作模具","slug":"recast-types-builders-制作模具"},{"level":2,"title":"命令行文件读取 recast.run","slug":"命令行文件读取-recast-run"},{"level":2,"title":"节点遍历 recast.visit","slug":"节点遍历-recast-visit"},{"level":2,"title":"判断AST对象类型","slug":"判断ast对象类型"},{"level":2,"title":"实战操作替换","slug":"实战操作替换"},{"level":2,"title":"类型示例","slug":"类型示例"},{"level":2,"title":"AST文章推荐","slug":"ast文章推荐"}],"relativePath":"src/frontend/other-note/AST抽象语法树.md","lastUpdated":1621950386307}',p={},o=a('<h1 id="ast抽象语法树"><a class="header-anchor" href="#ast抽象语法树" aria-hidden="true">#</a> AST抽象语法树</h1><p>官方文档查看链接：<a href="https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API" target="_blank" rel="noopener noreferrer">AST对象文档</a> 文档参考链接：<a href="https://segmentfault.com/a/1190000016231512" target="_blank" rel="noopener noreferrer">AST抽象语法树</a> 插件：<code>npm i recast</code>;</p><h2 id="常用方法"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h2><ul><li>解析代码：<code>recast.parse(code)</code></li><li>输出代码：<code>recast.print(ast).code</code></li><li>输出美化代码：<code>recast.prettyPrint(ast, { tabWidth: 2 }).code</code></li><li>读取文件：<code>recast.run(function(ast, printSource) {})</code></li><li>节点遍历：<code>recast.visit(ast, {visitExpressionStatement:function(path){}})</code></li></ul><h2 id="解析代码"><a class="header-anchor" href="#解析代码" aria-hidden="true">#</a> 解析代码</h2><div class="language-js"><pre><code><span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\nfunction add(a, b) {\n  return a + b;\n}\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">const</span> ast <span class="token operator">=</span> recast<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>\n</code></pre></div><h2 id="recast-types-builders-制作模具"><a class="header-anchor" href="#recast-types-builders-制作模具" aria-hidden="true">#</a> recast.types.builders 制作模具</h2><p>用来修改代码，里面包含所有的AST工具，AST可以去<a href="https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API" target="_blank" rel="noopener noreferrer">AST对象文档</a>查看</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span>\n  variableDeclaration<span class="token punctuation">,</span>\n  variableDeclarator<span class="token punctuation">,</span>\n  functionExpression \n<span class="token punctuation">}</span> <span class="token operator">=</span> recast<span class="token punctuation">.</span>types<span class="token punctuation">.</span>builders<span class="token punctuation">;</span>\nast<span class="token punctuation">.</span>program<span class="token punctuation">.</span>body<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">variableDeclaration</span><span class="token punctuation">(</span><span class="token string">&#39;const&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n  <span class="token function">variableDeclarator</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token function">functionExpression</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> add<span class="token punctuation">.</span>params<span class="token punctuation">,</span> add<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> output <span class="token operator">=</span> recast<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>\n<span class="token comment">// 输出美化格式的代码</span>\n<span class="token comment">// const output = recast.prettyPrint(ast, { tabWidth: 2 }).code;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>\n</code></pre></div><h2 id="命令行文件读取-recast-run"><a class="header-anchor" href="#命令行文件读取-recast-run" aria-hidden="true">#</a> 命令行文件读取 recast.run</h2><p>创建read.js</p><div class="language-js"><pre><code><span class="token keyword">const</span> recast <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;recast&#39;</span><span class="token punctuation">)</span>\nrecast<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> printSource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">printSource</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>命令行输入</p><div class="language-js"><pre><code>node read demo<span class="token punctuation">.</span>js\n</code></pre></div><h2 id="节点遍历-recast-visit"><a class="header-anchor" href="#节点遍历-recast-visit" aria-hidden="true">#</a> 节点遍历 recast.visit</h2><div class="language-js"><pre><code>recast<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> printSource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  recast<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">visitExpressionStatement</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> node <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>注意：</p><ul><li>想遍历什么就在前面加<code>visit</code></li><li>每个节点遍历必须<code>return false</code>，或者 <code>this.traverse(path)</code>，否则报错；</li><li>遍历中想输出ast对象，就使用<code>console.log(node)</code>，想输出ast对象对应的源码，可以<code>printSource(node)</code></li><li><code>#!/usr/bin/env node</code> 在所有使用<code>recast.run()</code>的文件顶部都需要加入这一行</li></ul><h2 id="判断ast对象类型"><a class="header-anchor" href="#判断ast对象类型" aria-hidden="true">#</a> 判断AST对象类型</h2><p>TNT，recast.types.namedTypes</p><ul><li><code>TNT.Node.assert(node)</code> 判断node不为Node时，正确不输出，错误全局报错</li><li><code>TNT.Node.check(node)</code> 判断node是否与Node一致，Node为AST对象，比如ExpressionStatement</li></ul><h2 id="实战操作替换"><a class="header-anchor" href="#实战操作替换" aria-hidden="true">#</a> 实战操作替换</h2><p>可以使用在线ast语法树，输入想要转换的结构，获取对应的节点类型，之后进行替换</p><div class="language-js"><pre><code>#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node\n<span class="token keyword">const</span> recast <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;recast&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span>\n  identifier<span class="token operator">:</span> id<span class="token punctuation">,</span>\n  expressionStatement<span class="token punctuation">,</span>\n  memberExpression<span class="token punctuation">,</span>\n  assignmentExpression<span class="token punctuation">,</span>\n  arrowFunctionExpression\n<span class="token punctuation">}</span> <span class="token operator">=</span> recast<span class="token punctuation">.</span>types<span class="token punctuation">.</span>builders\n\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 截取参数</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n\n<span class="token comment">//如果没有参数，或提供了-h 或--help选项，则打印帮助</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span> <span class="token operator">||</span> options<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;-h&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> options<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;--help&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    采用commonjs规则，将.js文件内所有函数修改为导出形式。\n\n    选项： -r  或 --rewrite 可直接覆盖原有文件\n    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 只要有-r 或--rewrite参数，则rewriteMode为true</span>\n<span class="token keyword">let</span> rewriteMode <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;-r&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> options<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;--rewrite&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 获取文件名</span>\n<span class="token keyword">const</span> clearFileArg <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">&#39;-r&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;--rewrite&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;-h&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;--help&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 只处理一个文件</span>\n<span class="token keyword">let</span> filename <span class="token operator">=</span> clearFileArg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">writeASTFile</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> rewriteMode</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> newCode <span class="token operator">=</span> recast<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">.</span>code\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rewriteMode<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 非覆盖模式下，将新文件写入*.export.js下</span>\n    filename <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;export&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 将新代码写入文件</span>\n  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">,</span>newCode<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n\nrecast<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> printSource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> funcIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  recast<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function">visitFunctionDeclaration</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//获取遍历到的函数名、参数、块级域</span>\n      <span class="token keyword">const</span> node <span class="token operator">=</span> path<span class="token punctuation">.</span>node\n      <span class="token keyword">const</span> funcName <span class="token operator">=</span> node<span class="token punctuation">.</span>id\n      <span class="token keyword">const</span> params <span class="token operator">=</span> node<span class="token punctuation">.</span>params\n      <span class="token keyword">const</span> body <span class="token operator">=</span> node<span class="token punctuation">.</span>body\n\n      funcIds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>funcName<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n      <span class="token keyword">const</span> rep <span class="token operator">=</span> <span class="token function">expressionStatement</span><span class="token punctuation">(</span><span class="token function">assignmentExpression</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token function">memberExpression</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&#39;exports&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> funcName<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function">arrowFunctionExpression</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>rep<span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n\n  recast<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function">visitCallExpression</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">const</span> node <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>funcIds<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        node<span class="token punctuation">.</span>callee <span class="token operator">=</span> <span class="token function">memberExpression</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&#39;exports&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>callee<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token function">writeASTFile</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span>filename<span class="token punctuation">,</span>rewriteMode<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="类型示例"><a class="header-anchor" href="#类型示例" aria-hidden="true">#</a> 类型示例</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0870a372ff146a2b6298b25dedef1e2~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h2 id="ast文章推荐"><a class="header-anchor" href="#ast文章推荐" aria-hidden="true">#</a> AST文章推荐</h2><ul><li><a href="https://juejin.cn/post/6923936548027105293" target="_blank" rel="noopener noreferrer">像玩 jQuery 一样玩 AST</a></li><li><a href="https://juejin.cn/post/6938601548192677918" target="_blank" rel="noopener noreferrer">阿里妈妈出的新工具，给批量修改项目代码减轻了痛苦</a></li></ul>',28);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
